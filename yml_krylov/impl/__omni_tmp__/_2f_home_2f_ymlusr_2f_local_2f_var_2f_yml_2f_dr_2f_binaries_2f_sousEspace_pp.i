# 1 "__omni_tmp__/_2f_home_2f_ymlusr_2f_local_2f_var_2f_yml_2f_dr_2f_binaries_2f_sousEspace_pp.c"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "__omni_tmp__/_2f_home_2f_ymlusr_2f_local_2f_var_2f_yml_2f_dr_2f_binaries_2f_sousEspace_pp.c"
# 1 "/home/ymlusr/local/var/yml/dr/binaries/sousEspace.c"






# 1 "/home/ymlusr/local/var/yml/DefaultExecutionCatalog/generators/XMP/include/yml_xmp_component_base.hh" 1
# 54 "/home/ymlusr/local/var/yml/DefaultExecutionCatalog/generators/XMP/include/yml_xmp_component_base.hh"
# 1 "/usr/include/stdio.h" 1 3 4
# 27 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 374 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 385 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 386 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 375 "/usr/include/features.h" 2 3 4
# 398 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 399 "/usr/include/features.h" 2 3 4
# 28 "/usr/include/stdio.h" 2 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h" 1 3 4
# 212 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 34 "/usr/include/stdio.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;







typedef long int __quad_t;
typedef unsigned long int __u_quad_t;
# 121 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 122 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;
# 36 "/usr/include/stdio.h" 2 3 4
# 44 "/usr/include/stdio.h" 3 4
struct _IO_FILE;



typedef struct _IO_FILE FILE;





# 64 "/usr/include/stdio.h" 3 4
typedef struct _IO_FILE __FILE;
# 74 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/libio.h" 1 3 4
# 31 "/usr/include/libio.h" 3 4
# 1 "/usr/include/_G_config.h" 1 3 4
# 15 "/usr/include/_G_config.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h" 1 3 4
# 16 "/usr/include/_G_config.h" 2 3 4




# 1 "/usr/include/wchar.h" 1 3 4
# 82 "/usr/include/wchar.h" 3 4
typedef struct
{
  int __count;
  union
  {

    unsigned int __wch;



    char __wchb[4];
  } __value;
} __mbstate_t;
# 21 "/usr/include/_G_config.h" 2 3 4
typedef struct
{
  __off_t __pos;
  __mbstate_t __state;
} _G_fpos_t;
typedef struct
{
  __off64_t __pos;
  __mbstate_t __state;
} _G_fpos64_t;
# 32 "/usr/include/libio.h" 2 3 4
# 49 "/usr/include/libio.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 50 "/usr/include/libio.h" 2 3 4
# 144 "/usr/include/libio.h" 3 4
struct _IO_jump_t; struct _IO_FILE;
# 154 "/usr/include/libio.h" 3 4
typedef void _IO_lock_t;





struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;



  int _pos;
# 177 "/usr/include/libio.h" 3 4
};


enum __codecvt_result
{
  __codecvt_ok,
  __codecvt_partial,
  __codecvt_error,
  __codecvt_noconv
};
# 245 "/usr/include/libio.h" 3 4
struct _IO_FILE {
  int _flags;




  char* _IO_read_ptr;
  char* _IO_read_end;
  char* _IO_read_base;
  char* _IO_write_base;
  char* _IO_write_ptr;
  char* _IO_write_end;
  char* _IO_buf_base;
  char* _IO_buf_end;

  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;



  int _flags2;

  __off_t _old_offset;



  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];



  _IO_lock_t *_lock;
# 293 "/usr/include/libio.h" 3 4
  __off64_t _offset;
# 302 "/usr/include/libio.h" 3 4
  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;
  size_t __pad5;

  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];

};


typedef struct _IO_FILE _IO_FILE;


struct _IO_FILE_plus;

extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
# 338 "/usr/include/libio.h" 3 4
typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);







typedef __ssize_t __io_write_fn (void *__cookie, const char *__buf,
     size_t __n);







typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w);


typedef int __io_close_fn (void *__cookie);
# 390 "/usr/include/libio.h" 3 4
extern int __underflow (_IO_FILE *);
extern int __uflow (_IO_FILE *);
extern int __overflow (_IO_FILE *, int);
# 434 "/usr/include/libio.h" 3 4
extern int _IO_getc (_IO_FILE *__fp);
extern int _IO_putc (int __c, _IO_FILE *__fp);
extern int _IO_feof (_IO_FILE *__fp) __attribute__ ((__nothrow__ , __leaf__));
extern int _IO_ferror (_IO_FILE *__fp) __attribute__ ((__nothrow__ , __leaf__));

extern int _IO_peekc_locked (_IO_FILE *__fp);





extern void _IO_flockfile (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
extern void _IO_funlockfile (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
extern int _IO_ftrylockfile (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
# 464 "/usr/include/libio.h" 3 4
extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
   __gnuc_va_list, int *__restrict);
extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
    __gnuc_va_list);
extern __ssize_t _IO_padn (_IO_FILE *, int, __ssize_t);
extern size_t _IO_sgetn (_IO_FILE *, void *, size_t);

extern __off64_t _IO_seekoff (_IO_FILE *, __off64_t, int, int);
extern __off64_t _IO_seekpos (_IO_FILE *, __off64_t, int);

extern void _IO_free_backup_area (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
# 75 "/usr/include/stdio.h" 2 3 4




typedef __gnuc_va_list va_list;
# 90 "/usr/include/stdio.h" 3 4
typedef __off_t off_t;
# 102 "/usr/include/stdio.h" 3 4
typedef __ssize_t ssize_t;







typedef _G_fpos_t fpos_t;




# 164 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 165 "/usr/include/stdio.h" 2 3 4



extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;







extern int remove (const char *__filename) __attribute__ ((__nothrow__ , __leaf__));

extern int rename (const char *__old, const char *__new) __attribute__ ((__nothrow__ , __leaf__));




extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) __attribute__ ((__nothrow__ , __leaf__));








extern FILE *tmpfile (void) __attribute__ ((__warn_unused_result__));
# 209 "/usr/include/stdio.h" 3 4
extern char *tmpnam (char *__s) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));





extern char *tmpnam_r (char *__s) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
# 227 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__warn_unused_result__));








extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);

# 252 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 266 "/usr/include/stdio.h" 3 4






extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes) __attribute__ ((__warn_unused_result__));




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
# 295 "/usr/include/stdio.h" 3 4

# 306 "/usr/include/stdio.h" 3 4
extern FILE *fdopen (int __fd, const char *__modes) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
# 319 "/usr/include/stdio.h" 3 4
extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));






extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) __attribute__ ((__nothrow__ , __leaf__));





extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) __attribute__ ((__nothrow__ , __leaf__));


extern void setlinebuf (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));








extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) __attribute__ ((__nothrow__));





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) __attribute__ ((__nothrow__));





extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 0)));

# 412 "/usr/include/stdio.h" 3 4
extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));








extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) __attribute__ ((__warn_unused_result__));




extern int scanf (const char *__restrict __format, ...) __attribute__ ((__warn_unused_result__));

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) __attribute__ ((__nothrow__ , __leaf__));
# 443 "/usr/include/stdio.h" 3 4
extern int fscanf (FILE *__restrict __stream, const char *__restrict __format, ...) __asm__ ("" "__isoc99_fscanf")

                          __attribute__ ((__warn_unused_result__));
extern int scanf (const char *__restrict __format, ...) __asm__ ("" "__isoc99_scanf")
                         __attribute__ ((__warn_unused_result__));
extern int sscanf (const char *__restrict __s, const char *__restrict __format, ...) __asm__ ("" "__isoc99_sscanf") __attribute__ ((__nothrow__ , __leaf__))

                      ;
# 463 "/usr/include/stdio.h" 3 4








extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) __attribute__ ((__warn_unused_result__));





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) __attribute__ ((__warn_unused_result__));


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format__ (__scanf__, 2, 0)));
# 494 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vfscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0))) __attribute__ ((__warn_unused_result__));
extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vscanf")

     __attribute__ ((__format__ (__scanf__, 1, 0))) __attribute__ ((__warn_unused_result__));
extern int vsscanf (const char *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vsscanf") __attribute__ ((__nothrow__ , __leaf__))



     __attribute__ ((__format__ (__scanf__, 2, 0)));
# 522 "/usr/include/stdio.h" 3 4









extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);

# 550 "/usr/include/stdio.h" 3 4
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 561 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);











extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);

# 594 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);








extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     __attribute__ ((__warn_unused_result__));
# 638 "/usr/include/stdio.h" 3 4
extern char *gets (char *__s) __attribute__ ((__warn_unused_result__)) __attribute__ ((__deprecated__));


# 665 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
          size_t *__restrict __n, int __delimiter,
          FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern __ssize_t getdelim (char **__restrict __lineptr,
        size_t *__restrict __n, int __delimiter,
        FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));







extern __ssize_t getline (char **__restrict __lineptr,
       size_t *__restrict __n,
       FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));








extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);

# 737 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);








extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) __attribute__ ((__warn_unused_result__));




extern void rewind (FILE *__stream);

# 773 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) __attribute__ ((__warn_unused_result__));
# 792 "/usr/include/stdio.h" 3 4






extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 815 "/usr/include/stdio.h" 3 4

# 824 "/usr/include/stdio.h" 3 4


extern void clearerr (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));

extern int feof (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));

extern int ferror (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));




extern void clearerr_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
extern int feof_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern int ferror_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));








extern void perror (const char *__s);






# 1 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern const char *const sys_errlist[];
# 854 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));




extern int fileno_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
# 873 "/usr/include/stdio.h" 3 4
extern FILE *popen (const char *__command, const char *__modes) __attribute__ ((__warn_unused_result__));





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) __attribute__ ((__nothrow__ , __leaf__));
# 913 "/usr/include/stdio.h" 3 4
extern void flockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));



extern int ftrylockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));


extern void funlockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
# 934 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio.h" 1 3 4
# 43 "/usr/include/x86_64-linux-gnu/bits/stdio.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) int
getchar (void)
{
  return _IO_getc (stdin);
}




extern __inline __attribute__ ((__gnu_inline__)) int
fgetc_unlocked (FILE *__fp)
{
  return (__builtin_expect (((__fp)->_IO_read_ptr >= (__fp)->_IO_read_end), 0) ? __uflow (__fp) : *(unsigned char *) (__fp)->_IO_read_ptr++);
}





extern __inline __attribute__ ((__gnu_inline__)) int
getc_unlocked (FILE *__fp)
{
  return (__builtin_expect (((__fp)->_IO_read_ptr >= (__fp)->_IO_read_end), 0) ? __uflow (__fp) : *(unsigned char *) (__fp)->_IO_read_ptr++);
}


extern __inline __attribute__ ((__gnu_inline__)) int
getchar_unlocked (void)
{
  return (__builtin_expect (((stdin)->_IO_read_ptr >= (stdin)->_IO_read_end), 0) ? __uflow (stdin) : *(unsigned char *) (stdin)->_IO_read_ptr++);
}




extern __inline __attribute__ ((__gnu_inline__)) int
putchar (int __c)
{
  return _IO_putc (__c, stdout);
}




extern __inline __attribute__ ((__gnu_inline__)) int
fputc_unlocked (int __c, FILE *__stream)
{
  return (__builtin_expect (((__stream)->_IO_write_ptr >= (__stream)->_IO_write_end), 0) ? __overflow (__stream, (unsigned char) (__c)) : (unsigned char) (*(__stream)->_IO_write_ptr++ = (__c)));
}





extern __inline __attribute__ ((__gnu_inline__)) int
putc_unlocked (int __c, FILE *__stream)
{
  return (__builtin_expect (((__stream)->_IO_write_ptr >= (__stream)->_IO_write_end), 0) ? __overflow (__stream, (unsigned char) (__c)) : (unsigned char) (*(__stream)->_IO_write_ptr++ = (__c)));
}


extern __inline __attribute__ ((__gnu_inline__)) int
putchar_unlocked (int __c)
{
  return (__builtin_expect (((stdout)->_IO_write_ptr >= (stdout)->_IO_write_end), 0) ? __overflow (stdout, (unsigned char) (__c)) : (unsigned char) (*(stdout)->_IO_write_ptr++ = (__c)));
}
# 124 "/usr/include/x86_64-linux-gnu/bits/stdio.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__nothrow__ , __leaf__)) feof_unlocked (FILE *__stream)
{
  return (((__stream)->_flags & 0x10) != 0);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__nothrow__ , __leaf__)) ferror_unlocked (FILE *__stream)
{
  return (((__stream)->_flags & 0x20) != 0);
}
# 935 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/stdio2.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/stdio2.h" 3 4
extern int __sprintf_chk (char *__restrict __s, int __flag, size_t __slen,
     const char *__restrict __format, ...) __attribute__ ((__nothrow__ , __leaf__));
extern int __vsprintf_chk (char *__restrict __s, int __flag, size_t __slen,
      const char *__restrict __format,
      __gnuc_va_list __ap) __attribute__ ((__nothrow__ , __leaf__));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) sprintf (char *__restrict __s, const char *__restrict __fmt, ...)
{
  return __builtin___sprintf_chk (__s, 2 - 1,
      __builtin_object_size (__s, 2 > 1), __fmt, __builtin_va_arg_pack ());
}






extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) vsprintf (char *__restrict __s, const char *__restrict __fmt, __gnuc_va_list __ap)

{
  return __builtin___vsprintf_chk (__s, 2 - 1,
       __builtin_object_size (__s, 2 > 1), __fmt, __ap);
}



extern int __snprintf_chk (char *__restrict __s, size_t __n, int __flag,
      size_t __slen, const char *__restrict __format,
      ...) __attribute__ ((__nothrow__ , __leaf__));
extern int __vsnprintf_chk (char *__restrict __s, size_t __n, int __flag,
       size_t __slen, const char *__restrict __format,
       __gnuc_va_list __ap) __attribute__ ((__nothrow__ , __leaf__));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) snprintf (char *__restrict __s, size_t __n, const char *__restrict __fmt, ...)

{
  return __builtin___snprintf_chk (__s, __n, 2 - 1,
       __builtin_object_size (__s, 2 > 1), __fmt, __builtin_va_arg_pack ());
}






extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) vsnprintf (char *__restrict __s, size_t __n, const char *__restrict __fmt, __gnuc_va_list __ap)

{
  return __builtin___vsnprintf_chk (__s, __n, 2 - 1,
        __builtin_object_size (__s, 2 > 1), __fmt, __ap);
}





extern int __fprintf_chk (FILE *__restrict __stream, int __flag,
     const char *__restrict __format, ...);
extern int __printf_chk (int __flag, const char *__restrict __format, ...);
extern int __vfprintf_chk (FILE *__restrict __stream, int __flag,
      const char *__restrict __format, __gnuc_va_list __ap);
extern int __vprintf_chk (int __flag, const char *__restrict __format,
     __gnuc_va_list __ap);


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
fprintf (FILE *__restrict __stream, const char *__restrict __fmt, ...)
{
  return __fprintf_chk (__stream, 2 - 1, __fmt,
   __builtin_va_arg_pack ());
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
printf (const char *__restrict __fmt, ...)
{
  return __printf_chk (2 - 1, __fmt, __builtin_va_arg_pack ());
}







extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
vprintf (const char *__restrict __fmt, __gnuc_va_list __ap)
{

  return __vfprintf_chk (stdout, 2 - 1, __fmt, __ap);



}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
vfprintf (FILE *__restrict __stream,
   const char *__restrict __fmt, __gnuc_va_list __ap)
{
  return __vfprintf_chk (__stream, 2 - 1, __fmt, __ap);
}


extern int __dprintf_chk (int __fd, int __flag, const char *__restrict __fmt,
     ...) __attribute__ ((__format__ (__printf__, 3, 4)));
extern int __vdprintf_chk (int __fd, int __flag,
      const char *__restrict __fmt, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 3, 0)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
dprintf (int __fd, const char *__restrict __fmt, ...)
{
  return __dprintf_chk (__fd, 2 - 1, __fmt,
   __builtin_va_arg_pack ());
}





extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
vdprintf (int __fd, const char *__restrict __fmt, __gnuc_va_list __ap)
{
  return __vdprintf_chk (__fd, 2 - 1, __fmt, __ap);
}
# 227 "/usr/include/x86_64-linux-gnu/bits/stdio2.h" 3 4
extern char *__gets_chk (char *__str, size_t) __attribute__ ((__warn_unused_result__));
extern char *__gets_warn (char *__str) __asm__ ("" "gets")
     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("please use fgets or getline instead, gets can't " "specify buffer size")))
                               ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) char *
gets (char *__str)
{
  if (__builtin_object_size (__str, 2 > 1) != (size_t) -1)
    return __gets_chk (__str, __builtin_object_size (__str, 2 > 1));
  return __gets_warn (__str);
}


extern char *__fgets_chk (char *__restrict __s, size_t __size, int __n,
     FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern char *__fgets_alias (char *__restrict __s, int __n, FILE *__restrict __stream) __asm__ ("" "fgets")

                                        __attribute__ ((__warn_unused_result__));
extern char *__fgets_chk_warn (char *__restrict __s, size_t __size, int __n, FILE *__restrict __stream) __asm__ ("" "__fgets_chk")


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fgets called with bigger size than length " "of destination buffer")))
                                 ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) char *
fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
{
  if (__builtin_object_size (__s, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__n) || __n <= 0)
 return __fgets_chk (__s, __builtin_object_size (__s, 2 > 1), __n, __stream);

      if ((size_t) __n > __builtin_object_size (__s, 2 > 1))
 return __fgets_chk_warn (__s, __builtin_object_size (__s, 2 > 1), __n, __stream);
    }
  return __fgets_alias (__s, __n, __stream);
}

extern size_t __fread_chk (void *__restrict __ptr, size_t __ptrlen,
      size_t __size, size_t __n,
      FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern size_t __fread_alias (void *__restrict __ptr, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "fread")


            __attribute__ ((__warn_unused_result__));
extern size_t __fread_chk_warn (void *__restrict __ptr, size_t __ptrlen, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "__fread_chk")




     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fread called with bigger size * nmemb than length " "of destination buffer")))
                                 ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) size_t
fread (void *__restrict __ptr, size_t __size, size_t __n,
       FILE *__restrict __stream)
{
  if (__builtin_object_size (__ptr, 0) != (size_t) -1)
    {
      if (!__builtin_constant_p (__size)
   || !__builtin_constant_p (__n)
   || (__size | __n) >= (((size_t) 1) << (8 * sizeof (size_t) / 2)))
 return __fread_chk (__ptr, __builtin_object_size (__ptr, 0), __size, __n, __stream);

      if (__size * __n > __builtin_object_size (__ptr, 0))
 return __fread_chk_warn (__ptr, __builtin_object_size (__ptr, 0), __size, __n, __stream);
    }
  return __fread_alias (__ptr, __size, __n, __stream);
}
# 327 "/usr/include/x86_64-linux-gnu/bits/stdio2.h" 3 4
extern size_t __fread_unlocked_chk (void *__restrict __ptr, size_t __ptrlen,
        size_t __size, size_t __n,
        FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern size_t __fread_unlocked_alias (void *__restrict __ptr, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "fread_unlocked")


                     __attribute__ ((__warn_unused_result__));
extern size_t __fread_unlocked_chk_warn (void *__restrict __ptr, size_t __ptrlen, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "__fread_unlocked_chk")




     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fread_unlocked called with bigger size * nmemb than " "length of destination buffer")))
                                        ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) size_t
fread_unlocked (void *__restrict __ptr, size_t __size, size_t __n,
  FILE *__restrict __stream)
{
  if (__builtin_object_size (__ptr, 0) != (size_t) -1)
    {
      if (!__builtin_constant_p (__size)
   || !__builtin_constant_p (__n)
   || (__size | __n) >= (((size_t) 1) << (8 * sizeof (size_t) / 2)))
 return __fread_unlocked_chk (__ptr, __builtin_object_size (__ptr, 0), __size, __n,
         __stream);

      if (__size * __n > __builtin_object_size (__ptr, 0))
 return __fread_unlocked_chk_warn (__ptr, __builtin_object_size (__ptr, 0), __size, __n,
       __stream);
    }


  if (__builtin_constant_p (__size)
      && __builtin_constant_p (__n)
      && (__size | __n) < (((size_t) 1) << (8 * sizeof (size_t) / 2))
      && __size * __n <= 8)
    {
      size_t __cnt = __size * __n;
      char *__cptr = (char *) __ptr;
      if (__cnt == 0)
 return 0;

      for (; __cnt > 0; --__cnt)
 {
   int __c = (__builtin_expect (((__stream)->_IO_read_ptr >= (__stream)->_IO_read_end), 0) ? __uflow (__stream) : *(unsigned char *) (__stream)->_IO_read_ptr++);
   if (__c == (-1))
     break;
   *__cptr++ = __c;
 }
      return (__cptr - (char *) __ptr) / __size;
    }

  return __fread_unlocked_alias (__ptr, __size, __n, __stream);
}
# 938 "/usr/include/stdio.h" 2 3 4






# 55 "/home/ymlusr/local/var/yml/DefaultExecutionCatalog/generators/XMP/include/yml_xmp_component_base.hh" 2
# 1 "/usr/include/stdlib.h" 1 3 4
# 32 "/usr/include/stdlib.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h" 1 3 4
# 324 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h" 3 4
typedef int wchar_t;
# 33 "/usr/include/stdlib.h" 2 3 4








# 1 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 1 3 4
# 50 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 3 4
typedef enum
{
  P_ALL,
  P_PID,
  P_PGID
} idtype_t;
# 42 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 1 3 4
# 64 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 36 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endian.h" 1 3 4
# 37 "/usr/include/endian.h" 2 3 4
# 60 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 2 3 4






# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap-16.h" 1 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 2 3 4
# 44 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline unsigned int
__bswap_32 (unsigned int __bsx)
{
  return __builtin_bswap32 (__bsx);
}
# 108 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{
  return __builtin_bswap64 (__bsx);
}
# 61 "/usr/include/endian.h" 2 3 4
# 65 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 2 3 4

union wait
  {
    int w_status;
    struct
      {

 unsigned int __w_termsig:7;
 unsigned int __w_coredump:1;
 unsigned int __w_retcode:8;
 unsigned int:16;







      } __wait_terminated;
    struct
      {

 unsigned int __w_stopval:8;
 unsigned int __w_stopsig:8;
 unsigned int:16;






      } __wait_stopped;
  };
# 43 "/usr/include/stdlib.h" 2 3 4
# 67 "/usr/include/stdlib.h" 3 4
typedef union
  {
    union wait *__uptr;
    int *__iptr;
  } __WAIT_STATUS __attribute__ ((__transparent_union__));
# 95 "/usr/include/stdlib.h" 3 4


typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;







__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;


# 139 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));




extern double atof (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));

extern int atoi (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));

extern long int atol (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));





__extension__ extern long long int atoll (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));





extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

# 276 "/usr/include/stdlib.h" 3 4

extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__nothrow__ , __leaf__)) atoi (const char *__nptr)
{
  return (int) strtol (__nptr, (char **) ((void *)0), 10);
}
extern __inline __attribute__ ((__gnu_inline__)) long int
__attribute__ ((__nothrow__ , __leaf__)) atol (const char *__nptr)
{
  return strtol (__nptr, (char **) ((void *)0), 10);
}




__extension__ extern __inline __attribute__ ((__gnu_inline__)) long long int
__attribute__ ((__nothrow__ , __leaf__)) atoll (const char *__nptr)
{
  return strtoll (__nptr, (char **) ((void *)0), 10);
}

# 305 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));


extern long int a64l (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));




# 1 "/usr/include/x86_64-linux-gnu/sys/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4






typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;




typedef __loff_t loff_t;



typedef __ino_t ino_t;
# 60 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;
# 98 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __pid_t pid_t;





typedef __id_t id_t;
# 115 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;
# 132 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/time.h" 1 3 4
# 57 "/usr/include/time.h" 3 4


typedef __clock_t clock_t;



# 73 "/usr/include/time.h" 3 4


typedef __time_t time_t;



# 91 "/usr/include/time.h" 3 4
typedef __clockid_t clockid_t;
# 103 "/usr/include/time.h" 3 4
typedef __timer_t timer_t;
# 133 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 146 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h" 1 3 4
# 147 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;
# 194 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef int int8_t __attribute__ ((__mode__ (__QI__)));
typedef int int16_t __attribute__ ((__mode__ (__HI__)));
typedef int int32_t __attribute__ ((__mode__ (__SI__)));
typedef int int64_t __attribute__ ((__mode__ (__DI__)));


typedef unsigned int u_int8_t __attribute__ ((__mode__ (__QI__)));
typedef unsigned int u_int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int u_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int u_int64_t __attribute__ ((__mode__ (__DI__)));

typedef int register_t __attribute__ ((__mode__ (__word__)));
# 219 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/select.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/select.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/select.h" 2 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 3 4
typedef int __sig_atomic_t;




typedef struct
  {
    unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
  } __sigset_t;
# 34 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4



typedef __sigset_t sigset_t;





# 1 "/usr/include/time.h" 1 3 4
# 120 "/usr/include/time.h" 3 4
struct timespec
  {
    __time_t tv_sec;
    __syscall_slong_t tv_nsec;
  };
# 44 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/bits/time.h" 3 4
struct timeval
  {
    __time_t tv_sec;
    __suseconds_t tv_usec;
  };
# 46 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


typedef __suseconds_t suseconds_t;





typedef long int __fd_mask;
# 64 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef struct
  {






    __fd_mask __fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];


  } fd_set;






typedef __fd_mask fd_mask;
# 96 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4

# 106 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 118 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);





# 1 "/usr/include/x86_64-linux-gnu/bits/select2.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/select2.h" 3 4
extern long int __fdelt_chk (long int __d);
extern long int __fdelt_warn (long int __d)
  __attribute__((__warning__ ("bit outside of fd_set selected")));
# 129 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4



# 220 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3 4


__extension__
extern unsigned int gnu_dev_major (unsigned long long int __dev)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
__extension__
extern unsigned int gnu_dev_minor (unsigned long long int __dev)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
__extension__
extern unsigned long long int gnu_dev_makedev (unsigned int __major,
            unsigned int __minor)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


__extension__ extern __inline __attribute__ ((__gnu_inline__)) __attribute__ ((__const__)) unsigned int
__attribute__ ((__nothrow__ , __leaf__)) gnu_dev_major (unsigned long long int __dev)
{
  return ((__dev >> 8) & 0xfff) | ((unsigned int) (__dev >> 32) & ~0xfff);
}

__extension__ extern __inline __attribute__ ((__gnu_inline__)) __attribute__ ((__const__)) unsigned int
__attribute__ ((__nothrow__ , __leaf__)) gnu_dev_minor (unsigned long long int __dev)
{
  return (__dev & 0xff) | ((unsigned int) (__dev >> 12) & ~0xff);
}

__extension__ extern __inline __attribute__ ((__gnu_inline__)) __attribute__ ((__const__)) unsigned long long int
__attribute__ ((__nothrow__ , __leaf__)) gnu_dev_makedev (unsigned int __major, unsigned int __minor)
{
  return ((__minor & 0xff) | ((__major & 0xfff) << 8)
   | (((unsigned long long int) (__minor & ~0xff)) << 12)
   | (((unsigned long long int) (__major & ~0xfff)) << 32));
}


# 223 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 270 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 2 3 4
# 60 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
typedef unsigned long int pthread_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;





typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;
# 90 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
typedef union
{
  struct __pthread_mutex_s
  {
    int __lock;
    unsigned int __count;
    int __owner;

    unsigned int __nusers;



    int __kind;

    short __spins;
    short __elision;
    __pthread_list_t __list;
# 124 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
  } __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  struct
  {
    int __lock;
    unsigned int __futex;
    __extension__ unsigned long long int __total_seq;
    __extension__ unsigned long long int __wakeup_seq;
    __extension__ unsigned long long int __woken_seq;
    void *__mutex;
    unsigned int __nwaiters;
    unsigned int __broadcast_seq;
  } __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;





typedef union
{

  struct
  {
    int __lock;
    unsigned int __nr_readers;
    unsigned int __readers_wakeup;
    unsigned int __writer_wakeup;
    unsigned int __nr_readers_queued;
    unsigned int __nr_writers_queued;
    int __writer;
    int __shared;
    unsigned long int __pad1;
    unsigned long int __pad2;


    unsigned int __flags;

  } __data;
# 211 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 271 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



# 315 "/usr/include/stdlib.h" 2 3 4






extern long int random (void) __attribute__ ((__nothrow__ , __leaf__));


extern void srandom (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));






extern int rand (void) __attribute__ ((__nothrow__ , __leaf__));

extern void srand (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));




extern int rand_r (unsigned int *__seed) __attribute__ ((__nothrow__ , __leaf__));







extern double drand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern double erand48 (unsigned short int __xsubi[3]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern long int nrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern long int jrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) __attribute__ ((__nothrow__ , __leaf__));
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));









extern void *malloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__warn_unused_result__));

extern void *calloc (size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__warn_unused_result__));










extern void *realloc (void *__ptr, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));

extern void free (void *__ptr) __attribute__ ((__nothrow__ , __leaf__));




extern void cfree (void *__ptr) __attribute__ ((__nothrow__ , __leaf__));



# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h" 1 3 4
# 25 "/usr/include/alloca.h" 2 3 4







extern void *alloca (size_t __size) __attribute__ ((__nothrow__ , __leaf__));






# 493 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__warn_unused_result__));




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 513 "/usr/include/stdlib.h" 3 4


extern void abort (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 530 "/usr/include/stdlib.h" 3 4





extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern void exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));













extern void _Exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));






extern char *getenv (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));

# 578 "/usr/include/stdlib.h" 3 4
extern int putenv (char *__string) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) __attribute__ ((__nothrow__ , __leaf__));
# 606 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 620 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 642 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 663 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 712 "/usr/include/stdlib.h" 3 4





extern int system (const char *__command) __attribute__ ((__warn_unused_result__));

# 734 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));






typedef int (*__compar_fn_t) (const void *, const void *);
# 752 "/usr/include/stdlib.h" 3 4



extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) __attribute__ ((__warn_unused_result__));


# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-bsearch.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/stdlib-bsearch.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) void *
bsearch (const void *__key, const void *__base, size_t __nmemb, size_t __size,
  __compar_fn_t __compar)
{
  size_t __l, __u, __idx;
  const void *__p;
  int __comparison;

  __l = 0;
  __u = __nmemb;
  while (__l < __u)
    {
      __idx = (__l + __u) / 2;
      __p = (void *) (((const char *) __base) + (__idx * __size));
      __comparison = (*__compar) (__key, __p);
      if (__comparison < 0)
 __u = __idx;
      else if (__comparison > 0)
 __l = __idx + 1;
      else
 return (void *) __p;
    }

  return ((void *)0);
}
# 761 "/usr/include/stdlib.h" 2 3 4




extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));
# 775 "/usr/include/stdlib.h" 3 4
extern int abs (int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));
extern long int labs (long int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));



__extension__ extern long long int llabs (long long int __x)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));







extern div_t div (int __numer, int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));
extern ldiv_t ldiv (long int __numer, long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));




__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));

# 812 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) __attribute__ ((__warn_unused_result__));




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) __attribute__ ((__warn_unused_result__));




extern char *gcvt (double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3))) __attribute__ ((__warn_unused_result__));




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) __attribute__ ((__warn_unused_result__));
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) __attribute__ ((__warn_unused_result__));
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3))) __attribute__ ((__warn_unused_result__));




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));






extern int mblen (const char *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));


extern int wctomb (char *__s, wchar_t __wchar) __attribute__ ((__nothrow__ , __leaf__));



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__));








extern int rpmatch (const char *__response) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 899 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2, 3))) __attribute__ ((__warn_unused_result__));
# 951 "/usr/include/stdlib.h" 3 4
extern int getloadavg (double __loadavg[], int __nelem)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 3 4

extern __inline __attribute__ ((__gnu_inline__)) double
__attribute__ ((__nothrow__ , __leaf__)) atof (const char *__nptr)
{
  return strtod (__nptr, (char **) ((void *)0));
}

# 956 "/usr/include/stdlib.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/stdlib.h" 3 4
extern char *__realpath_chk (const char *__restrict __name,
        char *__restrict __resolved,
        size_t __resolvedlen) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern char *__realpath_alias (const char *__restrict __name, char *__restrict __resolved) __asm__ ("" "realpath") __attribute__ ((__nothrow__ , __leaf__))

                                                 __attribute__ ((__warn_unused_result__));
extern char *__realpath_chk_warn (const char *__restrict __name, char *__restrict __resolved, size_t __resolvedlen) __asm__ ("" "__realpath_chk") __attribute__ ((__nothrow__ , __leaf__))


                                                __attribute__ ((__warn_unused_result__))
     __attribute__((__warning__ ("second argument of realpath must be either NULL or at " "least PATH_MAX bytes long buffer")))
                                      ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) char *
__attribute__ ((__nothrow__ , __leaf__)) realpath (const char *__restrict __name, char *__restrict __resolved)
{
  if (__builtin_object_size (__resolved, 2 > 1) != (size_t) -1)
    {




      return __realpath_chk (__name, __resolved, __builtin_object_size (__resolved, 2 > 1));
    }

  return __realpath_alias (__name, __resolved);
}


extern int __ptsname_r_chk (int __fd, char *__buf, size_t __buflen,
       size_t __nreal) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));
extern int __ptsname_r_alias (int __fd, char *__buf, size_t __buflen) __asm__ ("" "ptsname_r") __attribute__ ((__nothrow__ , __leaf__))

     __attribute__ ((__nonnull__ (2)));
extern int __ptsname_r_chk_warn (int __fd, char *__buf, size_t __buflen, size_t __nreal) __asm__ ("" "__ptsname_r_chk") __attribute__ ((__nothrow__ , __leaf__))


     __attribute__ ((__nonnull__ (2))) __attribute__((__warning__ ("ptsname_r called with buflen bigger than " "size of buf")))
                   ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) ptsname_r (int __fd, char *__buf, size_t __buflen)
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__buflen))
 return __ptsname_r_chk (__fd, __buf, __buflen, __builtin_object_size (__buf, 2 > 1));
      if (__buflen > __builtin_object_size (__buf, 2 > 1))
 return __ptsname_r_chk_warn (__fd, __buf, __buflen, __builtin_object_size (__buf, 2 > 1));
    }
  return __ptsname_r_alias (__fd, __buf, __buflen);
}


extern int __wctomb_chk (char *__s, wchar_t __wchar, size_t __buflen)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern int __wctomb_alias (char *__s, wchar_t __wchar) __asm__ ("" "wctomb") __attribute__ ((__nothrow__ , __leaf__))
              __attribute__ ((__warn_unused_result__));

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) int
__attribute__ ((__nothrow__ , __leaf__)) wctomb (char *__s, wchar_t __wchar)
{







  if (__builtin_object_size (__s, 2 > 1) != (size_t) -1 && 16 > __builtin_object_size (__s, 2 > 1))
    return __wctomb_chk (__s, __wchar, __builtin_object_size (__s, 2 > 1));
  return __wctomb_alias (__s, __wchar);
}


extern size_t __mbstowcs_chk (wchar_t *__restrict __dst,
         const char *__restrict __src,
         size_t __len, size_t __dstlen) __attribute__ ((__nothrow__ , __leaf__));
extern size_t __mbstowcs_alias (wchar_t *__restrict __dst, const char *__restrict __src, size_t __len) __asm__ ("" "mbstowcs") __attribute__ ((__nothrow__ , __leaf__))


                                  ;
extern size_t __mbstowcs_chk_warn (wchar_t *__restrict __dst, const char *__restrict __src, size_t __len, size_t __dstlen) __asm__ ("" "__mbstowcs_chk") __attribute__ ((__nothrow__ , __leaf__))



     __attribute__((__warning__ ("mbstowcs called with dst buffer smaller than len " "* sizeof (wchar_t)")))
                        ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) size_t
__attribute__ ((__nothrow__ , __leaf__)) mbstowcs (wchar_t *__restrict __dst, const char *__restrict __src, size_t __len)

{
  if (__builtin_object_size (__dst, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__len))
 return __mbstowcs_chk (__dst, __src, __len,
          __builtin_object_size (__dst, 2 > 1) / sizeof (wchar_t));

      if (__len > __builtin_object_size (__dst, 2 > 1) / sizeof (wchar_t))
 return __mbstowcs_chk_warn (__dst, __src, __len,
         __builtin_object_size (__dst, 2 > 1) / sizeof (wchar_t));
    }
  return __mbstowcs_alias (__dst, __src, __len);
}


extern size_t __wcstombs_chk (char *__restrict __dst,
         const wchar_t *__restrict __src,
         size_t __len, size_t __dstlen) __attribute__ ((__nothrow__ , __leaf__));
extern size_t __wcstombs_alias (char *__restrict __dst, const wchar_t *__restrict __src, size_t __len) __asm__ ("" "wcstombs") __attribute__ ((__nothrow__ , __leaf__))


                                  ;
extern size_t __wcstombs_chk_warn (char *__restrict __dst, const wchar_t *__restrict __src, size_t __len, size_t __dstlen) __asm__ ("" "__wcstombs_chk") __attribute__ ((__nothrow__ , __leaf__))



     __attribute__((__warning__ ("wcstombs called with dst buffer smaller than len")));

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) size_t
__attribute__ ((__nothrow__ , __leaf__)) wcstombs (char *__restrict __dst, const wchar_t *__restrict __src, size_t __len)

{
  if (__builtin_object_size (__dst, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__len))
 return __wcstombs_chk (__dst, __src, __len, __builtin_object_size (__dst, 2 > 1));
      if (__len > __builtin_object_size (__dst, 2 > 1))
 return __wcstombs_chk_warn (__dst, __src, __len, __builtin_object_size (__dst, 2 > 1));
    }
  return __wcstombs_alias (__dst, __src, __len);
}
# 960 "/usr/include/stdlib.h" 2 3 4
# 968 "/usr/include/stdlib.h" 3 4

# 56 "/home/ymlusr/local/var/yml/DefaultExecutionCatalog/generators/XMP/include/yml_xmp_component_base.hh" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stdbool.h" 1 3 4
# 57 "/home/ymlusr/local/var/yml/DefaultExecutionCatalog/generators/XMP/include/yml_xmp_component_base.hh" 2
# 1 "/usr/include/string.h" 1 3 4
# 27 "/usr/include/string.h" 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h" 1 3 4
# 33 "/usr/include/string.h" 2 3 4
# 44 "/usr/include/string.h" 3 4


extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));






extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern void *memset (void *__s, int __c, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 96 "/usr/include/string.h" 3 4
extern void *memchr (const void *__s, int __c, size_t __n)
      __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


# 127 "/usr/include/string.h" 3 4


extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));






# 1 "/usr/include/xlocale.h" 1 3 4
# 27 "/usr/include/xlocale.h" 3 4
typedef struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
} *__locale_t;


typedef __locale_t locale_t;
# 164 "/usr/include/string.h" 2 3 4


extern int strcoll_l (const char *__s1, const char *__s2, __locale_t __l)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    __locale_t __l) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));





extern char *strdup (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (const char *__string, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 211 "/usr/include/string.h" 3 4

# 236 "/usr/include/string.h" 3 4
extern char *strchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 263 "/usr/include/string.h" 3 4
extern char *strrchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


# 282 "/usr/include/string.h" 3 4



extern size_t strcspn (const char *__s, const char *__reject)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 315 "/usr/include/string.h" 3 4
extern char *strpbrk (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 342 "/usr/include/string.h" 3 4
extern char *strstr (const char *__haystack, const char *__needle)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));




extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
# 397 "/usr/include/string.h" 3 4


extern size_t strlen (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern size_t strnlen (const char *__string, size_t __maxlen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern char *strerror (int __errnum) __attribute__ ((__nothrow__ , __leaf__));

# 427 "/usr/include/string.h" 3 4
extern int strerror_r (int __errnum, char *__buf, size_t __buflen) __asm__ ("" "__xpg_strerror_r") __attribute__ ((__nothrow__ , __leaf__))

                        __attribute__ ((__nonnull__ (2)));
# 445 "/usr/include/string.h" 3 4
extern char *strerror_l (int __errnum, __locale_t __l) __attribute__ ((__nothrow__ , __leaf__));





extern void __bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern void bcopy (const void *__src, void *__dest, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 489 "/usr/include/string.h" 3 4
extern char *index (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 517 "/usr/include/string.h" 3 4
extern char *rindex (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern int ffs (int __i) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 534 "/usr/include/string.h" 3 4
extern int strcasecmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 557 "/usr/include/string.h" 3 4
extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) __attribute__ ((__nothrow__ , __leaf__));


extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
# 632 "/usr/include/string.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/string.h" 1 3 4
# 633 "/usr/include/string.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/string2.h" 1 3 4
# 393 "/usr/include/x86_64-linux-gnu/bits/string2.h" 3 4
extern void *__rawmemchr (const void *__s, int __c);
# 945 "/usr/include/x86_64-linux-gnu/bits/string2.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) size_t __strcspn_c1 (const char *__s, int __reject);
extern __inline __attribute__ ((__gnu_inline__)) size_t
__strcspn_c1 (const char *__s, int __reject)
{
  size_t __result = 0;
  while (__s[__result] != '\0' && __s[__result] != __reject)
    ++__result;
  return __result;
}

extern __inline __attribute__ ((__gnu_inline__)) size_t __strcspn_c2 (const char *__s, int __reject1,
         int __reject2);
extern __inline __attribute__ ((__gnu_inline__)) size_t
__strcspn_c2 (const char *__s, int __reject1, int __reject2)
{
  size_t __result = 0;
  while (__s[__result] != '\0' && __s[__result] != __reject1
  && __s[__result] != __reject2)
    ++__result;
  return __result;
}

extern __inline __attribute__ ((__gnu_inline__)) size_t __strcspn_c3 (const char *__s, int __reject1,
         int __reject2, int __reject3);
extern __inline __attribute__ ((__gnu_inline__)) size_t
__strcspn_c3 (const char *__s, int __reject1, int __reject2,
       int __reject3)
{
  size_t __result = 0;
  while (__s[__result] != '\0' && __s[__result] != __reject1
  && __s[__result] != __reject2 && __s[__result] != __reject3)
    ++__result;
  return __result;
}
# 1021 "/usr/include/x86_64-linux-gnu/bits/string2.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) size_t __strspn_c1 (const char *__s, int __accept);
extern __inline __attribute__ ((__gnu_inline__)) size_t
__strspn_c1 (const char *__s, int __accept)
{
  size_t __result = 0;

  while (__s[__result] == __accept)
    ++__result;
  return __result;
}

extern __inline __attribute__ ((__gnu_inline__)) size_t __strspn_c2 (const char *__s, int __accept1,
        int __accept2);
extern __inline __attribute__ ((__gnu_inline__)) size_t
__strspn_c2 (const char *__s, int __accept1, int __accept2)
{
  size_t __result = 0;

  while (__s[__result] == __accept1 || __s[__result] == __accept2)
    ++__result;
  return __result;
}

extern __inline __attribute__ ((__gnu_inline__)) size_t __strspn_c3 (const char *__s, int __accept1,
        int __accept2, int __accept3);
extern __inline __attribute__ ((__gnu_inline__)) size_t
__strspn_c3 (const char *__s, int __accept1, int __accept2, int __accept3)
{
  size_t __result = 0;

  while (__s[__result] == __accept1 || __s[__result] == __accept2
  || __s[__result] == __accept3)
    ++__result;
  return __result;
}
# 1097 "/usr/include/x86_64-linux-gnu/bits/string2.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) char *__strpbrk_c2 (const char *__s, int __accept1,
        int __accept2);
extern __inline __attribute__ ((__gnu_inline__)) char *
__strpbrk_c2 (const char *__s, int __accept1, int __accept2)
{

  while (*__s != '\0' && *__s != __accept1 && *__s != __accept2)
    ++__s;
  return *__s == '\0' ? ((void *)0) : (char *) (size_t) __s;
}

extern __inline __attribute__ ((__gnu_inline__)) char *__strpbrk_c3 (const char *__s, int __accept1,
        int __accept2, int __accept3);
extern __inline __attribute__ ((__gnu_inline__)) char *
__strpbrk_c3 (const char *__s, int __accept1, int __accept2, int __accept3)
{

  while (*__s != '\0' && *__s != __accept1 && *__s != __accept2
  && *__s != __accept3)
    ++__s;
  return *__s == '\0' ? ((void *)0) : (char *) (size_t) __s;
}
# 1147 "/usr/include/x86_64-linux-gnu/bits/string2.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) char *__strtok_r_1c (char *__s, char __sep, char **__nextp);
extern __inline __attribute__ ((__gnu_inline__)) char *
__strtok_r_1c (char *__s, char __sep, char **__nextp)
{
  char *__result;
  if (__s == ((void *)0))
    __s = *__nextp;
  while (*__s == __sep)
    ++__s;
  __result = ((void *)0);
  if (*__s != '\0')
    {
      __result = __s++;
      while (*__s != '\0')
 if (*__s++ == __sep)
   {
     __s[-1] = '\0';
     break;
   }
    }
  *__nextp = __s;
  return __result;
}
# 1179 "/usr/include/x86_64-linux-gnu/bits/string2.h" 3 4
extern char *__strsep_g (char **__stringp, const char *__delim);
# 1197 "/usr/include/x86_64-linux-gnu/bits/string2.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) char *__strsep_1c (char **__s, char __reject);
extern __inline __attribute__ ((__gnu_inline__)) char *
__strsep_1c (char **__s, char __reject)
{
  char *__retval = *__s;
  if (__retval != ((void *)0) && (*__s = (__extension__ (__builtin_constant_p (__reject) && !__builtin_constant_p (__retval) && (__reject) == '\0' ? (char *) __rawmemchr (__retval, __reject) : __builtin_strchr (__retval, __reject)))) != ((void *)0))
    *(*__s)++ = '\0';
  return __retval;
}

extern __inline __attribute__ ((__gnu_inline__)) char *__strsep_2c (char **__s, char __reject1, char __reject2);
extern __inline __attribute__ ((__gnu_inline__)) char *
__strsep_2c (char **__s, char __reject1, char __reject2)
{
  char *__retval = *__s;
  if (__retval != ((void *)0))
    {
      char *__cp = __retval;
      while (1)
 {
   if (*__cp == '\0')
     {
       __cp = ((void *)0);
   break;
     }
   if (*__cp == __reject1 || *__cp == __reject2)
     {
       *__cp++ = '\0';
       break;
     }
   ++__cp;
 }
      *__s = __cp;
    }
  return __retval;
}

extern __inline __attribute__ ((__gnu_inline__)) char *__strsep_3c (char **__s, char __reject1, char __reject2,
       char __reject3);
extern __inline __attribute__ ((__gnu_inline__)) char *
__strsep_3c (char **__s, char __reject1, char __reject2, char __reject3)
{
  char *__retval = *__s;
  if (__retval != ((void *)0))
    {
      char *__cp = __retval;
      while (1)
 {
   if (*__cp == '\0')
     {
       __cp = ((void *)0);
   break;
     }
   if (*__cp == __reject1 || *__cp == __reject2 || *__cp == __reject3)
     {
       *__cp++ = '\0';
       break;
     }
   ++__cp;
 }
      *__s = __cp;
    }
  return __retval;
}
# 1278 "/usr/include/x86_64-linux-gnu/bits/string2.h" 3 4
extern char *__strdup (const char *__string) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__));
# 1297 "/usr/include/x86_64-linux-gnu/bits/string2.h" 3 4
extern char *__strndup (const char *__string, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__));
# 636 "/usr/include/string.h" 2 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/string3.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/string3.h" 3 4
extern void __warn_memset_zero_len (void) __attribute__((__warning__ ("memset used with constant zero length parameter; this could be due to transposed parameters")))
                                                                                                   ;
# 47 "/usr/include/x86_64-linux-gnu/bits/string3.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void *
__attribute__ ((__nothrow__ , __leaf__)) memcpy (void *__restrict __dest, const void *__restrict __src, size_t __len)

{
  return __builtin___memcpy_chk (__dest, __src, __len, __builtin_object_size (__dest, 0));
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void *
__attribute__ ((__nothrow__ , __leaf__)) memmove (void *__dest, const void *__src, size_t __len)
{
  return __builtin___memmove_chk (__dest, __src, __len, __builtin_object_size (__dest, 0));
}
# 75 "/usr/include/x86_64-linux-gnu/bits/string3.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void *
__attribute__ ((__nothrow__ , __leaf__)) memset (void *__dest, int __ch, size_t __len)
{
  if (__builtin_constant_p (__len) && __len == 0
      && (!__builtin_constant_p (__ch) || __ch != 0))
    {
      __warn_memset_zero_len ();
      return __dest;
    }
  return __builtin___memset_chk (__dest, __ch, __len, __builtin_object_size (__dest, 0));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void
__attribute__ ((__nothrow__ , __leaf__)) bcopy (const void *__src, void *__dest, size_t __len)
{
  (void) __builtin___memmove_chk (__dest, __src, __len, __builtin_object_size (__dest, 0));
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void
__attribute__ ((__nothrow__ , __leaf__)) bzero (void *__dest, size_t __len)
{
  (void) __builtin___memset_chk (__dest, '\0', __len, __builtin_object_size (__dest, 0));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__nothrow__ , __leaf__)) strcpy (char *__restrict __dest, const char *__restrict __src)
{
  return __builtin___strcpy_chk (__dest, __src, __builtin_object_size (__dest, 2 > 1));
}
# 116 "/usr/include/x86_64-linux-gnu/bits/string3.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__nothrow__ , __leaf__)) strncpy (char *__restrict __dest, const char *__restrict __src, size_t __len)

{
  return __builtin___strncpy_chk (__dest, __src, __len, __builtin_object_size (__dest, 2 > 1));
}


extern char *__stpncpy_chk (char *__dest, const char *__src, size_t __n,
       size_t __destlen) __attribute__ ((__nothrow__ , __leaf__));
extern char *__stpncpy_alias (char *__dest, const char *__src, size_t __n) __asm__ ("" "stpncpy") __attribute__ ((__nothrow__ , __leaf__))
                                 ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__nothrow__ , __leaf__)) stpncpy (char *__dest, const char *__src, size_t __n)
{
  if (__builtin_object_size (__dest, 2 > 1) != (size_t) -1
      && (!__builtin_constant_p (__n) || __n <= __builtin_object_size (__dest, 2 > 1)))
    return __stpncpy_chk (__dest, __src, __n, __builtin_object_size (__dest, 2 > 1));
  return __stpncpy_alias (__dest, __src, __n);
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__nothrow__ , __leaf__)) strcat (char *__restrict __dest, const char *__restrict __src)
{
  return __builtin___strcat_chk (__dest, __src, __builtin_object_size (__dest, 2 > 1));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__nothrow__ , __leaf__)) strncat (char *__restrict __dest, const char *__restrict __src, size_t __len)

{
  return __builtin___strncat_chk (__dest, __src, __len, __builtin_object_size (__dest, 2 > 1));
}
# 641 "/usr/include/string.h" 2 3 4




# 58 "/home/ymlusr/local/var/yml/DefaultExecutionCatalog/generators/XMP/include/yml_xmp_component_base.hh" 2
# 1 "/usr/include/math.h" 1 3 4
# 28 "/usr/include/math.h" 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/huge_val.h" 1 3 4
# 33 "/usr/include/math.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/huge_valf.h" 1 3 4
# 35 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/huge_vall.h" 1 3 4
# 36 "/usr/include/math.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/inf.h" 1 3 4
# 39 "/usr/include/math.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/nan.h" 1 3 4
# 42 "/usr/include/math.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/mathdef.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/mathdef.h" 3 4
typedef float float_t;
typedef double double_t;
# 46 "/usr/include/math.h" 2 3 4
# 69 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 52 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4


extern double acos (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __acos (double __x) __attribute__ ((__nothrow__ , __leaf__));

extern double asin (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __asin (double __x) __attribute__ ((__nothrow__ , __leaf__));

extern double atan (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __atan (double __x) __attribute__ ((__nothrow__ , __leaf__));

extern double atan2 (double __y, double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __atan2 (double __y, double __x) __attribute__ ((__nothrow__ , __leaf__));


extern double cos (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __cos (double __x) __attribute__ ((__nothrow__ , __leaf__));

extern double sin (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __sin (double __x) __attribute__ ((__nothrow__ , __leaf__));

extern double tan (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __tan (double __x) __attribute__ ((__nothrow__ , __leaf__));




extern double cosh (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __cosh (double __x) __attribute__ ((__nothrow__ , __leaf__));

extern double sinh (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __sinh (double __x) __attribute__ ((__nothrow__ , __leaf__));

extern double tanh (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __tanh (double __x) __attribute__ ((__nothrow__ , __leaf__));

# 86 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4


extern double acosh (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __acosh (double __x) __attribute__ ((__nothrow__ , __leaf__));

extern double asinh (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __asinh (double __x) __attribute__ ((__nothrow__ , __leaf__));

extern double atanh (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __atanh (double __x) __attribute__ ((__nothrow__ , __leaf__));







extern double exp (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __exp (double __x) __attribute__ ((__nothrow__ , __leaf__));


extern double frexp (double __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__)); extern double __frexp (double __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__));


extern double ldexp (double __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__)); extern double __ldexp (double __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__));


extern double log (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __log (double __x) __attribute__ ((__nothrow__ , __leaf__));


extern double log10 (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __log10 (double __x) __attribute__ ((__nothrow__ , __leaf__));


extern double modf (double __x, double *__iptr) __attribute__ ((__nothrow__ , __leaf__)); extern double __modf (double __x, double *__iptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

# 126 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4


extern double expm1 (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __expm1 (double __x) __attribute__ ((__nothrow__ , __leaf__));


extern double log1p (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __log1p (double __x) __attribute__ ((__nothrow__ , __leaf__));


extern double logb (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __logb (double __x) __attribute__ ((__nothrow__ , __leaf__));






extern double exp2 (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __exp2 (double __x) __attribute__ ((__nothrow__ , __leaf__));


extern double log2 (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __log2 (double __x) __attribute__ ((__nothrow__ , __leaf__));








extern double pow (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __pow (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));


extern double sqrt (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __sqrt (double __x) __attribute__ ((__nothrow__ , __leaf__));





extern double hypot (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __hypot (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));






extern double cbrt (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __cbrt (double __x) __attribute__ ((__nothrow__ , __leaf__));








extern double ceil (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __ceil (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern double fabs (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __fabs (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern double floor (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __floor (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern double fmod (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __fmod (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));




extern int __isinf (double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int __finite (double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));





extern int isinf (double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int finite (double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern double drem (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __drem (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));



extern double significand (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __significand (double __x) __attribute__ ((__nothrow__ , __leaf__));





extern double copysign (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __copysign (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));






extern double nan (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __nan (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));





extern int __isnan (double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern int isnan (double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern double j0 (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __j0 (double) __attribute__ ((__nothrow__ , __leaf__));
extern double j1 (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __j1 (double) __attribute__ ((__nothrow__ , __leaf__));
extern double jn (int, double) __attribute__ ((__nothrow__ , __leaf__)); extern double __jn (int, double) __attribute__ ((__nothrow__ , __leaf__));
extern double y0 (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __y0 (double) __attribute__ ((__nothrow__ , __leaf__));
extern double y1 (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __y1 (double) __attribute__ ((__nothrow__ , __leaf__));
extern double yn (int, double) __attribute__ ((__nothrow__ , __leaf__)); extern double __yn (int, double) __attribute__ ((__nothrow__ , __leaf__));






extern double erf (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __erf (double) __attribute__ ((__nothrow__ , __leaf__));
extern double erfc (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __erfc (double) __attribute__ ((__nothrow__ , __leaf__));
extern double lgamma (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __lgamma (double) __attribute__ ((__nothrow__ , __leaf__));






extern double tgamma (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __tgamma (double) __attribute__ ((__nothrow__ , __leaf__));





extern double gamma (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __gamma (double) __attribute__ ((__nothrow__ , __leaf__));






extern double lgamma_r (double, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__)); extern double __lgamma_r (double, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__));







extern double rint (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __rint (double __x) __attribute__ ((__nothrow__ , __leaf__));


extern double nextafter (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __nextafter (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));

extern double nexttoward (double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __nexttoward (double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern double remainder (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __remainder (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));



extern double scalbn (double __x, int __n) __attribute__ ((__nothrow__ , __leaf__)); extern double __scalbn (double __x, int __n) __attribute__ ((__nothrow__ , __leaf__));



extern int ilogb (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern int __ilogb (double __x) __attribute__ ((__nothrow__ , __leaf__));




extern double scalbln (double __x, long int __n) __attribute__ ((__nothrow__ , __leaf__)); extern double __scalbln (double __x, long int __n) __attribute__ ((__nothrow__ , __leaf__));



extern double nearbyint (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __nearbyint (double __x) __attribute__ ((__nothrow__ , __leaf__));



extern double round (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __round (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern double trunc (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __trunc (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern double remquo (double __x, double __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__)); extern double __remquo (double __x, double __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__));






extern long int lrint (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lrint (double __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llrint (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llrint (double __x) __attribute__ ((__nothrow__ , __leaf__));



extern long int lround (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lround (double __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llround (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llround (double __x) __attribute__ ((__nothrow__ , __leaf__));



extern double fdim (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __fdim (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));


extern double fmax (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __fmax (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern double fmin (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __fmin (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern int __fpclassify (double __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int __signbit (double __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));



extern double fma (double __x, double __y, double __z) __attribute__ ((__nothrow__ , __leaf__)); extern double __fma (double __x, double __y, double __z) __attribute__ ((__nothrow__ , __leaf__));




# 371 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern double scalb (double __x, double __n) __attribute__ ((__nothrow__ , __leaf__)); extern double __scalb (double __x, double __n) __attribute__ ((__nothrow__ , __leaf__));
# 70 "/usr/include/math.h" 2 3 4
# 88 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 52 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4


extern float acosf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __acosf (float __x) __attribute__ ((__nothrow__ , __leaf__));

extern float asinf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __asinf (float __x) __attribute__ ((__nothrow__ , __leaf__));

extern float atanf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __atanf (float __x) __attribute__ ((__nothrow__ , __leaf__));

extern float atan2f (float __y, float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __atan2f (float __y, float __x) __attribute__ ((__nothrow__ , __leaf__));


extern float cosf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __cosf (float __x) __attribute__ ((__nothrow__ , __leaf__));

extern float sinf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __sinf (float __x) __attribute__ ((__nothrow__ , __leaf__));

extern float tanf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __tanf (float __x) __attribute__ ((__nothrow__ , __leaf__));




extern float coshf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __coshf (float __x) __attribute__ ((__nothrow__ , __leaf__));

extern float sinhf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __sinhf (float __x) __attribute__ ((__nothrow__ , __leaf__));

extern float tanhf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __tanhf (float __x) __attribute__ ((__nothrow__ , __leaf__));

# 86 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4


extern float acoshf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __acoshf (float __x) __attribute__ ((__nothrow__ , __leaf__));

extern float asinhf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __asinhf (float __x) __attribute__ ((__nothrow__ , __leaf__));

extern float atanhf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __atanhf (float __x) __attribute__ ((__nothrow__ , __leaf__));







extern float expf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __expf (float __x) __attribute__ ((__nothrow__ , __leaf__));


extern float frexpf (float __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__)); extern float __frexpf (float __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__));


extern float ldexpf (float __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__)); extern float __ldexpf (float __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__));


extern float logf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __logf (float __x) __attribute__ ((__nothrow__ , __leaf__));


extern float log10f (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __log10f (float __x) __attribute__ ((__nothrow__ , __leaf__));


extern float modff (float __x, float *__iptr) __attribute__ ((__nothrow__ , __leaf__)); extern float __modff (float __x, float *__iptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

# 126 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4


extern float expm1f (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __expm1f (float __x) __attribute__ ((__nothrow__ , __leaf__));


extern float log1pf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __log1pf (float __x) __attribute__ ((__nothrow__ , __leaf__));


extern float logbf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __logbf (float __x) __attribute__ ((__nothrow__ , __leaf__));






extern float exp2f (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __exp2f (float __x) __attribute__ ((__nothrow__ , __leaf__));


extern float log2f (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __log2f (float __x) __attribute__ ((__nothrow__ , __leaf__));








extern float powf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __powf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));


extern float sqrtf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __sqrtf (float __x) __attribute__ ((__nothrow__ , __leaf__));





extern float hypotf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __hypotf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));






extern float cbrtf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __cbrtf (float __x) __attribute__ ((__nothrow__ , __leaf__));








extern float ceilf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __ceilf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern float fabsf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __fabsf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern float floorf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __floorf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern float fmodf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __fmodf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));




extern int __isinff (float __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int __finitef (float __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));





extern int isinff (float __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int finitef (float __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern float dremf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __dremf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));



extern float significandf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __significandf (float __x) __attribute__ ((__nothrow__ , __leaf__));





extern float copysignf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __copysignf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));






extern float nanf (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __nanf (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));





extern int __isnanf (float __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern int isnanf (float __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern float j0f (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __j0f (float) __attribute__ ((__nothrow__ , __leaf__));
extern float j1f (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __j1f (float) __attribute__ ((__nothrow__ , __leaf__));
extern float jnf (int, float) __attribute__ ((__nothrow__ , __leaf__)); extern float __jnf (int, float) __attribute__ ((__nothrow__ , __leaf__));
extern float y0f (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __y0f (float) __attribute__ ((__nothrow__ , __leaf__));
extern float y1f (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __y1f (float) __attribute__ ((__nothrow__ , __leaf__));
extern float ynf (int, float) __attribute__ ((__nothrow__ , __leaf__)); extern float __ynf (int, float) __attribute__ ((__nothrow__ , __leaf__));






extern float erff (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __erff (float) __attribute__ ((__nothrow__ , __leaf__));
extern float erfcf (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __erfcf (float) __attribute__ ((__nothrow__ , __leaf__));
extern float lgammaf (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __lgammaf (float) __attribute__ ((__nothrow__ , __leaf__));






extern float tgammaf (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __tgammaf (float) __attribute__ ((__nothrow__ , __leaf__));





extern float gammaf (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __gammaf (float) __attribute__ ((__nothrow__ , __leaf__));






extern float lgammaf_r (float, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__)); extern float __lgammaf_r (float, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__));







extern float rintf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __rintf (float __x) __attribute__ ((__nothrow__ , __leaf__));


extern float nextafterf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __nextafterf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));

extern float nexttowardf (float __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __nexttowardf (float __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern float remainderf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __remainderf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));



extern float scalbnf (float __x, int __n) __attribute__ ((__nothrow__ , __leaf__)); extern float __scalbnf (float __x, int __n) __attribute__ ((__nothrow__ , __leaf__));



extern int ilogbf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern int __ilogbf (float __x) __attribute__ ((__nothrow__ , __leaf__));




extern float scalblnf (float __x, long int __n) __attribute__ ((__nothrow__ , __leaf__)); extern float __scalblnf (float __x, long int __n) __attribute__ ((__nothrow__ , __leaf__));



extern float nearbyintf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __nearbyintf (float __x) __attribute__ ((__nothrow__ , __leaf__));



extern float roundf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __roundf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern float truncf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __truncf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern float remquof (float __x, float __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__)); extern float __remquof (float __x, float __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__));






extern long int lrintf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lrintf (float __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llrintf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llrintf (float __x) __attribute__ ((__nothrow__ , __leaf__));



extern long int lroundf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lroundf (float __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llroundf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llroundf (float __x) __attribute__ ((__nothrow__ , __leaf__));



extern float fdimf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __fdimf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));


extern float fmaxf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __fmaxf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern float fminf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __fminf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern int __fpclassifyf (float __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int __signbitf (float __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));



extern float fmaf (float __x, float __y, float __z) __attribute__ ((__nothrow__ , __leaf__)); extern float __fmaf (float __x, float __y, float __z) __attribute__ ((__nothrow__ , __leaf__));




# 371 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern float scalbf (float __x, float __n) __attribute__ ((__nothrow__ , __leaf__)); extern float __scalbf (float __x, float __n) __attribute__ ((__nothrow__ , __leaf__));
# 89 "/usr/include/math.h" 2 3 4
# 132 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 52 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4


extern long double acosl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __acosl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

extern long double asinl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __asinl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

extern long double atanl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __atanl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

extern long double atan2l (long double __y, long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __atan2l (long double __y, long double __x) __attribute__ ((__nothrow__ , __leaf__));


extern long double cosl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __cosl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

extern long double sinl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __sinl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

extern long double tanl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __tanl (long double __x) __attribute__ ((__nothrow__ , __leaf__));




extern long double coshl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __coshl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

extern long double sinhl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __sinhl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

extern long double tanhl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __tanhl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

# 86 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4


extern long double acoshl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __acoshl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

extern long double asinhl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __asinhl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

extern long double atanhl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __atanhl (long double __x) __attribute__ ((__nothrow__ , __leaf__));







extern long double expl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __expl (long double __x) __attribute__ ((__nothrow__ , __leaf__));


extern long double frexpl (long double __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__)); extern long double __frexpl (long double __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__));


extern long double ldexpl (long double __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__)); extern long double __ldexpl (long double __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__));


extern long double logl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __logl (long double __x) __attribute__ ((__nothrow__ , __leaf__));


extern long double log10l (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __log10l (long double __x) __attribute__ ((__nothrow__ , __leaf__));


extern long double modfl (long double __x, long double *__iptr) __attribute__ ((__nothrow__ , __leaf__)); extern long double __modfl (long double __x, long double *__iptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

# 126 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4


extern long double expm1l (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __expm1l (long double __x) __attribute__ ((__nothrow__ , __leaf__));


extern long double log1pl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __log1pl (long double __x) __attribute__ ((__nothrow__ , __leaf__));


extern long double logbl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __logbl (long double __x) __attribute__ ((__nothrow__ , __leaf__));






extern long double exp2l (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __exp2l (long double __x) __attribute__ ((__nothrow__ , __leaf__));


extern long double log2l (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __log2l (long double __x) __attribute__ ((__nothrow__ , __leaf__));








extern long double powl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __powl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));


extern long double sqrtl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __sqrtl (long double __x) __attribute__ ((__nothrow__ , __leaf__));





extern long double hypotl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __hypotl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));






extern long double cbrtl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __cbrtl (long double __x) __attribute__ ((__nothrow__ , __leaf__));








extern long double ceill (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __ceill (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern long double fabsl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __fabsl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern long double floorl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __floorl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern long double fmodl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __fmodl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));




extern int __isinfl (long double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int __finitel (long double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));





extern int isinfl (long double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int finitel (long double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern long double dreml (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __dreml (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));



extern long double significandl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __significandl (long double __x) __attribute__ ((__nothrow__ , __leaf__));





extern long double copysignl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __copysignl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));






extern long double nanl (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __nanl (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));





extern int __isnanl (long double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern int isnanl (long double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern long double j0l (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __j0l (long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double j1l (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __j1l (long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double jnl (int, long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __jnl (int, long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double y0l (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __y0l (long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double y1l (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __y1l (long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double ynl (int, long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __ynl (int, long double) __attribute__ ((__nothrow__ , __leaf__));






extern long double erfl (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __erfl (long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double erfcl (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __erfcl (long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double lgammal (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __lgammal (long double) __attribute__ ((__nothrow__ , __leaf__));






extern long double tgammal (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __tgammal (long double) __attribute__ ((__nothrow__ , __leaf__));





extern long double gammal (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __gammal (long double) __attribute__ ((__nothrow__ , __leaf__));






extern long double lgammal_r (long double, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__)); extern long double __lgammal_r (long double, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__));







extern long double rintl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __rintl (long double __x) __attribute__ ((__nothrow__ , __leaf__));


extern long double nextafterl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __nextafterl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));

extern long double nexttowardl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __nexttowardl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern long double remainderl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __remainderl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));



extern long double scalbnl (long double __x, int __n) __attribute__ ((__nothrow__ , __leaf__)); extern long double __scalbnl (long double __x, int __n) __attribute__ ((__nothrow__ , __leaf__));



extern int ilogbl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern int __ilogbl (long double __x) __attribute__ ((__nothrow__ , __leaf__));




extern long double scalblnl (long double __x, long int __n) __attribute__ ((__nothrow__ , __leaf__)); extern long double __scalblnl (long double __x, long int __n) __attribute__ ((__nothrow__ , __leaf__));



extern long double nearbyintl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __nearbyintl (long double __x) __attribute__ ((__nothrow__ , __leaf__));



extern long double roundl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __roundl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern long double truncl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __truncl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern long double remquol (long double __x, long double __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__)); extern long double __remquol (long double __x, long double __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__));






extern long int lrintl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lrintl (long double __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llrintl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llrintl (long double __x) __attribute__ ((__nothrow__ , __leaf__));



extern long int lroundl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lroundl (long double __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llroundl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llroundl (long double __x) __attribute__ ((__nothrow__ , __leaf__));



extern long double fdiml (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __fdiml (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));


extern long double fmaxl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __fmaxl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern long double fminl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __fminl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern int __fpclassifyl (long double __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int __signbitl (long double __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));



extern long double fmal (long double __x, long double __y, long double __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double __fmal (long double __x, long double __y, long double __z) __attribute__ ((__nothrow__ , __leaf__));




# 371 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern long double scalbl (long double __x, long double __n) __attribute__ ((__nothrow__ , __leaf__)); extern long double __scalbl (long double __x, long double __n) __attribute__ ((__nothrow__ , __leaf__));
# 133 "/usr/include/math.h" 2 3 4
# 148 "/usr/include/math.h" 3 4
extern int signgam;
# 189 "/usr/include/math.h" 3 4
enum
  {
    FP_NAN =

      0,
    FP_INFINITE =

      1,
    FP_ZERO =

      2,
    FP_SUBNORMAL =

      3,
    FP_NORMAL =

      4
  };
# 301 "/usr/include/math.h" 3 4
typedef enum
{
  _IEEE_ = -1,
  _SVID_,
  _XOPEN_,
  _POSIX_,
  _ISOC_
} _LIB_VERSION_TYPE;




extern _LIB_VERSION_TYPE _LIB_VERSION;
# 326 "/usr/include/math.h" 3 4
struct exception

  {
    int type;
    char *name;
    double arg1;
    double arg2;
    double retval;
  };




extern int matherr (struct exception *__exc);
# 426 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathinline.h" 1 3 4
# 123 "/usr/include/x86_64-linux-gnu/bits/mathinline.h" 3 4



extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) int
__attribute__ ((__nothrow__ , __leaf__)) __signbitf (float __x)
{

  int __m;
  __asm ("pmovmskb %1, %0" : "=r" (__m) : "x" (__x));
  return (__m & 0x8) != 0;




}
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) int
__attribute__ ((__nothrow__ , __leaf__)) __signbit (double __x)
{

  int __m;
  __asm ("pmovmskb %1, %0" : "=r" (__m) : "x" (__x));
  return (__m & 0x80) != 0;




}
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) int
__attribute__ ((__nothrow__ , __leaf__)) __signbitl (long double __x)
{
  __extension__ union { long double __l; int __i[3]; } __u = { __l: __x };
  return (__u.__i[2] & 0x8000) != 0;
}


# 427 "/usr/include/math.h" 2 3 4
# 488 "/usr/include/math.h" 3 4

# 59 "/home/ymlusr/local/var/yml/DefaultExecutionCatalog/generators/XMP/include/yml_xmp_component_base.hh" 2
# 1 "/usr/lib/openmpi/include/mpi.h" 1
# 220 "/usr/lib/openmpi/include/mpi.h"
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h" 1 3 4
# 147 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h" 3 4
typedef long int ptrdiff_t;
# 221 "/usr/lib/openmpi/include/mpi.h" 2
# 253 "/usr/lib/openmpi/include/mpi.h"
# 1 "/usr/lib/openmpi/include/mpi_portable_platform.h" 1
# 254 "/usr/lib/openmpi/include/mpi.h" 2
# 317 "/usr/lib/openmpi/include/mpi.h"
typedef ptrdiff_t MPI_Aint;
typedef long long MPI_Offset;
typedef struct ompi_communicator_t *MPI_Comm;
typedef struct ompi_datatype_t *MPI_Datatype;
typedef struct ompi_errhandler_t *MPI_Errhandler;

typedef struct ompi_file_t *MPI_File;

typedef struct ompi_group_t *MPI_Group;
typedef struct ompi_info_t *MPI_Info;
typedef struct ompi_op_t *MPI_Op;
typedef struct ompi_request_t *MPI_Request;
typedef struct ompi_status_public_t MPI_Status;
typedef struct ompi_win_t *MPI_Win;




struct ompi_status_public_t {


    int MPI_SOURCE;
    int MPI_TAG;
    int MPI_ERROR;




    int _cancelled;
    size_t _ucount;
};
typedef struct ompi_status_public_t ompi_status_public_t;
# 358 "/usr/lib/openmpi/include/mpi.h"
typedef int (MPI_Copy_function)(MPI_Comm, int, void *,
                                void *, void *, int *);
typedef int (MPI_Delete_function)(MPI_Comm, int, void *, void *);
typedef int (MPI_Datarep_extent_function)(MPI_Datatype, MPI_Aint *, void *);
typedef int (MPI_Datarep_conversion_function)(void *, MPI_Datatype,
                                              int, void *, MPI_Offset, void *);
typedef void (MPI_Comm_errhandler_function)(MPI_Comm *, int *, ...);
typedef MPI_Comm_errhandler_function MPI_Comm_errhandler_fn
        ;






typedef void (ompi_file_errhandler_fn)(MPI_File *, int *, ...);
typedef ompi_file_errhandler_fn MPI_File_errhandler_fn
        ;
typedef ompi_file_errhandler_fn MPI_File_errhandler_function;




typedef void (MPI_Win_errhandler_function)(MPI_Win *, int *, ...);
typedef MPI_Win_errhandler_function MPI_Win_errhandler_fn
        ;



typedef void (MPI_Handler_function)(MPI_Comm *, int *, ...);
typedef void (MPI_User_function)(void *, void *, int *, MPI_Datatype *);
typedef int (MPI_Comm_copy_attr_function)(MPI_Comm, int, void *,
                                            void *, void *, int *);
typedef int (MPI_Comm_delete_attr_function)(MPI_Comm, int, void *, void *);
typedef int (MPI_Type_copy_attr_function)(MPI_Datatype, int, void *,
                                            void *, void *, int *);
typedef int (MPI_Type_delete_attr_function)(MPI_Datatype, int,
                                              void *, void *);
typedef int (MPI_Win_copy_attr_function)(MPI_Win, int, void *,
                                           void *, void *, int *);
typedef int (MPI_Win_delete_attr_function)(MPI_Win, int, void *, void *);
typedef int (MPI_Grequest_query_function)(void *, MPI_Status *);
typedef int (MPI_Grequest_free_function)(void *);
typedef int (MPI_Grequest_cancel_function)(void *, int);
# 484 "/usr/lib/openmpi/include/mpi.h"
enum {

    MPI_TAG_UB,
    MPI_HOST,
    MPI_IO,
    MPI_WTIME_IS_GLOBAL,


    MPI_APPNUM,
    MPI_LASTUSEDCODE,
    MPI_UNIVERSE_SIZE,
    MPI_WIN_BASE,
    MPI_WIN_SIZE,
    MPI_WIN_DISP_UNIT,



    IMPI_CLIENT_SIZE,
    IMPI_CLIENT_COLOR,
    IMPI_HOST_SIZE,
    IMPI_HOST_COLOR
};
# 575 "/usr/lib/openmpi/include/mpi.h"
enum {
  MPI_IDENT,
  MPI_CONGRUENT,
  MPI_SIMILAR,
  MPI_UNEQUAL
};





enum {
  MPI_THREAD_SINGLE,
  MPI_THREAD_FUNNELED,
  MPI_THREAD_SERIALIZED,
  MPI_THREAD_MULTIPLE
};





enum {
  MPI_COMBINER_NAMED,
  MPI_COMBINER_DUP,
  MPI_COMBINER_CONTIGUOUS,
  MPI_COMBINER_VECTOR,
  MPI_COMBINER_HVECTOR_INTEGER,
  MPI_COMBINER_HVECTOR,
  MPI_COMBINER_INDEXED,
  MPI_COMBINER_HINDEXED_INTEGER,
  MPI_COMBINER_HINDEXED,
  MPI_COMBINER_INDEXED_BLOCK,
  MPI_COMBINER_STRUCT_INTEGER,
  MPI_COMBINER_STRUCT,
  MPI_COMBINER_SUBARRAY,
  MPI_COMBINER_DARRAY,
  MPI_COMBINER_F90_REAL,
  MPI_COMBINER_F90_COMPLEX,
  MPI_COMBINER_F90_INTEGER,
  MPI_COMBINER_RESIZED
};
# 678 "/usr/lib/openmpi/include/mpi.h"
__attribute__((visibility("default"))) int OMPI_C_MPI_TYPE_NULL_DELETE_FN( MPI_Datatype datatype,
                                                  int type_keyval,
                                                  void* attribute_val_out,
                                                  void* extra_state );
__attribute__((visibility("default"))) int OMPI_C_MPI_TYPE_NULL_COPY_FN( MPI_Datatype datatype,
                                                int type_keyval,
                                                void* extra_state,
                                                void* attribute_val_in,
                                                void* attribute_val_out,
                                                int* flag );
__attribute__((visibility("default"))) int OMPI_C_MPI_TYPE_DUP_FN( MPI_Datatype datatype,
                                          int type_keyval,
                                          void* extra_state,
                                          void* attribute_val_in,
                                          void* attribute_val_out,
                                          int* flag );
__attribute__((visibility("default"))) int OMPI_C_MPI_COMM_NULL_DELETE_FN( MPI_Comm comm,
                                                  int comm_keyval,
                                                  void* attribute_val_out,
                                                  void* extra_state );
__attribute__((visibility("default"))) int OMPI_C_MPI_COMM_NULL_COPY_FN( MPI_Comm comm,
                                                int comm_keyval,
                                                void* extra_state,
                                                void* attribute_val_in,
                                                void* attribute_val_out,
                                                int* flag );
__attribute__((visibility("default"))) int OMPI_C_MPI_COMM_DUP_FN( MPI_Comm comm, int comm_keyval,
                                          void* extra_state,
                                          void* attribute_val_in,
                                          void* attribute_val_out,
                                          int* flag );
__attribute__((visibility("default"))) int OMPI_C_MPI_NULL_DELETE_FN( MPI_Comm comm, int comm_keyval,
                                             void* attribute_val_out,
                                             void* extra_state )
                                             ;
__attribute__((visibility("default"))) int OMPI_C_MPI_NULL_COPY_FN( MPI_Comm comm, int comm_keyval,
                                           void* extra_state,
                                           void* attribute_val_in,
                                           void* attribute_val_out,
                                           int* flag )
                                           ;
__attribute__((visibility("default"))) int OMPI_C_MPI_DUP_FN( MPI_Comm comm, int comm_keyval,
                                     void* extra_state,
                                     void* attribute_val_in,
                                     void* attribute_val_out,
                                     int* flag )
                                     ;
__attribute__((visibility("default"))) int OMPI_C_MPI_WIN_NULL_DELETE_FN( MPI_Win window,
                                                 int win_keyval,
                                                 void* attribute_val_out,
                                                 void* extra_state );
__attribute__((visibility("default"))) int OMPI_C_MPI_WIN_NULL_COPY_FN( MPI_Win window, int win_keyval,
                                               void* extra_state,
                                               void* attribute_val_in,
                                               void* attribute_val_out,
                                               int* flag );
__attribute__((visibility("default"))) int OMPI_C_MPI_WIN_DUP_FN( MPI_Win window, int win_keyval,
                                         void* extra_state,
                                         void* attribute_val_in,
                                         void* attribute_val_out,
                                         int* flag );
# 748 "/usr/lib/openmpi/include/mpi.h"
__attribute__((visibility("default"))) extern struct ompi_predefined_communicator_t ompi_mpi_comm_world;
__attribute__((visibility("default"))) extern struct ompi_predefined_communicator_t ompi_mpi_comm_self;
__attribute__((visibility("default"))) extern struct ompi_predefined_communicator_t ompi_mpi_comm_null;

__attribute__((visibility("default"))) extern struct ompi_predefined_group_t ompi_mpi_group_empty;
__attribute__((visibility("default"))) extern struct ompi_predefined_group_t ompi_mpi_group_null;

__attribute__((visibility("default"))) extern struct ompi_predefined_request_t ompi_request_null;

__attribute__((visibility("default"))) extern struct ompi_predefined_op_t ompi_mpi_op_null;
__attribute__((visibility("default"))) extern struct ompi_predefined_op_t ompi_mpi_op_min;
__attribute__((visibility("default"))) extern struct ompi_predefined_op_t ompi_mpi_op_max;
__attribute__((visibility("default"))) extern struct ompi_predefined_op_t ompi_mpi_op_sum;
__attribute__((visibility("default"))) extern struct ompi_predefined_op_t ompi_mpi_op_prod;
__attribute__((visibility("default"))) extern struct ompi_predefined_op_t ompi_mpi_op_land;
__attribute__((visibility("default"))) extern struct ompi_predefined_op_t ompi_mpi_op_band;
__attribute__((visibility("default"))) extern struct ompi_predefined_op_t ompi_mpi_op_lor;
__attribute__((visibility("default"))) extern struct ompi_predefined_op_t ompi_mpi_op_bor;
__attribute__((visibility("default"))) extern struct ompi_predefined_op_t ompi_mpi_op_lxor;
__attribute__((visibility("default"))) extern struct ompi_predefined_op_t ompi_mpi_op_bxor;
__attribute__((visibility("default"))) extern struct ompi_predefined_op_t ompi_mpi_op_maxloc;
__attribute__((visibility("default"))) extern struct ompi_predefined_op_t ompi_mpi_op_minloc;
__attribute__((visibility("default"))) extern struct ompi_predefined_op_t ompi_mpi_op_replace;


__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_datatype_null;

__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_lb ;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_ub ;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_char;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_signed_char;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_unsigned_char;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_byte;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_short;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_unsigned_short;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_int;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_unsigned;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_long;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_unsigned_long;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_long_long_int;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_unsigned_long_long;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_float;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_double;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_long_double;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_wchar;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_packed;




__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_cxx_bool;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_cxx_cplex;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_cxx_dblcplex;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_cxx_ldblcplex;




__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_logical;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_character;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_integer;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_real;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_dblprec;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_cplex;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_dblcplex;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_ldblcplex;


__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_2int;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_2integer;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_2real;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_2dblprec;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_2cplex;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_2dblcplex;

__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_float_int;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_double_int;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_longdbl_int;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_short_int;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_long_int;


__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_logical1;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_logical2;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_logical4;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_logical8;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_integer1;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_integer2;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_integer4;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_integer8;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_integer16;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_real2;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_real4;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_real8;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_real16;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_complex8;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_complex16;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_complex32;


__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_int8_t;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_uint8_t;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_int16_t;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_uint16_t;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_int32_t;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_uint32_t;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_int64_t;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_uint64_t;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_aint;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_offset;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_c_bool;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_c_complex;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_c_float_complex;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_c_double_complex;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_c_long_double_complex;

__attribute__((visibility("default"))) extern struct ompi_predefined_errhandler_t ompi_mpi_errhandler_null;
__attribute__((visibility("default"))) extern struct ompi_predefined_errhandler_t ompi_mpi_errors_are_fatal;
__attribute__((visibility("default"))) extern struct ompi_predefined_errhandler_t ompi_mpi_errors_return;

__attribute__((visibility("default"))) extern struct ompi_predefined_win_t ompi_mpi_win_null;
__attribute__((visibility("default"))) extern struct ompi_predefined_file_t ompi_mpi_file_null;

__attribute__((visibility("default"))) extern struct ompi_predefined_info_t ompi_mpi_info_null;

__attribute__((visibility("default"))) extern int *MPI_F_STATUS_IGNORE;
__attribute__((visibility("default"))) extern int *MPI_F_STATUSES_IGNORE;
# 1024 "/usr/lib/openmpi/include/mpi.h"
__attribute__((visibility("default"))) int MPI_Abort(MPI_Comm comm, int errorcode);
__attribute__((visibility("default"))) int MPI_Accumulate(void *origin_addr, int origin_count, MPI_Datatype origin_datatype,
                                  int target_rank, MPI_Aint target_disp, int target_count,
                                  MPI_Datatype target_datatype, MPI_Op op, MPI_Win win);
__attribute__((visibility("default"))) int MPI_Add_error_class(int *errorclass);
__attribute__((visibility("default"))) int MPI_Add_error_code(int errorclass, int *errorcode);
__attribute__((visibility("default"))) int MPI_Add_error_string(int errorcode, char *string);
__attribute__((visibility("default"))) int MPI_Address(void *location, MPI_Aint *address)
                               ;
__attribute__((visibility("default"))) int MPI_Allgather(void *sendbuf, int sendcount, MPI_Datatype sendtype,
                                 void *recvbuf, int recvcount,
                                 MPI_Datatype recvtype, MPI_Comm comm);
__attribute__((visibility("default"))) int MPI_Allgatherv(void *sendbuf, int sendcount, MPI_Datatype sendtype,
                                  void *recvbuf, int *recvcounts,
                                  int *displs, MPI_Datatype recvtype, MPI_Comm comm);
__attribute__((visibility("default"))) int MPI_Alloc_mem(MPI_Aint size, MPI_Info info,
                                 void *baseptr);
__attribute__((visibility("default"))) int MPI_Allreduce(void *sendbuf, void *recvbuf, int count,
                                 MPI_Datatype datatype, MPI_Op op, MPI_Comm comm);
__attribute__((visibility("default"))) int MPI_Alltoall(void *sendbuf, int sendcount, MPI_Datatype sendtype,
                                void *recvbuf, int recvcount,
                                MPI_Datatype recvtype, MPI_Comm comm);
__attribute__((visibility("default"))) int MPI_Alltoallv(void *sendbuf, int *sendcounts, int *sdispls,
                                 MPI_Datatype sendtype, void *recvbuf, int *recvcounts,
                                 int *rdispls, MPI_Datatype recvtype, MPI_Comm comm);
__attribute__((visibility("default"))) int MPI_Alltoallw(void *sendbuf, int *sendcounts, int *sdispls, MPI_Datatype *sendtypes,
                                 void *recvbuf, int *recvcounts, int *rdispls, MPI_Datatype *recvtypes,
                                 MPI_Comm comm);
__attribute__((visibility("default"))) int MPI_Attr_delete(MPI_Comm comm, int keyval)
                                   ;
__attribute__((visibility("default"))) int MPI_Attr_get(MPI_Comm comm, int keyval, void *attribute_val, int *flag)
                                ;
__attribute__((visibility("default"))) int MPI_Attr_put(MPI_Comm comm, int keyval, void *attribute_val)
                                ;
__attribute__((visibility("default"))) int MPI_Barrier(MPI_Comm comm);
__attribute__((visibility("default"))) int MPI_Bcast(void *buffer, int count, MPI_Datatype datatype,
                             int root, MPI_Comm comm);
__attribute__((visibility("default"))) int MPI_Bsend(void *buf, int count, MPI_Datatype datatype,
                             int dest, int tag, MPI_Comm comm);
__attribute__((visibility("default"))) int MPI_Bsend_init(void *buf, int count, MPI_Datatype datatype,
                                  int dest, int tag, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default"))) int MPI_Buffer_attach(void *buffer, int size);
__attribute__((visibility("default"))) int MPI_Buffer_detach(void *buffer, int *size);
__attribute__((visibility("default"))) int MPI_Cancel(MPI_Request *request);
__attribute__((visibility("default"))) int MPI_Cart_coords(MPI_Comm comm, int rank, int maxdims, int *coords);
__attribute__((visibility("default"))) int MPI_Cart_create(MPI_Comm old_comm, int ndims, int *dims,
                                   int *periods, int reorder, MPI_Comm *comm_cart);
__attribute__((visibility("default"))) int MPI_Cart_get(MPI_Comm comm, int maxdims, int *dims,
                                int *periods, int *coords);
__attribute__((visibility("default"))) int MPI_Cart_map(MPI_Comm comm, int ndims, int *dims,
                                int *periods, int *newrank);
__attribute__((visibility("default"))) int MPI_Cart_rank(MPI_Comm comm, int *coords, int *rank);
__attribute__((visibility("default"))) int MPI_Cart_shift(MPI_Comm comm, int direction, int disp,
                                  int *rank_source, int *rank_dest);
__attribute__((visibility("default"))) int MPI_Cart_sub(MPI_Comm comm, int *remain_dims, MPI_Comm *new_comm);
__attribute__((visibility("default"))) int MPI_Cartdim_get(MPI_Comm comm, int *ndims);
__attribute__((visibility("default"))) int MPI_Close_port(char *port_name);
__attribute__((visibility("default"))) int MPI_Comm_accept(char *port_name, MPI_Info info, int root,
                                   MPI_Comm comm, MPI_Comm *newcomm);
__attribute__((visibility("default"))) int MPI_Comm_c2f(MPI_Comm comm);
__attribute__((visibility("default"))) int MPI_Comm_call_errhandler(MPI_Comm comm, int errorcode);
__attribute__((visibility("default"))) int MPI_Comm_compare(MPI_Comm comm1, MPI_Comm comm2, int *result);
__attribute__((visibility("default"))) int MPI_Comm_connect(char *port_name, MPI_Info info, int root,
                                    MPI_Comm comm, MPI_Comm *newcomm);
__attribute__((visibility("default"))) int MPI_Comm_create_errhandler(MPI_Comm_errhandler_function *function,
                                              MPI_Errhandler *errhandler);
__attribute__((visibility("default"))) int MPI_Comm_create_keyval(MPI_Comm_copy_attr_function *comm_copy_attr_fn,
                                          MPI_Comm_delete_attr_function *comm_delete_attr_fn,
                                          int *comm_keyval, void *extra_state);
__attribute__((visibility("default"))) int MPI_Comm_create(MPI_Comm comm, MPI_Group group, MPI_Comm *newcomm);
__attribute__((visibility("default"))) int MPI_Comm_delete_attr(MPI_Comm comm, int comm_keyval);
__attribute__((visibility("default"))) int MPI_Comm_disconnect(MPI_Comm *comm);
__attribute__((visibility("default"))) int MPI_Comm_dup(MPI_Comm comm, MPI_Comm *newcomm);
__attribute__((visibility("default"))) MPI_Comm MPI_Comm_f2c(int comm);
__attribute__((visibility("default"))) int MPI_Comm_free_keyval(int *comm_keyval);
__attribute__((visibility("default"))) int MPI_Comm_free(MPI_Comm *comm);
__attribute__((visibility("default"))) int MPI_Comm_get_attr(MPI_Comm comm, int comm_keyval,
                                     void *attribute_val, int *flag);
__attribute__((visibility("default"))) int MPI_Comm_get_errhandler(MPI_Comm comm, MPI_Errhandler *erhandler);
__attribute__((visibility("default"))) int MPI_Comm_get_name(MPI_Comm comm, char *comm_name, int *resultlen);
__attribute__((visibility("default"))) int MPI_Comm_get_parent(MPI_Comm *parent);
__attribute__((visibility("default"))) int MPI_Comm_group(MPI_Comm comm, MPI_Group *group);
__attribute__((visibility("default"))) int MPI_Comm_join(int fd, MPI_Comm *intercomm);
__attribute__((visibility("default"))) int MPI_Comm_rank(MPI_Comm comm, int *rank);
__attribute__((visibility("default"))) int MPI_Comm_remote_group(MPI_Comm comm, MPI_Group *group);
__attribute__((visibility("default"))) int MPI_Comm_remote_size(MPI_Comm comm, int *size);
__attribute__((visibility("default"))) int MPI_Comm_set_attr(MPI_Comm comm, int comm_keyval, void *attribute_val);
__attribute__((visibility("default"))) int MPI_Comm_set_errhandler(MPI_Comm comm, MPI_Errhandler errhandler);
__attribute__((visibility("default"))) int MPI_Comm_set_name(MPI_Comm comm, char *comm_name);
__attribute__((visibility("default"))) int MPI_Comm_size(MPI_Comm comm, int *size);
__attribute__((visibility("default"))) int MPI_Comm_spawn(char *command, char **argv, int maxprocs, MPI_Info info,
                                  int root, MPI_Comm comm, MPI_Comm *intercomm,
                                  int *array_of_errcodes);
__attribute__((visibility("default"))) int MPI_Comm_spawn_multiple(int count, char **array_of_commands, char ***array_of_argv,
                                           int *array_of_maxprocs, MPI_Info *array_of_info,
                                           int root, MPI_Comm comm, MPI_Comm *intercomm,
                                           int *array_of_errcodes);
__attribute__((visibility("default"))) int MPI_Comm_split(MPI_Comm comm, int color, int key, MPI_Comm *newcomm);
__attribute__((visibility("default"))) int MPI_Comm_test_inter(MPI_Comm comm, int *flag);
__attribute__((visibility("default"))) int MPI_Dims_create(int nnodes, int ndims, int *dims);
__attribute__((visibility("default"))) int MPI_Errhandler_c2f(MPI_Errhandler errhandler);
__attribute__((visibility("default"))) int MPI_Errhandler_create(MPI_Handler_function *function,
                                         MPI_Errhandler *errhandler)
                                         ;
__attribute__((visibility("default"))) MPI_Errhandler MPI_Errhandler_f2c(int errhandler);
__attribute__((visibility("default"))) int MPI_Errhandler_free(MPI_Errhandler *errhandler);
__attribute__((visibility("default"))) int MPI_Errhandler_get(MPI_Comm comm, MPI_Errhandler *errhandler)
                                      ;
__attribute__((visibility("default"))) int MPI_Errhandler_set(MPI_Comm comm, MPI_Errhandler errhandler)
                                      ;
__attribute__((visibility("default"))) int MPI_Error_class(int errorcode, int *errorclass);
__attribute__((visibility("default"))) int MPI_Error_string(int errorcode, char *string, int *resultlen);
__attribute__((visibility("default"))) int MPI_Exscan(void *sendbuf, void *recvbuf, int count,
                              MPI_Datatype datatype, MPI_Op op, MPI_Comm comm);

__attribute__((visibility("default"))) int MPI_File_c2f(MPI_File file);
__attribute__((visibility("default"))) MPI_File MPI_File_f2c(int file);
__attribute__((visibility("default"))) int MPI_File_call_errhandler(MPI_File fh, int errorcode);
__attribute__((visibility("default"))) int MPI_File_create_errhandler(MPI_File_errhandler_function *function,
                                              MPI_Errhandler *errhandler);
__attribute__((visibility("default"))) int MPI_File_set_errhandler( MPI_File file, MPI_Errhandler errhandler);
__attribute__((visibility("default"))) int MPI_File_get_errhandler( MPI_File file, MPI_Errhandler *errhandler);
__attribute__((visibility("default"))) int MPI_File_open(MPI_Comm comm, char *filename, int amode,
                                 MPI_Info info, MPI_File *fh);
__attribute__((visibility("default"))) int MPI_File_close(MPI_File *fh);
__attribute__((visibility("default"))) int MPI_File_delete(char *filename, MPI_Info info);
__attribute__((visibility("default"))) int MPI_File_set_size(MPI_File fh, MPI_Offset size);
__attribute__((visibility("default"))) int MPI_File_preallocate(MPI_File fh, MPI_Offset size);
__attribute__((visibility("default"))) int MPI_File_get_size(MPI_File fh, MPI_Offset *size);
__attribute__((visibility("default"))) int MPI_File_get_group(MPI_File fh, MPI_Group *group);
__attribute__((visibility("default"))) int MPI_File_get_amode(MPI_File fh, int *amode);
__attribute__((visibility("default"))) int MPI_File_set_info(MPI_File fh, MPI_Info info);
__attribute__((visibility("default"))) int MPI_File_get_info(MPI_File fh, MPI_Info *info_used);
__attribute__((visibility("default"))) int MPI_File_set_view(MPI_File fh, MPI_Offset disp, MPI_Datatype etype,
                                     MPI_Datatype filetype, char *datarep, MPI_Info info);
__attribute__((visibility("default"))) int MPI_File_get_view(MPI_File fh, MPI_Offset *disp,
                                     MPI_Datatype *etype,
                                     MPI_Datatype *filetype, char *datarep);
__attribute__((visibility("default"))) int MPI_File_read_at(MPI_File fh, MPI_Offset offset, void *buf,
                                    int count, MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default"))) int MPI_File_read_at_all(MPI_File fh, MPI_Offset offset, void *buf,
                                        int count, MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default"))) int MPI_File_write_at(MPI_File fh, MPI_Offset offset, void *buf,
                                     int count, MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default"))) int MPI_File_write_at_all(MPI_File fh, MPI_Offset offset, void *buf,
                                         int count, MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default"))) int MPI_File_iread_at(MPI_File fh, MPI_Offset offset, void *buf,
                                     int count, MPI_Datatype datatype, MPI_Request *request);
__attribute__((visibility("default"))) int MPI_File_iwrite_at(MPI_File fh, MPI_Offset offset, void *buf,
                                      int count, MPI_Datatype datatype, MPI_Request *request);
__attribute__((visibility("default"))) int MPI_File_read(MPI_File fh, void *buf, int count,
                                 MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default"))) int MPI_File_read_all(MPI_File fh, void *buf, int count,
                                     MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default"))) int MPI_File_write(MPI_File fh, void *buf, int count,
                                  MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default"))) int MPI_File_write_all(MPI_File fh, void *buf, int count,
                                      MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default"))) int MPI_File_iread(MPI_File fh, void *buf, int count,
                                  MPI_Datatype datatype, MPI_Request *request);
__attribute__((visibility("default"))) int MPI_File_iwrite(MPI_File fh, void *buf, int count,
                                   MPI_Datatype datatype, MPI_Request *request);
__attribute__((visibility("default"))) int MPI_File_seek(MPI_File fh, MPI_Offset offset, int whence);
__attribute__((visibility("default"))) int MPI_File_get_position(MPI_File fh, MPI_Offset *offset);
__attribute__((visibility("default"))) int MPI_File_get_byte_offset(MPI_File fh, MPI_Offset offset,
                                            MPI_Offset *disp);
__attribute__((visibility("default"))) int MPI_File_read_shared(MPI_File fh, void *buf, int count,
                                        MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default"))) int MPI_File_write_shared(MPI_File fh, void *buf, int count,
      MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default"))) int MPI_File_iread_shared(MPI_File fh, void *buf, int count,
                                         MPI_Datatype datatype, MPI_Request *request);
__attribute__((visibility("default"))) int MPI_File_iwrite_shared(MPI_File fh, void *buf, int count,
                                          MPI_Datatype datatype, MPI_Request *request);
__attribute__((visibility("default"))) int MPI_File_read_ordered(MPI_File fh, void *buf, int count,
                                         MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default"))) int MPI_File_write_ordered(MPI_File fh, void *buf, int count,
                                          MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default"))) int MPI_File_seek_shared(MPI_File fh, MPI_Offset offset, int whence);
__attribute__((visibility("default"))) int MPI_File_get_position_shared(MPI_File fh, MPI_Offset *offset);
__attribute__((visibility("default"))) int MPI_File_read_at_all_begin(MPI_File fh, MPI_Offset offset, void *buf,
                                              int count, MPI_Datatype datatype);
__attribute__((visibility("default"))) int MPI_File_read_at_all_end(MPI_File fh, void *buf, MPI_Status *status);
__attribute__((visibility("default"))) int MPI_File_write_at_all_begin(MPI_File fh, MPI_Offset offset, void *buf,
                                               int count, MPI_Datatype datatype);
__attribute__((visibility("default"))) int MPI_File_write_at_all_end(MPI_File fh, void *buf, MPI_Status *status);
__attribute__((visibility("default"))) int MPI_File_read_all_begin(MPI_File fh, void *buf, int count,
                                           MPI_Datatype datatype);
__attribute__((visibility("default"))) int MPI_File_read_all_end(MPI_File fh, void *buf, MPI_Status *status);
__attribute__((visibility("default"))) int MPI_File_write_all_begin(MPI_File fh, void *buf, int count,
                                            MPI_Datatype datatype);
__attribute__((visibility("default"))) int MPI_File_write_all_end(MPI_File fh, void *buf, MPI_Status *status);
__attribute__((visibility("default"))) int MPI_File_read_ordered_begin(MPI_File fh, void *buf, int count,
                                               MPI_Datatype datatype);
__attribute__((visibility("default"))) int MPI_File_read_ordered_end(MPI_File fh, void *buf, MPI_Status *status);
__attribute__((visibility("default"))) int MPI_File_write_ordered_begin(MPI_File fh, void *buf, int count,
                                                MPI_Datatype datatype);
__attribute__((visibility("default"))) int MPI_File_write_ordered_end(MPI_File fh, void *buf, MPI_Status *status);
__attribute__((visibility("default"))) int MPI_File_get_type_extent(MPI_File fh, MPI_Datatype datatype,
                                            MPI_Aint *extent);
__attribute__((visibility("default"))) int MPI_File_set_atomicity(MPI_File fh, int flag);
__attribute__((visibility("default"))) int MPI_File_get_atomicity(MPI_File fh, int *flag);
__attribute__((visibility("default"))) int MPI_File_sync(MPI_File fh);

__attribute__((visibility("default"))) int MPI_Finalize(void);
__attribute__((visibility("default"))) int MPI_Finalized(int *flag);
__attribute__((visibility("default"))) int MPI_Free_mem(void *base);
__attribute__((visibility("default"))) int MPI_Gather(void *sendbuf, int sendcount, MPI_Datatype sendtype,
                              void *recvbuf, int recvcount, MPI_Datatype recvtype,
                              int root, MPI_Comm comm);
__attribute__((visibility("default"))) int MPI_Gatherv(void *sendbuf, int sendcount, MPI_Datatype sendtype,
                               void *recvbuf, int *recvcounts, int *displs,
                               MPI_Datatype recvtype, int root, MPI_Comm comm);
__attribute__((visibility("default"))) int MPI_Get_address(void *location, MPI_Aint *address);
__attribute__((visibility("default"))) int MPI_Get_count(MPI_Status *status, MPI_Datatype datatype, int *count);
__attribute__((visibility("default"))) int MPI_Get_elements(MPI_Status *status, MPI_Datatype datatype, int *count);
__attribute__((visibility("default"))) int MPI_Get(void *origin_addr, int origin_count,
                           MPI_Datatype origin_datatype, int target_rank,
                           MPI_Aint target_disp, int target_count,
                           MPI_Datatype target_datatype, MPI_Win win);
__attribute__((visibility("default"))) int MPI_Get_processor_name(char *name, int *resultlen);
__attribute__((visibility("default"))) int MPI_Get_version(int *version, int *subversion);
__attribute__((visibility("default"))) int MPI_Graph_create(MPI_Comm comm_old, int nnodes, int *index,
                                    int *edges, int reorder, MPI_Comm *comm_graph);
__attribute__((visibility("default"))) int MPI_Graph_get(MPI_Comm comm, int maxindex, int maxedges,
                                 int *index, int *edges);
__attribute__((visibility("default"))) int MPI_Graph_map(MPI_Comm comm, int nnodes, int *index, int *edges,
                                 int *newrank);
__attribute__((visibility("default"))) int MPI_Graph_neighbors_count(MPI_Comm comm, int rank, int *nneighbors);
__attribute__((visibility("default"))) int MPI_Graph_neighbors(MPI_Comm comm, int rank, int maxneighbors,
                                       int *neighbors);
__attribute__((visibility("default"))) int MPI_Graphdims_get(MPI_Comm comm, int *nnodes, int *nedges);
__attribute__((visibility("default"))) int MPI_Grequest_complete(MPI_Request request);
__attribute__((visibility("default"))) int MPI_Grequest_start(MPI_Grequest_query_function *query_fn,
                                      MPI_Grequest_free_function *free_fn,
                                      MPI_Grequest_cancel_function *cancel_fn,
                                      void *extra_state, MPI_Request *request);
__attribute__((visibility("default"))) int MPI_Group_c2f(MPI_Group group);
__attribute__((visibility("default"))) int MPI_Group_compare(MPI_Group group1, MPI_Group group2, int *result);
__attribute__((visibility("default"))) int MPI_Group_difference(MPI_Group group1, MPI_Group group2,
                                        MPI_Group *newgroup);
__attribute__((visibility("default"))) int MPI_Group_excl(MPI_Group group, int n, int *ranks,
                                  MPI_Group *newgroup);
__attribute__((visibility("default"))) MPI_Group MPI_Group_f2c(int group);
__attribute__((visibility("default"))) int MPI_Group_free(MPI_Group *group);
__attribute__((visibility("default"))) int MPI_Group_incl(MPI_Group group, int n, int *ranks,
                                  MPI_Group *newgroup);
__attribute__((visibility("default"))) int MPI_Group_intersection(MPI_Group group1, MPI_Group group2,
                                          MPI_Group *newgroup);
__attribute__((visibility("default"))) int MPI_Group_range_excl(MPI_Group group, int n, int ranges[][3],
                                        MPI_Group *newgroup);
__attribute__((visibility("default"))) int MPI_Group_range_incl(MPI_Group group, int n, int ranges[][3],
                                        MPI_Group *newgroup);
__attribute__((visibility("default"))) int MPI_Group_rank(MPI_Group group, int *rank);
__attribute__((visibility("default"))) int MPI_Group_size(MPI_Group group, int *size);
__attribute__((visibility("default"))) int MPI_Group_translate_ranks(MPI_Group group1, int n, int *ranks1,
                                             MPI_Group group2, int *ranks2);
__attribute__((visibility("default"))) int MPI_Group_union(MPI_Group group1, MPI_Group group2,
                                   MPI_Group *newgroup);
__attribute__((visibility("default"))) int MPI_Ibsend(void *buf, int count, MPI_Datatype datatype, int dest,
                              int tag, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default"))) int MPI_Info_c2f(MPI_Info info);
__attribute__((visibility("default"))) int MPI_Info_create(MPI_Info *info);
__attribute__((visibility("default"))) int MPI_Info_delete(MPI_Info info, char *key);
__attribute__((visibility("default"))) int MPI_Info_dup(MPI_Info info, MPI_Info *newinfo);
__attribute__((visibility("default"))) MPI_Info MPI_Info_f2c(int info);
__attribute__((visibility("default"))) int MPI_Info_free(MPI_Info *info);
__attribute__((visibility("default"))) int MPI_Info_get(MPI_Info info, char *key, int valuelen,
                                char *value, int *flag);
__attribute__((visibility("default"))) int MPI_Info_get_nkeys(MPI_Info info, int *nkeys);
__attribute__((visibility("default"))) int MPI_Info_get_nthkey(MPI_Info info, int n, char *key);
__attribute__((visibility("default"))) int MPI_Info_get_valuelen(MPI_Info info, char *key, int *valuelen,
                                         int *flag);
__attribute__((visibility("default"))) int MPI_Info_set(MPI_Info info, char *key, char *value);
__attribute__((visibility("default"))) int MPI_Init(int *argc, char ***argv);
__attribute__((visibility("default"))) int MPI_Initialized(int *flag);
__attribute__((visibility("default"))) int MPI_Init_thread(int *argc, char ***argv, int required,
                                   int *provided);
__attribute__((visibility("default"))) int MPI_Intercomm_create(MPI_Comm local_comm, int local_leader,
                                        MPI_Comm bridge_comm, int remote_leader,
                                        int tag, MPI_Comm *newintercomm);
__attribute__((visibility("default"))) int MPI_Intercomm_merge(MPI_Comm intercomm, int high,
                                       MPI_Comm *newintercomm);
__attribute__((visibility("default"))) int MPI_Iprobe(int source, int tag, MPI_Comm comm, int *flag,
                              MPI_Status *status);
__attribute__((visibility("default"))) int MPI_Irecv(void *buf, int count, MPI_Datatype datatype, int source,
                             int tag, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default"))) int MPI_Irsend(void *buf, int count, MPI_Datatype datatype, int dest,
                              int tag, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default"))) int MPI_Isend(void *buf, int count, MPI_Datatype datatype, int dest,
                             int tag, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default"))) int MPI_Issend(void *buf, int count, MPI_Datatype datatype, int dest,
                              int tag, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default"))) int MPI_Is_thread_main(int *flag);
__attribute__((visibility("default"))) int MPI_Keyval_create(MPI_Copy_function *copy_fn,
                                     MPI_Delete_function *delete_fn,
                                     int *keyval, void *extra_state)
                                     ;
__attribute__((visibility("default"))) int MPI_Keyval_free(int *keyval)
                                   ;
__attribute__((visibility("default"))) int MPI_Lookup_name(char *service_name, MPI_Info info, char *port_name);
__attribute__((visibility("default"))) int MPI_Op_c2f(MPI_Op op);
__attribute__((visibility("default"))) int MPI_Op_commutative(MPI_Op op, int *commute);
__attribute__((visibility("default"))) int MPI_Op_create(MPI_User_function *function, int commute, MPI_Op *op);
__attribute__((visibility("default"))) int MPI_Open_port(MPI_Info info, char *port_name);
__attribute__((visibility("default"))) MPI_Op MPI_Op_f2c(int op);
__attribute__((visibility("default"))) int MPI_Op_free(MPI_Op *op);
__attribute__((visibility("default"))) int MPI_Pack_external(char *datarep, void *inbuf, int incount,
                                     MPI_Datatype datatype, void *outbuf,
                                     MPI_Aint outsize, MPI_Aint *position);
__attribute__((visibility("default"))) int MPI_Pack_external_size(char *datarep, int incount,
                                          MPI_Datatype datatype, MPI_Aint *size);
__attribute__((visibility("default"))) int MPI_Pack(void *inbuf, int incount, MPI_Datatype datatype,
                            void *outbuf, int outsize, int *position, MPI_Comm comm);
__attribute__((visibility("default"))) int MPI_Pack_size(int incount, MPI_Datatype datatype, MPI_Comm comm,
                                 int *size);
__attribute__((visibility("default"))) int MPI_Pcontrol(const int level, ...);
__attribute__((visibility("default"))) int MPI_Probe(int source, int tag, MPI_Comm comm, MPI_Status *status);
__attribute__((visibility("default"))) int MPI_Publish_name(char *service_name, MPI_Info info,
                                    char *port_name);
__attribute__((visibility("default"))) int MPI_Put(void *origin_addr, int origin_count, MPI_Datatype origin_datatype,
                           int target_rank, MPI_Aint target_disp, int target_count,
                           MPI_Datatype target_datatype, MPI_Win win);
__attribute__((visibility("default"))) int MPI_Query_thread(int *provided);
__attribute__((visibility("default"))) int MPI_Recv_init(void *buf, int count, MPI_Datatype datatype, int source,
                                 int tag, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default"))) int MPI_Recv(void *buf, int count, MPI_Datatype datatype, int source,
                            int tag, MPI_Comm comm, MPI_Status *status);
__attribute__((visibility("default"))) int MPI_Reduce(void *sendbuf, void *recvbuf, int count,
                              MPI_Datatype datatype, MPI_Op op, int root, MPI_Comm comm);
__attribute__((visibility("default"))) int MPI_Reduce_local(void *inbuf, void *inoutbuf, int count,
                                    MPI_Datatype datatype, MPI_Op op);
__attribute__((visibility("default"))) int MPI_Reduce_scatter(void *sendbuf, void *recvbuf, int *recvcounts,
                                      MPI_Datatype datatype, MPI_Op op, MPI_Comm comm);
__attribute__((visibility("default"))) int MPI_Register_datarep(char *datarep,
                                        MPI_Datarep_conversion_function *read_conversion_fn,
                                        MPI_Datarep_conversion_function *write_conversion_fn,
                                        MPI_Datarep_extent_function *dtype_file_extent_fn,
                                        void *extra_state);
__attribute__((visibility("default"))) int MPI_Request_c2f(MPI_Request request);
__attribute__((visibility("default"))) MPI_Request MPI_Request_f2c(int request);
__attribute__((visibility("default"))) int MPI_Request_free(MPI_Request *request);
__attribute__((visibility("default"))) int MPI_Request_get_status(MPI_Request request, int *flag,
                                          MPI_Status *status);
__attribute__((visibility("default"))) int MPI_Rsend(void *ibuf, int count, MPI_Datatype datatype, int dest,
                             int tag, MPI_Comm comm);
__attribute__((visibility("default"))) int MPI_Rsend_init(void *buf, int count, MPI_Datatype datatype,
                                  int dest, int tag, MPI_Comm comm,
                                  MPI_Request *request);
__attribute__((visibility("default"))) int MPI_Scan(void *sendbuf, void *recvbuf, int count,
                            MPI_Datatype datatype, MPI_Op op, MPI_Comm comm);
__attribute__((visibility("default"))) int MPI_Scatter(void *sendbuf, int sendcount, MPI_Datatype sendtype,
                               void *recvbuf, int recvcount, MPI_Datatype recvtype,
                               int root, MPI_Comm comm);
__attribute__((visibility("default"))) int MPI_Scatterv(void *sendbuf, int *sendcounts, int *displs,
                                MPI_Datatype sendtype, void *recvbuf, int recvcount,
                                MPI_Datatype recvtype, int root, MPI_Comm comm);
__attribute__((visibility("default"))) int MPI_Send_init(void *buf, int count, MPI_Datatype datatype,
                                 int dest, int tag, MPI_Comm comm,
                                 MPI_Request *request);
__attribute__((visibility("default"))) int MPI_Send(void *buf, int count, MPI_Datatype datatype, int dest,
                            int tag, MPI_Comm comm);
__attribute__((visibility("default"))) int MPI_Sendrecv(void *sendbuf, int sendcount, MPI_Datatype sendtype,
                                int dest, int sendtag, void *recvbuf, int recvcount,
                                MPI_Datatype recvtype, int source, int recvtag,
                                MPI_Comm comm, MPI_Status *status);
__attribute__((visibility("default"))) int MPI_Sendrecv_replace(void * buf, int count, MPI_Datatype datatype,
                                        int dest, int sendtag, int source, int recvtag,
                                        MPI_Comm comm, MPI_Status *status);
__attribute__((visibility("default"))) int MPI_Ssend_init(void *buf, int count, MPI_Datatype datatype,
                                  int dest, int tag, MPI_Comm comm,
                                  MPI_Request *request);
__attribute__((visibility("default"))) int MPI_Ssend(void *buf, int count, MPI_Datatype datatype, int dest,
                             int tag, MPI_Comm comm);
__attribute__((visibility("default"))) int MPI_Start(MPI_Request *request);
__attribute__((visibility("default"))) int MPI_Startall(int count, MPI_Request *array_of_requests);
__attribute__((visibility("default"))) int MPI_Status_c2f(MPI_Status *c_status, int *f_status);
__attribute__((visibility("default"))) int MPI_Status_f2c(int *f_status, MPI_Status *c_status);
__attribute__((visibility("default"))) int MPI_Status_set_cancelled(MPI_Status *status, int flag);
__attribute__((visibility("default"))) int MPI_Status_set_elements(MPI_Status *status, MPI_Datatype datatype,
                                           int count);
__attribute__((visibility("default"))) int MPI_Testall(int count, MPI_Request array_of_requests[], int *flag,
                               MPI_Status array_of_statuses[]);
__attribute__((visibility("default"))) int MPI_Testany(int count, MPI_Request array_of_requests[], int *index,
                               int *flag, MPI_Status *status);
__attribute__((visibility("default"))) int MPI_Test(MPI_Request *request, int *flag, MPI_Status *status);
__attribute__((visibility("default"))) int MPI_Test_cancelled(MPI_Status *status, int *flag);
__attribute__((visibility("default"))) int MPI_Testsome(int incount, MPI_Request array_of_requests[],
                                int *outcount, int array_of_indices[],
                                MPI_Status array_of_statuses[]);
__attribute__((visibility("default"))) int MPI_Topo_test(MPI_Comm comm, int *status);
__attribute__((visibility("default"))) int MPI_Type_c2f(MPI_Datatype datatype);
__attribute__((visibility("default"))) int MPI_Type_commit(MPI_Datatype *type);
__attribute__((visibility("default"))) int MPI_Type_contiguous(int count, MPI_Datatype oldtype,
                                       MPI_Datatype *newtype);
__attribute__((visibility("default"))) int MPI_Type_create_darray(int size, int rank, int ndims,
                                          int gsize_array[], int distrib_array[],
                                          int darg_array[], int psize_array[],
                                          int order, MPI_Datatype oldtype,
                                          MPI_Datatype *newtype);
__attribute__((visibility("default"))) int MPI_Type_create_f90_complex(int p, int r, MPI_Datatype *newtype);
__attribute__((visibility("default"))) int MPI_Type_create_f90_integer(int r, MPI_Datatype *newtype);
__attribute__((visibility("default"))) int MPI_Type_create_f90_real(int p, int r, MPI_Datatype *newtype);
__attribute__((visibility("default"))) int MPI_Type_create_hindexed(int count, int array_of_blocklengths[],
                                            MPI_Aint array_of_displacements[],
                                            MPI_Datatype oldtype,
                                            MPI_Datatype *newtype);
__attribute__((visibility("default"))) int MPI_Type_create_hvector(int count, int blocklength, MPI_Aint stride,
                                           MPI_Datatype oldtype,
                                           MPI_Datatype *newtype);
__attribute__((visibility("default"))) int MPI_Type_create_keyval(MPI_Type_copy_attr_function *type_copy_attr_fn,
                                          MPI_Type_delete_attr_function *type_delete_attr_fn,
                                          int *type_keyval, void *extra_state);
__attribute__((visibility("default"))) int MPI_Type_create_indexed_block(int count, int blocklength,
                                                 int array_of_displacements[],
                                                 MPI_Datatype oldtype,
                                                 MPI_Datatype *newtype);
__attribute__((visibility("default"))) int MPI_Type_create_struct(int count, int array_of_block_lengths[],
                                          MPI_Aint array_of_displacements[],
                                          MPI_Datatype array_of_types[],
                                          MPI_Datatype *newtype);
__attribute__((visibility("default"))) int MPI_Type_create_subarray(int ndims, int size_array[], int subsize_array[],
                                            int start_array[], int order,
                                            MPI_Datatype oldtype, MPI_Datatype *newtype);
__attribute__((visibility("default"))) int MPI_Type_create_resized(MPI_Datatype oldtype, MPI_Aint lb,
                                           MPI_Aint extent, MPI_Datatype *newtype);
__attribute__((visibility("default"))) int MPI_Type_delete_attr(MPI_Datatype type, int type_keyval);
__attribute__((visibility("default"))) int MPI_Type_dup(MPI_Datatype type, MPI_Datatype *newtype);
__attribute__((visibility("default"))) int MPI_Type_extent(MPI_Datatype type, MPI_Aint *extent)
                                   ;
__attribute__((visibility("default"))) int MPI_Type_free(MPI_Datatype *type);
__attribute__((visibility("default"))) int MPI_Type_free_keyval(int *type_keyval);
__attribute__((visibility("default"))) MPI_Datatype MPI_Type_f2c(int datatype);
__attribute__((visibility("default"))) int MPI_Type_get_attr(MPI_Datatype type, int type_keyval,
                                     void *attribute_val, int *flag);
__attribute__((visibility("default"))) int MPI_Type_get_contents(MPI_Datatype mtype, int max_integers,
                                         int max_addresses, int max_datatypes,
                                         int array_of_integers[],
                                         MPI_Aint array_of_addresses[],
                                         MPI_Datatype array_of_datatypes[]);
__attribute__((visibility("default"))) int MPI_Type_get_envelope(MPI_Datatype type, int *num_integers,
                                         int *num_addresses, int *num_datatypes,
                                         int *combiner);
__attribute__((visibility("default"))) int MPI_Type_get_extent(MPI_Datatype type, MPI_Aint *lb,
                                       MPI_Aint *extent);
__attribute__((visibility("default"))) int MPI_Type_get_name(MPI_Datatype type, char *type_name,
                                     int *resultlen);
__attribute__((visibility("default"))) int MPI_Type_get_true_extent(MPI_Datatype datatype, MPI_Aint *true_lb,
                                            MPI_Aint *true_extent);
__attribute__((visibility("default"))) int MPI_Type_hindexed(int count, int array_of_blocklengths[],
                                     MPI_Aint array_of_displacements[],
                                     MPI_Datatype oldtype, MPI_Datatype *newtype)
                                     ;
__attribute__((visibility("default"))) int MPI_Type_hvector(int count, int blocklength, MPI_Aint stride,
                                    MPI_Datatype oldtype, MPI_Datatype *newtype)
                                    ;
__attribute__((visibility("default"))) int MPI_Type_indexed(int count, int array_of_blocklengths[],
                                    int array_of_displacements[],
                                    MPI_Datatype oldtype, MPI_Datatype *newtype);
__attribute__((visibility("default"))) int MPI_Type_lb(MPI_Datatype type, MPI_Aint *lb)
                               ;
__attribute__((visibility("default"))) int MPI_Type_match_size(int typeclass, int size, MPI_Datatype *type);
__attribute__((visibility("default"))) int MPI_Type_set_attr(MPI_Datatype type, int type_keyval,
                                     void *attr_val);
__attribute__((visibility("default"))) int MPI_Type_set_name(MPI_Datatype type, char *type_name);
__attribute__((visibility("default"))) int MPI_Type_size(MPI_Datatype type, int *size);
__attribute__((visibility("default"))) int MPI_Type_struct(int count, int array_of_blocklengths[],
                                   MPI_Aint array_of_displacements[],
                                   MPI_Datatype array_of_types[],
                                   MPI_Datatype *newtype)
                                   ;
__attribute__((visibility("default"))) int MPI_Type_ub(MPI_Datatype mtype, MPI_Aint *ub)
                               ;
__attribute__((visibility("default"))) int MPI_Type_vector(int count, int blocklength, int stride,
                                   MPI_Datatype oldtype, MPI_Datatype *newtype);
__attribute__((visibility("default"))) int MPI_Unpack(void *inbuf, int insize, int *position,
                              void *outbuf, int outcount, MPI_Datatype datatype,
                              MPI_Comm comm);
__attribute__((visibility("default"))) int MPI_Unpublish_name(char *service_name, MPI_Info info, char *port_name);
__attribute__((visibility("default"))) int MPI_Unpack_external (char *datarep, void *inbuf, MPI_Aint insize,
                                        MPI_Aint *position, void *outbuf, int outcount,
                                        MPI_Datatype datatype);
__attribute__((visibility("default"))) int MPI_Waitall(int count, MPI_Request *array_of_requests,
                               MPI_Status *array_of_statuses);
__attribute__((visibility("default"))) int MPI_Waitany(int count, MPI_Request *array_of_requests,
                               int *index, MPI_Status *status);
__attribute__((visibility("default"))) int MPI_Wait(MPI_Request *request, MPI_Status *status);
__attribute__((visibility("default"))) int MPI_Waitsome(int incount, MPI_Request *array_of_requests,
                                int *outcount, int *array_of_indices,
                                MPI_Status *array_of_statuses);
__attribute__((visibility("default"))) int MPI_Win_c2f(MPI_Win win);
__attribute__((visibility("default"))) int MPI_Win_call_errhandler(MPI_Win win, int errorcode);
__attribute__((visibility("default"))) int MPI_Win_complete(MPI_Win win);
__attribute__((visibility("default"))) int MPI_Win_create(void *base, MPI_Aint size, int disp_unit,
                                  MPI_Info info, MPI_Comm comm, MPI_Win *win);
__attribute__((visibility("default"))) int MPI_Win_create_errhandler(MPI_Win_errhandler_function *function,
                                             MPI_Errhandler *errhandler);
__attribute__((visibility("default"))) int MPI_Win_create_keyval(MPI_Win_copy_attr_function *win_copy_attr_fn,
                                         MPI_Win_delete_attr_function *win_delete_attr_fn,
                                         int *win_keyval, void *extra_state);
__attribute__((visibility("default"))) int MPI_Win_delete_attr(MPI_Win win, int win_keyval);
__attribute__((visibility("default"))) MPI_Win MPI_Win_f2c(int win);
__attribute__((visibility("default"))) int MPI_Win_fence(int assert, MPI_Win win);
__attribute__((visibility("default"))) int MPI_Win_free(MPI_Win *win);
__attribute__((visibility("default"))) int MPI_Win_free_keyval(int *win_keyval);
__attribute__((visibility("default"))) int MPI_Win_get_attr(MPI_Win win, int win_keyval,
                                    void *attribute_val, int *flag);
__attribute__((visibility("default"))) int MPI_Win_get_errhandler(MPI_Win win, MPI_Errhandler *errhandler);
__attribute__((visibility("default"))) int MPI_Win_get_group(MPI_Win win, MPI_Group *group);
__attribute__((visibility("default"))) int MPI_Win_get_name(MPI_Win win, char *win_name, int *resultlen);
__attribute__((visibility("default"))) int MPI_Win_lock(int lock_type, int rank, int assert, MPI_Win win);
__attribute__((visibility("default"))) int MPI_Win_post(MPI_Group group, int assert, MPI_Win win);
__attribute__((visibility("default"))) int MPI_Win_set_attr(MPI_Win win, int win_keyval, void *attribute_val);
__attribute__((visibility("default"))) int MPI_Win_set_errhandler(MPI_Win win, MPI_Errhandler errhandler);
__attribute__((visibility("default"))) int MPI_Win_set_name(MPI_Win win, char *win_name);
__attribute__((visibility("default"))) int MPI_Win_start(MPI_Group group, int assert, MPI_Win win);
__attribute__((visibility("default"))) int MPI_Win_test(MPI_Win win, int *flag);
__attribute__((visibility("default"))) int MPI_Win_unlock(int rank, MPI_Win win);
__attribute__((visibility("default"))) int MPI_Win_wait(MPI_Win win);
__attribute__((visibility("default"))) double MPI_Wtick(void);
__attribute__((visibility("default"))) double MPI_Wtime(void);





__attribute__((visibility("default"))) int PMPI_Abort(MPI_Comm comm, int errorcode);
__attribute__((visibility("default"))) int PMPI_Accumulate(void *origin_addr, int origin_count, MPI_Datatype origin_datatype,
                                   int target_rank, MPI_Aint target_disp, int target_count,
                                   MPI_Datatype target_datatype, MPI_Op op, MPI_Win win);
__attribute__((visibility("default"))) int PMPI_Add_error_class(int *errorclass);
__attribute__((visibility("default"))) int PMPI_Add_error_code(int errorclass, int *errorcode);
__attribute__((visibility("default"))) int PMPI_Add_error_string(int errorcode, char *string);
__attribute__((visibility("default"))) int PMPI_Address(void *location, MPI_Aint *address)
                                ;
__attribute__((visibility("default"))) int PMPI_Allgather(void *sendbuf, int sendcount, MPI_Datatype sendtype,
                                  void *recvbuf, int recvcount,
                                  MPI_Datatype recvtype, MPI_Comm comm);
__attribute__((visibility("default"))) int PMPI_Allgatherv(void *sendbuf, int sendcount, MPI_Datatype sendtype,
                                   void *recvbuf, int *recvcounts,
                                   int *displs, MPI_Datatype recvtype, MPI_Comm comm);
__attribute__((visibility("default"))) int PMPI_Alloc_mem(MPI_Aint size, MPI_Info info,
                                  void *baseptr);
__attribute__((visibility("default"))) int PMPI_Allreduce(void *sendbuf, void *recvbuf, int count,
                                  MPI_Datatype datatype, MPI_Op op, MPI_Comm comm);
__attribute__((visibility("default"))) int PMPI_Alltoall(void *sendbuf, int sendcount, MPI_Datatype sendtype,
                                 void *recvbuf, int recvcount,
                                 MPI_Datatype recvtype, MPI_Comm comm);
__attribute__((visibility("default"))) int PMPI_Alltoallv(void *sendbuf, int *sendcounts, int *sdispls,
                                  MPI_Datatype sendtype, void *recvbuf, int *recvcounts,
                                  int *rdispls, MPI_Datatype recvtype, MPI_Comm comm);
__attribute__((visibility("default"))) int PMPI_Alltoallw(void *sendbuf, int *sendcounts, int *sdispls, MPI_Datatype *sendtypes,
                                  void *recvbuf, int *recvcounts, int *rdispls, MPI_Datatype *recvtypes,
                                  MPI_Comm comm);
__attribute__((visibility("default"))) int PMPI_Attr_delete(MPI_Comm comm, int keyval)
                                    ;
__attribute__((visibility("default"))) int PMPI_Attr_get(MPI_Comm comm, int keyval, void *attribute_val, int *flag)
                                 ;
__attribute__((visibility("default"))) int PMPI_Attr_put(MPI_Comm comm, int keyval, void *attribute_val)
                                 ;
__attribute__((visibility("default"))) int PMPI_Barrier(MPI_Comm comm);
__attribute__((visibility("default"))) int PMPI_Bcast(void *buffer, int count, MPI_Datatype datatype,
                              int root, MPI_Comm comm);
__attribute__((visibility("default"))) int PMPI_Bsend(void *buf, int count, MPI_Datatype datatype,
                              int dest, int tag, MPI_Comm comm);
__attribute__((visibility("default"))) int PMPI_Bsend_init(void *buf, int count, MPI_Datatype datatype,
                                   int dest, int tag, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default"))) int PMPI_Buffer_attach(void *buffer, int size);
__attribute__((visibility("default"))) int PMPI_Buffer_detach(void *buffer, int *size);
__attribute__((visibility("default"))) int PMPI_Cancel(MPI_Request *request);
__attribute__((visibility("default"))) int PMPI_Cart_coords(MPI_Comm comm, int rank, int maxdims, int *coords);
__attribute__((visibility("default"))) int PMPI_Cart_create(MPI_Comm old_comm, int ndims, int *dims,
                                    int *periods, int reorder, MPI_Comm *comm_cart);
__attribute__((visibility("default"))) int PMPI_Cart_get(MPI_Comm comm, int maxdims, int *dims,
                                 int *periods, int *coords);
__attribute__((visibility("default"))) int PMPI_Cart_map(MPI_Comm comm, int ndims, int *dims,
                                 int *periods, int *newrank);
__attribute__((visibility("default"))) int PMPI_Cart_rank(MPI_Comm comm, int *coords, int *rank);
__attribute__((visibility("default"))) int PMPI_Cart_shift(MPI_Comm comm, int direction, int disp,
                                   int *rank_source, int *rank_dest);
__attribute__((visibility("default"))) int PMPI_Cart_sub(MPI_Comm comm, int *remain_dims, MPI_Comm *new_comm);
__attribute__((visibility("default"))) int PMPI_Cartdim_get(MPI_Comm comm, int *ndims);
__attribute__((visibility("default"))) int PMPI_Close_port(char *port_name);
__attribute__((visibility("default"))) int PMPI_Comm_accept(char *port_name, MPI_Info info, int root,
                                    MPI_Comm comm, MPI_Comm *newcomm);
__attribute__((visibility("default"))) int PMPI_Comm_c2f(MPI_Comm comm);
__attribute__((visibility("default"))) int PMPI_Comm_call_errhandler(MPI_Comm comm, int errorcode);
__attribute__((visibility("default"))) int PMPI_Comm_compare(MPI_Comm comm1, MPI_Comm comm2, int *result);
__attribute__((visibility("default"))) int PMPI_Comm_connect(char *port_name, MPI_Info info, int root,
                                     MPI_Comm comm, MPI_Comm *newcomm);
__attribute__((visibility("default"))) int PMPI_Comm_create_errhandler(MPI_Comm_errhandler_function *function,
                                               MPI_Errhandler *errhandler);
__attribute__((visibility("default"))) int PMPI_Comm_create_keyval(MPI_Comm_copy_attr_function *comm_copy_attr_fn,
                                           MPI_Comm_delete_attr_function *comm_delete_attr_fn,
                                           int *comm_keyval, void *extra_state);
__attribute__((visibility("default"))) int PMPI_Comm_create(MPI_Comm comm, MPI_Group group, MPI_Comm *newcomm);
__attribute__((visibility("default"))) int PMPI_Comm_delete_attr(MPI_Comm comm, int comm_keyval);
__attribute__((visibility("default"))) int PMPI_Comm_disconnect(MPI_Comm *comm);
__attribute__((visibility("default"))) int PMPI_Comm_dup(MPI_Comm comm, MPI_Comm *newcomm);
__attribute__((visibility("default"))) MPI_Comm PMPI_Comm_f2c(int comm);
__attribute__((visibility("default"))) int PMPI_Comm_free_keyval(int *comm_keyval);
__attribute__((visibility("default"))) int PMPI_Comm_free(MPI_Comm *comm);
__attribute__((visibility("default"))) int PMPI_Comm_get_attr(MPI_Comm comm, int comm_keyval,
                                      void *attribute_val, int *flag);
__attribute__((visibility("default"))) int PMPI_Comm_get_errhandler(MPI_Comm comm, MPI_Errhandler *erhandler);
__attribute__((visibility("default"))) int PMPI_Comm_get_name(MPI_Comm comm, char *comm_name, int *resultlen);
__attribute__((visibility("default"))) int PMPI_Comm_get_parent(MPI_Comm *parent);
__attribute__((visibility("default"))) int PMPI_Comm_group(MPI_Comm comm, MPI_Group *group);
__attribute__((visibility("default"))) int PMPI_Comm_join(int fd, MPI_Comm *intercomm);
__attribute__((visibility("default"))) int PMPI_Comm_rank(MPI_Comm comm, int *rank);
__attribute__((visibility("default"))) int PMPI_Comm_remote_group(MPI_Comm comm, MPI_Group *group);
__attribute__((visibility("default"))) int PMPI_Comm_remote_size(MPI_Comm comm, int *size);
__attribute__((visibility("default"))) int PMPI_Comm_set_attr(MPI_Comm comm, int comm_keyval, void *attribute_val);
__attribute__((visibility("default"))) int PMPI_Comm_set_errhandler(MPI_Comm comm, MPI_Errhandler errhandler);
__attribute__((visibility("default"))) int PMPI_Comm_set_name(MPI_Comm comm, char *comm_name);
__attribute__((visibility("default"))) int PMPI_Comm_size(MPI_Comm comm, int *size);
__attribute__((visibility("default"))) int PMPI_Comm_spawn(char *command, char **argv, int maxprocs, MPI_Info info,
                                   int root, MPI_Comm comm, MPI_Comm *intercomm,
                                   int *array_of_errcodes);
__attribute__((visibility("default"))) int PMPI_Comm_spawn_multiple(int count, char **array_of_commands, char ***array_of_argv,
                                            int *array_of_maxprocs, MPI_Info *array_of_info,
                                            int root, MPI_Comm comm, MPI_Comm *intercomm,
                                            int *array_of_errcodes);
__attribute__((visibility("default"))) int PMPI_Comm_split(MPI_Comm comm, int color, int key, MPI_Comm *newcomm);
__attribute__((visibility("default"))) int PMPI_Comm_test_inter(MPI_Comm comm, int *flag);
__attribute__((visibility("default"))) int PMPI_Dims_create(int nnodes, int ndims, int *dims);
__attribute__((visibility("default"))) int PMPI_Errhandler_c2f(MPI_Errhandler errhandler);
__attribute__((visibility("default"))) int PMPI_Errhandler_create(MPI_Handler_function *function,
                                          MPI_Errhandler *errhandler)
                                          ;
__attribute__((visibility("default"))) MPI_Errhandler PMPI_Errhandler_f2c(int errhandler);
__attribute__((visibility("default"))) int PMPI_Errhandler_free(MPI_Errhandler *errhandler);
__attribute__((visibility("default"))) int PMPI_Errhandler_get(MPI_Comm comm, MPI_Errhandler *errhandler)
                                       ;
__attribute__((visibility("default"))) int PMPI_Errhandler_set(MPI_Comm comm, MPI_Errhandler errhandler)
                                       ;
__attribute__((visibility("default"))) int PMPI_Error_class(int errorcode, int *errorclass);
__attribute__((visibility("default"))) int PMPI_Error_string(int errorcode, char *string, int *resultlen);
__attribute__((visibility("default"))) int PMPI_Exscan(void *sendbuf, void *recvbuf, int count,
                               MPI_Datatype datatype, MPI_Op op, MPI_Comm comm);

__attribute__((visibility("default"))) int PMPI_File_c2f(MPI_File file);
__attribute__((visibility("default"))) MPI_File PMPI_File_f2c(int file);
__attribute__((visibility("default"))) int PMPI_File_call_errhandler(MPI_File fh, int errorcode);
__attribute__((visibility("default"))) int PMPI_File_create_errhandler(MPI_File_errhandler_function *function,
                                               MPI_Errhandler *errhandler);
__attribute__((visibility("default"))) int PMPI_File_set_errhandler( MPI_File file, MPI_Errhandler errhandler);
__attribute__((visibility("default"))) int PMPI_File_get_errhandler( MPI_File file, MPI_Errhandler *errhandler);
__attribute__((visibility("default"))) int PMPI_File_open(MPI_Comm comm, char *filename, int amode,
                                  MPI_Info info, MPI_File *fh);
__attribute__((visibility("default"))) int PMPI_File_close(MPI_File *fh);
__attribute__((visibility("default"))) int PMPI_File_delete(char *filename, MPI_Info info);
__attribute__((visibility("default"))) int PMPI_File_set_size(MPI_File fh, MPI_Offset size);
__attribute__((visibility("default"))) int PMPI_File_preallocate(MPI_File fh, MPI_Offset size);
__attribute__((visibility("default"))) int PMPI_File_get_size(MPI_File fh, MPI_Offset *size);
__attribute__((visibility("default"))) int PMPI_File_get_group(MPI_File fh, MPI_Group *group);
__attribute__((visibility("default"))) int PMPI_File_get_amode(MPI_File fh, int *amode);
__attribute__((visibility("default"))) int PMPI_File_set_info(MPI_File fh, MPI_Info info);
__attribute__((visibility("default"))) int PMPI_File_get_info(MPI_File fh, MPI_Info *info_used);
__attribute__((visibility("default"))) int PMPI_File_set_view(MPI_File fh, MPI_Offset disp, MPI_Datatype etype,
                                      MPI_Datatype filetype, char *datarep, MPI_Info info);
__attribute__((visibility("default"))) int PMPI_File_get_view(MPI_File fh, MPI_Offset *disp,
                                      MPI_Datatype *etype,
                                      MPI_Datatype *filetype, char *datarep);
__attribute__((visibility("default"))) int PMPI_File_read_at(MPI_File fh, MPI_Offset offset, void *buf,
                                     int count, MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default"))) int PMPI_File_read_at_all(MPI_File fh, MPI_Offset offset, void *buf,
                                         int count, MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default"))) int PMPI_File_write_at(MPI_File fh, MPI_Offset offset, void *buf,
                                      int count, MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default"))) int PMPI_File_write_at_all(MPI_File fh, MPI_Offset offset, void *buf,
                                          int count, MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default"))) int PMPI_File_iread_at(MPI_File fh, MPI_Offset offset, void *buf,
                                      int count, MPI_Datatype datatype, MPI_Request *request);
__attribute__((visibility("default"))) int PMPI_File_iwrite_at(MPI_File fh, MPI_Offset offset, void *buf,
                                       int count, MPI_Datatype datatype, MPI_Request *request);
__attribute__((visibility("default"))) int PMPI_File_read(MPI_File fh, void *buf, int count,
                                  MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default"))) int PMPI_File_read_all(MPI_File fh, void *buf, int count,
                                      MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default"))) int PMPI_File_write(MPI_File fh, void *buf, int count,
                                   MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default"))) int PMPI_File_write_all(MPI_File fh, void *buf, int count,
                                       MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default"))) int PMPI_File_iread(MPI_File fh, void *buf, int count,
                                   MPI_Datatype datatype, MPI_Request *request);
__attribute__((visibility("default"))) int PMPI_File_iwrite(MPI_File fh, void *buf, int count,
                                    MPI_Datatype datatype, MPI_Request *request);
__attribute__((visibility("default"))) int PMPI_File_seek(MPI_File fh, MPI_Offset offset, int whence);
__attribute__((visibility("default"))) int PMPI_File_get_position(MPI_File fh, MPI_Offset *offset);
__attribute__((visibility("default"))) int PMPI_File_get_byte_offset(MPI_File fh, MPI_Offset offset,
                                             MPI_Offset *disp);
__attribute__((visibility("default"))) int PMPI_File_read_shared(MPI_File fh, void *buf, int count,
                                         MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default"))) int PMPI_File_write_shared(MPI_File fh, void *buf, int count,
                                          MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default"))) int PMPI_File_iread_shared(MPI_File fh, void *buf, int count,
                                          MPI_Datatype datatype, MPI_Request *request);
__attribute__((visibility("default"))) int PMPI_File_iwrite_shared(MPI_File fh, void *buf, int count,
                                           MPI_Datatype datatype, MPI_Request *request);
__attribute__((visibility("default"))) int PMPI_File_read_ordered(MPI_File fh, void *buf, int count,
                                          MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default"))) int PMPI_File_write_ordered(MPI_File fh, void *buf, int count,
                                           MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default"))) int PMPI_File_seek_shared(MPI_File fh, MPI_Offset offset, int whence);
__attribute__((visibility("default"))) int PMPI_File_get_position_shared(MPI_File fh, MPI_Offset *offset);
__attribute__((visibility("default"))) int PMPI_File_read_at_all_begin(MPI_File fh, MPI_Offset offset, void *buf,
                                               int count, MPI_Datatype datatype);
__attribute__((visibility("default"))) int PMPI_File_read_at_all_end(MPI_File fh, void *buf, MPI_Status *status);
__attribute__((visibility("default"))) int PMPI_File_write_at_all_begin(MPI_File fh, MPI_Offset offset, void *buf,
                                                int count, MPI_Datatype datatype);
__attribute__((visibility("default"))) int PMPI_File_write_at_all_end(MPI_File fh, void *buf, MPI_Status *status);
__attribute__((visibility("default"))) int PMPI_File_read_all_begin(MPI_File fh, void *buf, int count,
                                            MPI_Datatype datatype);
__attribute__((visibility("default"))) int PMPI_File_read_all_end(MPI_File fh, void *buf, MPI_Status *status);
__attribute__((visibility("default"))) int PMPI_File_write_all_begin(MPI_File fh, void *buf, int count,
                                             MPI_Datatype datatype);
__attribute__((visibility("default"))) int PMPI_File_write_all_end(MPI_File fh, void *buf, MPI_Status *status);
__attribute__((visibility("default"))) int PMPI_File_read_ordered_begin(MPI_File fh, void *buf, int count,
                                                MPI_Datatype datatype);
__attribute__((visibility("default"))) int PMPI_File_read_ordered_end(MPI_File fh, void *buf, MPI_Status *status);
__attribute__((visibility("default"))) int PMPI_File_write_ordered_begin(MPI_File fh, void *buf, int count,
                                                 MPI_Datatype datatype);
__attribute__((visibility("default"))) int PMPI_File_write_ordered_end(MPI_File fh, void *buf, MPI_Status *status);
__attribute__((visibility("default"))) int PMPI_File_get_type_extent(MPI_File fh, MPI_Datatype datatype,
                                             MPI_Aint *extent);
__attribute__((visibility("default"))) int PMPI_File_set_atomicity(MPI_File fh, int flag);
__attribute__((visibility("default"))) int PMPI_File_get_atomicity(MPI_File fh, int *flag);
__attribute__((visibility("default"))) int PMPI_File_sync(MPI_File fh);

__attribute__((visibility("default"))) int PMPI_Finalize(void);
__attribute__((visibility("default"))) int PMPI_Finalized(int *flag);
__attribute__((visibility("default"))) int PMPI_Free_mem(void *base);
__attribute__((visibility("default"))) int PMPI_Gather(void *sendbuf, int sendcount, MPI_Datatype sendtype,
                               void *recvbuf, int recvcount, MPI_Datatype recvtype,
                               int root, MPI_Comm comm);
__attribute__((visibility("default"))) int PMPI_Gatherv(void *sendbuf, int sendcount, MPI_Datatype sendtype,
                                void *recvbuf, int *recvcounts, int *displs,
                                MPI_Datatype recvtype, int root, MPI_Comm comm);
__attribute__((visibility("default"))) int PMPI_Get_address(void *location, MPI_Aint *address);
__attribute__((visibility("default"))) int PMPI_Get_count(MPI_Status *status, MPI_Datatype datatype, int *count);
__attribute__((visibility("default"))) int PMPI_Get_elements(MPI_Status *status, MPI_Datatype datatype,
                                     int *count);
__attribute__((visibility("default"))) int PMPI_Get(void *origin_addr, int origin_count,
                            MPI_Datatype origin_datatype, int target_rank,
                            MPI_Aint target_disp, int target_count,
                            MPI_Datatype target_datatype, MPI_Win win);
__attribute__((visibility("default"))) int PMPI_Get_processor_name(char *name, int *resultlen);
__attribute__((visibility("default"))) int PMPI_Get_version(int *version, int *subversion);
__attribute__((visibility("default"))) int PMPI_Graph_create(MPI_Comm comm_old, int nnodes, int *index,
                                     int *edges, int reorder, MPI_Comm *comm_graph);
__attribute__((visibility("default"))) int PMPI_Graph_get(MPI_Comm comm, int maxindex, int maxedges,
                                  int *index, int *edges);
__attribute__((visibility("default"))) int PMPI_Graph_map(MPI_Comm comm, int nnodes, int *index, int *edges,
                                  int *newrank);
__attribute__((visibility("default"))) int PMPI_Graph_neighbors_count(MPI_Comm comm, int rank, int *nneighbors);
__attribute__((visibility("default"))) int PMPI_Graph_neighbors(MPI_Comm comm, int rank, int maxneighbors,
                                        int *neighbors);
__attribute__((visibility("default"))) int PMPI_Graphdims_get(MPI_Comm comm, int *nnodes, int *nedges);
__attribute__((visibility("default"))) int PMPI_Grequest_complete(MPI_Request request);
__attribute__((visibility("default"))) int PMPI_Grequest_start(MPI_Grequest_query_function *query_fn,
                                       MPI_Grequest_free_function *free_fn,
                                       MPI_Grequest_cancel_function *cancel_fn,
                                       void *extra_state, MPI_Request *request);
__attribute__((visibility("default"))) int PMPI_Group_c2f(MPI_Group group);
__attribute__((visibility("default"))) int PMPI_Group_compare(MPI_Group group1, MPI_Group group2, int *result);
__attribute__((visibility("default"))) int PMPI_Group_difference(MPI_Group group1, MPI_Group group2,
                                         MPI_Group *newgroup);
__attribute__((visibility("default"))) int PMPI_Group_excl(MPI_Group group, int n, int *ranks,
                                   MPI_Group *newgroup);
__attribute__((visibility("default"))) MPI_Group PMPI_Group_f2c(int group);
__attribute__((visibility("default"))) int PMPI_Group_free(MPI_Group *group);
__attribute__((visibility("default"))) int PMPI_Group_incl(MPI_Group group, int n, int *ranks,
                                   MPI_Group *newgroup);
__attribute__((visibility("default"))) int PMPI_Group_intersection(MPI_Group group1, MPI_Group group2,
                                           MPI_Group *newgroup);
__attribute__((visibility("default"))) int PMPI_Group_range_excl(MPI_Group group, int n, int ranges[][3],
                                         MPI_Group *newgroup);
__attribute__((visibility("default"))) int PMPI_Group_range_incl(MPI_Group group, int n, int ranges[][3],
                                         MPI_Group *newgroup);
__attribute__((visibility("default"))) int PMPI_Group_rank(MPI_Group group, int *rank);
__attribute__((visibility("default"))) int PMPI_Group_size(MPI_Group group, int *size);
__attribute__((visibility("default"))) int PMPI_Group_translate_ranks(MPI_Group group1, int n, int *ranks1,
                                              MPI_Group group2, int *ranks2);
__attribute__((visibility("default"))) int PMPI_Group_union(MPI_Group group1, MPI_Group group2,
                                    MPI_Group *newgroup);
__attribute__((visibility("default"))) int PMPI_Ibsend(void *buf, int count, MPI_Datatype datatype, int dest,
                               int tag, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default"))) int PMPI_Info_c2f(MPI_Info info);
__attribute__((visibility("default"))) int PMPI_Info_create(MPI_Info *info);
__attribute__((visibility("default"))) int PMPI_Info_delete(MPI_Info info, char *key);
__attribute__((visibility("default"))) int PMPI_Info_dup(MPI_Info info, MPI_Info *newinfo);
__attribute__((visibility("default"))) MPI_Info PMPI_Info_f2c(int info);
__attribute__((visibility("default"))) int PMPI_Info_free(MPI_Info *info);
__attribute__((visibility("default"))) int PMPI_Info_get(MPI_Info info, char *key, int valuelen,
                                 char *value, int *flag);
__attribute__((visibility("default"))) int PMPI_Info_get_nkeys(MPI_Info info, int *nkeys);
__attribute__((visibility("default"))) int PMPI_Info_get_nthkey(MPI_Info info, int n, char *key);
__attribute__((visibility("default"))) int PMPI_Info_get_valuelen(MPI_Info info, char *key, int *valuelen,
                                          int *flag);
__attribute__((visibility("default"))) int PMPI_Info_set(MPI_Info info, char *key, char *value);
__attribute__((visibility("default"))) int PMPI_Init(int *argc, char ***argv);
__attribute__((visibility("default"))) int PMPI_Initialized(int *flag);
__attribute__((visibility("default"))) int PMPI_Init_thread(int *argc, char ***argv, int required,
                                    int *provided);
__attribute__((visibility("default"))) int PMPI_Intercomm_create(MPI_Comm local_comm, int local_leader,
                                         MPI_Comm bridge_comm, int remote_leader,
                                         int tag, MPI_Comm *newintercomm);
__attribute__((visibility("default"))) int PMPI_Intercomm_merge(MPI_Comm intercomm, int high,
                                        MPI_Comm *newintercomm);
__attribute__((visibility("default"))) int PMPI_Iprobe(int source, int tag, MPI_Comm comm, int *flag,
                               MPI_Status *status);
__attribute__((visibility("default"))) int PMPI_Irecv(void *buf, int count, MPI_Datatype datatype, int source,
                              int tag, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default"))) int PMPI_Irsend(void *buf, int count, MPI_Datatype datatype, int dest,
                               int tag, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default"))) int PMPI_Isend(void *buf, int count, MPI_Datatype datatype, int dest,
                              int tag, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default"))) int PMPI_Issend(void *buf, int count, MPI_Datatype datatype, int dest,
                               int tag, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default"))) int PMPI_Is_thread_main(int *flag);
__attribute__((visibility("default"))) int PMPI_Keyval_create(MPI_Copy_function *copy_fn,
                                      MPI_Delete_function *delete_fn,
                                      int *keyval, void *extra_state)
                                      ;
__attribute__((visibility("default"))) int PMPI_Keyval_free(int *keyval)
                                    ;
__attribute__((visibility("default"))) int PMPI_Lookup_name(char *service_name, MPI_Info info, char *port_name);
__attribute__((visibility("default"))) int PMPI_Op_c2f(MPI_Op op);
__attribute__((visibility("default"))) int PMPI_Op_commutative(MPI_Op op, int *commute);
__attribute__((visibility("default"))) int PMPI_Op_create(MPI_User_function *function, int commute, MPI_Op *op);
__attribute__((visibility("default"))) int PMPI_Open_port(MPI_Info info, char *port_name);
__attribute__((visibility("default"))) MPI_Op PMPI_Op_f2c(int op);
__attribute__((visibility("default"))) int PMPI_Op_free(MPI_Op *op);
__attribute__((visibility("default"))) int PMPI_Pack_external(char *datarep, void *inbuf, int incount,
                                      MPI_Datatype datatype, void *outbuf,
                                      MPI_Aint outsize, MPI_Aint *position);
__attribute__((visibility("default"))) int PMPI_Pack_external_size(char *datarep, int incount,
                                           MPI_Datatype datatype, MPI_Aint *size);
__attribute__((visibility("default"))) int PMPI_Pack(void *inbuf, int incount, MPI_Datatype datatype,
                             void *outbuf, int outsize, int *position, MPI_Comm comm);
__attribute__((visibility("default"))) int PMPI_Pack_size(int incount, MPI_Datatype datatype, MPI_Comm comm,
                                  int *size);
__attribute__((visibility("default"))) int PMPI_Pcontrol(const int level, ...);
__attribute__((visibility("default"))) int PMPI_Probe(int source, int tag, MPI_Comm comm, MPI_Status *status);
__attribute__((visibility("default"))) int PMPI_Publish_name(char *service_name, MPI_Info info,
                                     char *port_name);
__attribute__((visibility("default"))) int PMPI_Put(void *origin_addr, int origin_count, MPI_Datatype origin_datatype,
                            int target_rank, MPI_Aint target_disp, int target_count,
                            MPI_Datatype target_datatype, MPI_Win win);
__attribute__((visibility("default"))) int PMPI_Query_thread(int *provided);
__attribute__((visibility("default"))) int PMPI_Recv_init(void *buf, int count, MPI_Datatype datatype, int source,
                                  int tag, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default"))) int PMPI_Recv(void *buf, int count, MPI_Datatype datatype, int source,
                             int tag, MPI_Comm comm, MPI_Status *status);
__attribute__((visibility("default"))) int PMPI_Reduce(void *sendbuf, void *recvbuf, int count,
                               MPI_Datatype datatype, MPI_Op op, int root, MPI_Comm comm);
__attribute__((visibility("default"))) int PMPI_Reduce_local(void *inbuf, void *inoutbuf, int count,
                                     MPI_Datatype datatype, MPI_Op);
__attribute__((visibility("default"))) int PMPI_Reduce_scatter(void *sendbuf, void *recvbuf, int *recvcounts,
                                       MPI_Datatype datatype, MPI_Op op, MPI_Comm comm);
__attribute__((visibility("default"))) int PMPI_Register_datarep(char *datarep,
                                         MPI_Datarep_conversion_function *read_conversion_fn,
                                         MPI_Datarep_conversion_function *write_conversion_fn,
                                         MPI_Datarep_extent_function *dtype_file_extent_fn,
                                         void *extra_state);
__attribute__((visibility("default"))) int PMPI_Request_c2f(MPI_Request request);
__attribute__((visibility("default"))) MPI_Request PMPI_Request_f2c(int request);
__attribute__((visibility("default"))) int PMPI_Request_free(MPI_Request *request);
__attribute__((visibility("default"))) int PMPI_Request_get_status(MPI_Request request, int *flag,
                                           MPI_Status *status);
__attribute__((visibility("default"))) int PMPI_Rsend(void *ibuf, int count, MPI_Datatype datatype, int dest,
                              int tag, MPI_Comm comm);
__attribute__((visibility("default"))) int PMPI_Rsend_init(void *buf, int count, MPI_Datatype datatype,
                                   int dest, int tag, MPI_Comm comm,
                                   MPI_Request *request);
__attribute__((visibility("default"))) int PMPI_Scan(void *sendbuf, void *recvbuf, int count,
                             MPI_Datatype datatype, MPI_Op op, MPI_Comm comm);
__attribute__((visibility("default"))) int PMPI_Scatter(void *sendbuf, int sendcount, MPI_Datatype sendtype,
                                void *recvbuf, int recvcount, MPI_Datatype recvtype,
                                int root, MPI_Comm comm);
__attribute__((visibility("default"))) int PMPI_Scatterv(void *sendbuf, int *sendcounts, int *displs,
                                 MPI_Datatype sendtype, void *recvbuf, int recvcount,
                                 MPI_Datatype recvtype, int root, MPI_Comm comm);
__attribute__((visibility("default"))) int PMPI_Send_init(void *buf, int count, MPI_Datatype datatype,
                                  int dest, int tag, MPI_Comm comm,
                                  MPI_Request *request);
__attribute__((visibility("default"))) int PMPI_Send(void *buf, int count, MPI_Datatype datatype, int dest,
                             int tag, MPI_Comm comm);
__attribute__((visibility("default"))) int PMPI_Sendrecv(void *sendbuf, int sendcount, MPI_Datatype sendtype,
                                 int dest, int sendtag, void *recvbuf, int recvcount,
                                 MPI_Datatype recvtype, int source, int recvtag,
                                 MPI_Comm comm, MPI_Status *status);
__attribute__((visibility("default"))) int PMPI_Sendrecv_replace(void * buf, int count, MPI_Datatype datatype,
                                         int dest, int sendtag, int source, int recvtag,
                                         MPI_Comm comm, MPI_Status *status);
__attribute__((visibility("default"))) int PMPI_Ssend_init(void *buf, int count, MPI_Datatype datatype,
                                   int dest, int tag, MPI_Comm comm,
                                   MPI_Request *request);
__attribute__((visibility("default"))) int PMPI_Ssend(void *buf, int count, MPI_Datatype datatype, int dest,
                              int tag, MPI_Comm comm);
__attribute__((visibility("default"))) int PMPI_Start(MPI_Request *request);
__attribute__((visibility("default"))) int PMPI_Startall(int count, MPI_Request *array_of_requests);
__attribute__((visibility("default"))) int PMPI_Status_c2f(MPI_Status *c_status, int *f_status);
__attribute__((visibility("default"))) int PMPI_Status_f2c(int *f_status, MPI_Status *c_status);
__attribute__((visibility("default"))) int PMPI_Status_set_cancelled(MPI_Status *status, int flag);
__attribute__((visibility("default"))) int PMPI_Status_set_elements(MPI_Status *status, MPI_Datatype datatype,
                                            int count);
__attribute__((visibility("default"))) int PMPI_Testall(int count, MPI_Request array_of_requests[], int *flag,
                                MPI_Status array_of_statuses[]);
__attribute__((visibility("default"))) int PMPI_Testany(int count, MPI_Request array_of_requests[], int *index, int *flag, MPI_Status *status);
__attribute__((visibility("default"))) int PMPI_Test(MPI_Request *request, int *flag, MPI_Status *status);
__attribute__((visibility("default"))) int PMPI_Test_cancelled(MPI_Status *status, int *flag);
__attribute__((visibility("default"))) int PMPI_Testsome(int incount, MPI_Request array_of_requests[],
                                 int *outcount, int array_of_indices[],
                                 MPI_Status array_of_statuses[]);
__attribute__((visibility("default"))) int PMPI_Topo_test(MPI_Comm comm, int *status);
__attribute__((visibility("default"))) int PMPI_Type_c2f(MPI_Datatype datatype);
__attribute__((visibility("default"))) int PMPI_Type_commit(MPI_Datatype *type);
__attribute__((visibility("default"))) int PMPI_Type_contiguous(int count, MPI_Datatype oldtype,
                                        MPI_Datatype *newtype);
__attribute__((visibility("default"))) int PMPI_Type_create_darray(int size, int rank, int ndims,
                                           int gsize_array[], int distrib_array[],
                                           int darg_array[], int psize_array[],
                                           int order, MPI_Datatype oldtype,
                                           MPI_Datatype *newtype);
__attribute__((visibility("default"))) int PMPI_Type_create_f90_complex(int p, int r, MPI_Datatype *newtype);
__attribute__((visibility("default"))) int PMPI_Type_create_f90_integer(int r, MPI_Datatype *newtype);
__attribute__((visibility("default"))) int PMPI_Type_create_f90_real(int p, int r, MPI_Datatype *newtype);
__attribute__((visibility("default"))) int PMPI_Type_create_hindexed(int count, int array_of_blocklengths[],
                                             MPI_Aint array_of_displacements[],
                                             MPI_Datatype oldtype,
                                             MPI_Datatype *newtype);
__attribute__((visibility("default"))) int PMPI_Type_create_hvector(int count, int blocklength, MPI_Aint stride,
                                            MPI_Datatype oldtype,
                                            MPI_Datatype *newtype);
__attribute__((visibility("default"))) int PMPI_Type_create_keyval(MPI_Type_copy_attr_function *type_copy_attr_fn,
                                           MPI_Type_delete_attr_function *type_delete_attr_fn,
                                           int *type_keyval, void *extra_state);
__attribute__((visibility("default"))) int PMPI_Type_create_indexed_block(int count, int blocklength,
                                                  int array_of_displacements[],
                                                  MPI_Datatype oldtype,
                                                  MPI_Datatype *newtype);
__attribute__((visibility("default"))) int PMPI_Type_create_struct(int count, int array_of_block_lengths[],
                                           MPI_Aint array_of_displacements[],
                                           MPI_Datatype array_of_types[],
                                           MPI_Datatype *newtype);
__attribute__((visibility("default"))) int PMPI_Type_create_subarray(int ndims, int size_array[], int subsize_array[],
                                             int start_array[], int order,
                                             MPI_Datatype oldtype, MPI_Datatype *newtype);
__attribute__((visibility("default"))) int PMPI_Type_create_resized(MPI_Datatype oldtype, MPI_Aint lb,
                                            MPI_Aint extent, MPI_Datatype *newtype);
__attribute__((visibility("default"))) int PMPI_Type_delete_attr(MPI_Datatype type, int type_keyval);
__attribute__((visibility("default"))) int PMPI_Type_dup(MPI_Datatype type, MPI_Datatype *newtype);
__attribute__((visibility("default"))) int PMPI_Type_extent(MPI_Datatype type, MPI_Aint *extent)
                                    ;
__attribute__((visibility("default"))) int PMPI_Type_free(MPI_Datatype *type);
__attribute__((visibility("default"))) int PMPI_Type_free_keyval(int *type_keyval);
__attribute__((visibility("default"))) MPI_Datatype PMPI_Type_f2c(int datatype);
__attribute__((visibility("default"))) int PMPI_Type_get_attr(MPI_Datatype type, int type_keyval,
                                      void *attribute_val, int *flag);
__attribute__((visibility("default"))) int PMPI_Type_get_contents(MPI_Datatype mtype, int max_integers,
                                          int max_addresses, int max_datatypes,
                                          int array_of_integers[],
                                          MPI_Aint array_of_addresses[],
                                          MPI_Datatype array_of_datatypes[]);
__attribute__((visibility("default"))) int PMPI_Type_get_envelope(MPI_Datatype type, int *num_integers,
                                          int *num_addresses, int *num_datatypes,
                                          int *combiner);
__attribute__((visibility("default"))) int PMPI_Type_get_extent(MPI_Datatype type, MPI_Aint *lb,
                                        MPI_Aint *extent);
__attribute__((visibility("default"))) int PMPI_Type_get_name(MPI_Datatype type, char *type_name,
                                      int *resultlen);
__attribute__((visibility("default"))) int PMPI_Type_get_true_extent(MPI_Datatype datatype, MPI_Aint *true_lb,
                                             MPI_Aint *true_extent);
__attribute__((visibility("default"))) int PMPI_Type_hindexed(int count, int array_of_blocklengths[],
                                      MPI_Aint array_of_displacements[],
                                      MPI_Datatype oldtype, MPI_Datatype *newtype)
                                      ;
__attribute__((visibility("default"))) int PMPI_Type_hvector(int count, int blocklength, MPI_Aint stride,
                                     MPI_Datatype oldtype, MPI_Datatype *newtype)
                                     ;
__attribute__((visibility("default"))) int PMPI_Type_indexed(int count, int array_of_blocklengths[],
                                     int array_of_displacements[],
                                     MPI_Datatype oldtype, MPI_Datatype *newtype);
__attribute__((visibility("default"))) int PMPI_Type_lb(MPI_Datatype type, MPI_Aint *lb)
                                ;
__attribute__((visibility("default"))) int PMPI_Type_match_size(int typeclass, int size, MPI_Datatype *type);
__attribute__((visibility("default"))) int PMPI_Type_set_attr(MPI_Datatype type, int type_keyval,
                                      void *attr_val);
__attribute__((visibility("default"))) int PMPI_Type_set_name(MPI_Datatype type, char *type_name);
__attribute__((visibility("default"))) int PMPI_Type_size(MPI_Datatype type, int *size);
__attribute__((visibility("default"))) int PMPI_Type_struct(int count, int array_of_blocklengths[],
                                    MPI_Aint array_of_displacements[],
                                    MPI_Datatype array_of_types[],
                                    MPI_Datatype *newtype)
                                    ;
__attribute__((visibility("default"))) int PMPI_Type_ub(MPI_Datatype mtype, MPI_Aint *ub)
                                ;
__attribute__((visibility("default"))) int PMPI_Type_vector(int count, int blocklength, int stride,
                                    MPI_Datatype oldtype, MPI_Datatype *newtype);
__attribute__((visibility("default"))) int PMPI_Unpack(void *inbuf, int insize, int *position,
                               void *outbuf, int outcount, MPI_Datatype datatype,
                               MPI_Comm comm);
__attribute__((visibility("default"))) int PMPI_Unpublish_name(char *service_name, MPI_Info info,
                                       char *port_name);
__attribute__((visibility("default"))) int PMPI_Unpack_external (char *datarep, void *inbuf, MPI_Aint insize,
                                         MPI_Aint *position, void *outbuf, int outcount,
                                         MPI_Datatype datatype);
__attribute__((visibility("default"))) int PMPI_Waitall(int count, MPI_Request *array_of_requests,
                                MPI_Status *array_of_statuses);
__attribute__((visibility("default"))) int PMPI_Waitany(int count, MPI_Request *array_of_requests,
                                int *index, MPI_Status *status);
__attribute__((visibility("default"))) int PMPI_Wait(MPI_Request *request, MPI_Status *status);
__attribute__((visibility("default"))) int PMPI_Waitsome(int incount, MPI_Request *array_of_requests,
                                 int *outcount, int *array_of_indices,
                                 MPI_Status *array_of_statuses);
__attribute__((visibility("default"))) int PMPI_Win_c2f(MPI_Win win);
__attribute__((visibility("default"))) int PMPI_Win_call_errhandler(MPI_Win win, int errorcode);
__attribute__((visibility("default"))) int PMPI_Win_complete(MPI_Win win);
__attribute__((visibility("default"))) int PMPI_Win_create(void *base, MPI_Aint size, int disp_unit,
                                   MPI_Info info, MPI_Comm comm, MPI_Win *win);
__attribute__((visibility("default"))) int PMPI_Win_create_errhandler(MPI_Win_errhandler_function *function,
                                              MPI_Errhandler *errhandler);
__attribute__((visibility("default"))) int PMPI_Win_create_keyval(MPI_Win_copy_attr_function *win_copy_attr_fn,
                                          MPI_Win_delete_attr_function *win_delete_attr_fn,
                                          int *win_keyval, void *extra_state);
__attribute__((visibility("default"))) int PMPI_Win_delete_attr(MPI_Win win, int win_keyval);
__attribute__((visibility("default"))) MPI_Win PMPI_Win_f2c(int win);
__attribute__((visibility("default"))) int PMPI_Win_fence(int assert, MPI_Win win);
__attribute__((visibility("default"))) int PMPI_Win_free(MPI_Win *win);
__attribute__((visibility("default"))) int PMPI_Win_free_keyval(int *win_keyval);
__attribute__((visibility("default"))) int PMPI_Win_get_attr(MPI_Win win, int win_keyval,
                                     void *attribute_val, int *flag);
__attribute__((visibility("default"))) int PMPI_Win_get_errhandler(MPI_Win win, MPI_Errhandler *errhandler);
__attribute__((visibility("default"))) int PMPI_Win_get_group(MPI_Win win, MPI_Group *group);
__attribute__((visibility("default"))) int PMPI_Win_get_name(MPI_Win win, char *win_name, int *resultlen);
__attribute__((visibility("default"))) int PMPI_Win_lock(int lock_type, int rank, int assert, MPI_Win win);
__attribute__((visibility("default"))) int PMPI_Win_post(MPI_Group group, int assert, MPI_Win win);
__attribute__((visibility("default"))) int PMPI_Win_set_attr(MPI_Win win, int win_keyval, void *attribute_val);
__attribute__((visibility("default"))) int PMPI_Win_set_errhandler(MPI_Win win, MPI_Errhandler errhandler);
__attribute__((visibility("default"))) int PMPI_Win_set_name(MPI_Win win, char *win_name);
__attribute__((visibility("default"))) int PMPI_Win_start(MPI_Group group, int assert, MPI_Win win);
__attribute__((visibility("default"))) int PMPI_Win_test(MPI_Win win, int *flag);
__attribute__((visibility("default"))) int PMPI_Win_unlock(int rank, MPI_Win win);
__attribute__((visibility("default"))) int PMPI_Win_wait(MPI_Win win);
__attribute__((visibility("default"))) double PMPI_Wtick(void);
__attribute__((visibility("default"))) double PMPI_Wtime(void);
# 60 "/home/ymlusr/local/var/yml/DefaultExecutionCatalog/generators/XMP/include/yml_xmp_component_base.hh" 2
# 1 "/home/ymlusr/local/include/xmp.h" 1
# 25 "/home/ymlusr/local/include/xmp.h"
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h" 1 3 4
# 26 "/home/ymlusr/local/include/xmp.h" 2



typedef void* xmp_desc_t;





extern MPI_Comm xmp_get_mpi_comm(void);
extern void xmp_init_mpi(int *argc, char ***argv);
extern void xmp_finalize_mpi(void);
extern void xmp_init(int *argc, char ***argv);
extern void xmp_finalize(void);
extern int xmp_num_nodes(void);
extern int xmp_desc_kind(xmp_desc_t d, int *kind);
extern int xmp_node_num(void);
extern void xmp_barrier(void);
extern int xmp_all_num_nodes(void);
extern int xmp_all_node_num(void);
extern double xmp_wtime(void);
extern double xmp_wtick(void);
extern int xmp_array_ndims(xmp_desc_t d, int *ndims);
extern int xmp_array_lbound(xmp_desc_t d, int dim, int *lbound);
extern int xmp_array_ubound(xmp_desc_t d, int dim, int *ubound);
extern size_t xmp_array_type_size(xmp_desc_t d);
extern int xmp_array_gsize(xmp_desc_t d, int dim);
extern int xmp_array_lsize(xmp_desc_t d, int dim, int *lsize);
extern int xmp_array_gcllbound(xmp_desc_t d, int dim);
extern int xmp_array_gclubound(xmp_desc_t d, int dim);
extern int xmp_array_lcllbound(xmp_desc_t d, int dim);
extern int xmp_array_lclubound(xmp_desc_t d, int dim);
extern int xmp_array_gcglbound(xmp_desc_t d, int dim);
extern int xmp_array_gcgubound(xmp_desc_t d, int dim);
extern int xmp_array_laddr(xmp_desc_t d, void **laddr);
extern int xmp_array_lshadow(xmp_desc_t d, int dim, int *lshadow);
extern int xmp_array_ushadow(xmp_desc_t d, int dim, int *ushadow);
extern int xmp_array_owner(xmp_desc_t d, int ndims, int index[], int dim);
extern int xmp_array_lead_dim(xmp_desc_t d, int size[]);
extern int xmp_array_gtol(xmp_desc_t d, int g_idx[], int lidx[]);
extern int xmp_align_axis(xmp_desc_t d, int dim, int *axis);
extern int xmp_align_offset(xmp_desc_t d, int dim, int *offset);
extern int xmp_align_format(xmp_desc_t d, int dim);
extern int xmp_align_size(xmp_desc_t d, int dim);
extern int xmp_align_replicated(xmp_desc_t d, int dim, int *replicated);
extern int xmp_align_template(xmp_desc_t d, xmp_desc_t *dt);
extern int xmp_template_fixed(xmp_desc_t d, int *fixed);
extern int xmp_template_ndims(xmp_desc_t d, int *ndims);
extern int xmp_template_lbound(xmp_desc_t d, int dim, int *lbound);
extern int xmp_template_ubound(xmp_desc_t d, int dim, int *ubound);
extern int xmp_template_gsize(xmp_desc_t d, int dim);
extern int xmp_template_lsize(xmp_desc_t d, int dim);
extern int xmp_dist_format(xmp_desc_t d, int dim, int *format);
extern int xmp_dist_blocksize(xmp_desc_t d, int dim, int *blocksize);
extern int xmp_dist_stride(xmp_desc_t d, int dim);
extern int xmp_dist_nodes(xmp_desc_t d, xmp_desc_t *dn);
extern int xmp_dist_axis(xmp_desc_t d, int dim, int *axis);
extern int xmp_dist_gblockmap(xmp_desc_t d, int dim, int *map);
extern int xmp_nodes_ndims(xmp_desc_t d, int *ndims);
extern int xmp_nodes_index(xmp_desc_t d, int dim, int *index);
extern int xmp_nodes_size(xmp_desc_t d, int dim, int *size);
extern int xmp_nodes_rank(xmp_desc_t d, int *rank);
extern int xmp_nodes_comm(xmp_desc_t d, void **comm);
extern int xmp_nodes_equiv(xmp_desc_t d, xmp_desc_t *dn, int lb[], int ub[], int st[]);
extern void xmp_sched_template_index(int* local_start_index, int* local_end_index,
      const int global_start_index, const int global_end_index, const int step,
      const xmp_desc_t template, const int template_dim);
extern void xmp_sync_memory(const int* status);
extern void xmp_sync_all(const int* status);
extern void xmp_sync_image(const int image, int* status);
extern void xmp_sync_images(const int num, int* image_set, int* status);
extern void xmp_sync_images_all(int* status);
extern void xmp_sort_up(xmp_desc_t a_desc, xmp_desc_t b_desc);
extern void xmp_sort_down(xmp_desc_t a_desc, xmp_desc_t b_desc);
extern void *xmp_malloc(xmp_desc_t d, ...);
extern void xmp_free(xmp_desc_t d);
extern void xmp_exit(int status);
extern void xmp_atomic_define(int, int);
extern void xmp_atomic_ref(int*, int);
# 61 "/home/ymlusr/local/var/yml/DefaultExecutionCatalog/generators/XMP/include/yml_xmp_component_base.hh" 2
# 1 "/home/ymlusr/local/include/xmp_index_macro.h" 1
# 62 "/home/ymlusr/local/var/yml/DefaultExecutionCatalog/generators/XMP/include/yml_xmp_component_base.hh" 2





typedef struct{
 int size[4];
 int dataDim;
 int nodes[4];
 int nodesDim;
 int distribution[4];
 char algn[4];
 char temp[4];
}Map_Info_t;

static void parse_align(char *desc, char *algn, char *temp)
{
  int i,n;
  char *tok,*saveptr1=((void *)0),*saveptr2=((void *)0);

  tok=(__extension__ (__builtin_constant_p (":") && ((size_t)(const void *)((":") + 1) - (size_t)(const void *)(":") == 1) && ((const char *) (":"))[0] != '\0' && ((const char *) (":"))[1] == '\0' ? __strtok_r_1c (desc, ((const char *) (":"))[0], &saveptr1) : __strtok_r (desc, ":", &saveptr1)));


  if(tok[0]=='('){
    for(tok=(__extension__ (__builtin_constant_p ("(,)") && ((size_t)(const void *)(("(,)") + 1) - (size_t)(const void *)("(,)") == 1) && ((const char *) ("(,)"))[0] != '\0' && ((const char *) ("(,)"))[1] == '\0' ? __strtok_r_1c (tok, ((const char *) ("(,)"))[0], &saveptr2) : __strtok_r (tok, "(,)", &saveptr2))),i=0;tok;tok=(__extension__ (__builtin_constant_p ("(,)") && ((size_t)(const void *)(("(,)") + 1) - (size_t)(const void *)("(,)") == 1) && ((const char *) ("(,)"))[0] != '\0' && ((const char *) ("(,)"))[1] == '\0' ? __strtok_r_1c (((void *)0), ((const char *) ("(,)"))[0], &saveptr2) : __strtok_r (((void *)0), "(,)", &saveptr2))),i++){
      algn[i]=tok[0];
    }
    n=i;
    for(i=0;i<n;i++) temp[n-i-1]=algn[i];
    for(i=0;i<n;i++) algn[i] =temp[i];
  }else{
    for(tok=(__extension__ (__builtin_constant_p ("[]") && ((size_t)(const void *)(("[]") + 1) - (size_t)(const void *)("[]") == 1) && ((const char *) ("[]"))[0] != '\0' && ((const char *) ("[]"))[1] == '\0' ? __strtok_r_1c (desc, ((const char *) ("[]"))[0], &saveptr2) : __strtok_r (desc, "[]", &saveptr2))),i=0;tok;tok=(__extension__ (__builtin_constant_p ("[]") && ((size_t)(const void *)(("[]") + 1) - (size_t)(const void *)("[]") == 1) && ((const char *) ("[]"))[0] != '\0' && ((const char *) ("[]"))[1] == '\0' ? __strtok_r_1c (((void *)0), ((const char *) ("[]"))[0], &saveptr2) : __strtok_r (((void *)0), "[]", &saveptr2))),i++){
      algn[i]=tok[0];
    }
  }

  tok=(__extension__ (__builtin_constant_p (":") && ((size_t)(const void *)((":") + 1) - (size_t)(const void *)(":") == 1) && ((const char *) (":"))[0] != '\0' && ((const char *) (":"))[1] == '\0' ? __strtok_r_1c (((void *)0), ((const char *) (":"))[0], &saveptr1) : __strtok_r (((void *)0), ":", &saveptr1)));


  for(tok=(__extension__ (__builtin_constant_p ("(,)") && ((size_t)(const void *)(("(,)") + 1) - (size_t)(const void *)("(,)") == 1) && ((const char *) ("(,)"))[0] != '\0' && ((const char *) ("(,)"))[1] == '\0' ? __strtok_r_1c (tok, ((const char *) ("(,)"))[0], &saveptr2) : __strtok_r (tok, "(,)", &saveptr2))),i=0;tok;tok=(__extension__ (__builtin_constant_p ("(,)") && ((size_t)(const void *)(("(,)") + 1) - (size_t)(const void *)("(,)") == 1) && ((const char *) ("(,)"))[0] != '\0' && ((const char *) ("(,)"))[1] == '\0' ? __strtok_r_1c (((void *)0), ((const char *) ("(,)"))[0], &saveptr2) : __strtok_r (((void *)0), "(,)", &saveptr2))),i++){
    temp[i]=tok[0];
  }


  return;
}

static void parse_mapping(Map_Info_t* mapping, char *mapping_description)
{
  int i,j,len;
  char *tok1,*saveptr1,*str1;
  char *tok2,*saveptr2;

  memset(mapping,0,sizeof(Map_Info_t));


  for(i=0;i<4;i++){
    mapping->nodes[i]=1;
  }

  len=strlen(mapping_description)+1;
  str1=(char *)calloc(len,sizeof(char));
  memcpy(str1,mapping_description,len);

  for(tok1=(__extension__ (__builtin_constant_p (";") && ((size_t)(const void *)((";") + 1) - (size_t)(const void *)(";") == 1) && ((const char *) (";"))[0] != '\0' && ((const char *) (";"))[1] == '\0' ? __strtok_r_1c (str1, ((const char *) (";"))[0], &saveptr1) : __strtok_r (str1, ";", &saveptr1))),j=0; tok1; tok1=(__extension__ (__builtin_constant_p (";") && ((size_t)(const void *)((";") + 1) - (size_t)(const void *)(";") == 1) && ((const char *) (";"))[0] != '\0' && ((const char *) (";"))[1] == '\0' ? __strtok_r_1c (((void *)0), ((const char *) (";"))[0], &saveptr1) : __strtok_r (((void *)0), ";", &saveptr1))),j++){
    switch(j){
      case 0:
        for(tok2=(__extension__ (__builtin_constant_p (",") && ((size_t)(const void *)((",") + 1) - (size_t)(const void *)(",") == 1) && ((const char *) (","))[0] != '\0' && ((const char *) (","))[1] == '\0' ? __strtok_r_1c (tok1, ((const char *) (","))[0], &saveptr2) : __strtok_r (tok1, ",", &saveptr2))),i=0; tok2; tok2=(__extension__ (__builtin_constant_p (",") && ((size_t)(const void *)((",") + 1) - (size_t)(const void *)(",") == 1) && ((const char *) (","))[0] != '\0' && ((const char *) (","))[1] == '\0' ? __strtok_r_1c (((void *)0), ((const char *) (","))[0], &saveptr2) : __strtok_r (((void *)0), ",", &saveptr2))),i++){
          mapping->size[i]=strtol(tok2,((void *)0),0);
        }
        mapping->dataDim=i;
        break;
      case 1:
        for(tok2=(__extension__ (__builtin_constant_p (",") && ((size_t)(const void *)((",") + 1) - (size_t)(const void *)(",") == 1) && ((const char *) (","))[0] != '\0' && ((const char *) (","))[1] == '\0' ? __strtok_r_1c (tok1, ((const char *) (","))[0], &saveptr2) : __strtok_r (tok1, ",", &saveptr2))),i=0; tok2; tok2=(__extension__ (__builtin_constant_p (",") && ((size_t)(const void *)((",") + 1) - (size_t)(const void *)(",") == 1) && ((const char *) (","))[0] != '\0' && ((const char *) (","))[1] == '\0' ? __strtok_r_1c (((void *)0), ((const char *) (","))[0], &saveptr2) : __strtok_r (((void *)0), ",", &saveptr2))),i++){
           mapping->nodes[i]=strtol(tok2,((void *)0),0);
        }
        mapping->nodesDim=i;
        break;
      case 2:
        for(tok2=(__extension__ (__builtin_constant_p (",") && ((size_t)(const void *)((",") + 1) - (size_t)(const void *)(",") == 1) && ((const char *) (","))[0] != '\0' && ((const char *) (","))[1] == '\0' ? __strtok_r_1c (tok1, ((const char *) (","))[0], &saveptr2) : __strtok_r (tok1, ",", &saveptr2))),i=0; tok2; tok2=(__extension__ (__builtin_constant_p (",") && ((size_t)(const void *)((",") + 1) - (size_t)(const void *)(",") == 1) && ((const char *) (","))[0] != '\0' && ((const char *) (","))[1] == '\0' ? __strtok_r_1c (((void *)0), ((const char *) (","))[0], &saveptr2) : __strtok_r (((void *)0), ",", &saveptr2))),i++){
          mapping->distribution[i]=strtol(tok2,((void *)0),0);
        }
        break;
      case 3:
        parse_align(tok1,mapping->algn,mapping->temp);
        break;
      default:
        break;
    }
  }

  free(str1);
  return;
}


static int align_with(char *temp, char c, int n)
{
  int i;
  int j;

  for(i=0;i<n;i++){
    if(temp[i]==c) return i;
  }
  return -1;
}

static void create_type(Map_Info_t mapping, _Bool *exclude, int *color, int *ndims, int *size, int *array_of_sizes, int *array_of_subsizes, int *array_of_starts)
{
  int myrank,nprocs;
  int i,j,id=0,n,m;
  int n1,n2;
  int odr[4];

  memset(odr,0,4*sizeof(int));
  MPI_Comm_rank(((MPI_Comm) ((void *) &(ompi_mpi_comm_world))),&myrank);
  MPI_Comm_size(((MPI_Comm) ((void *) &(ompi_mpi_comm_world))),&nprocs);

  if(mapping.dataDim>mapping.nodesDim){
    *ndims=mapping.dataDim;

    for(i=0;i<mapping.nodesDim;i++){
      odr[i]=align_with(mapping.temp,mapping.algn[i],mapping.dataDim);
    }

    for(i=mapping.nodesDim;i<mapping.dataDim;i++){
      odr[i]=i;
    }
    *size=1;
    for(i=0;i<mapping.dataDim;i++){
      n=mapping.nodes[odr[i]];
      array_of_sizes[i] =mapping.size[i];
      array_of_subsizes[i]=(array_of_sizes[i]+n-1)/n;
      n2=1;
      for(j=0;j<odr[i];j++){
        n2*=mapping.nodes[j];
      }
      n1=n2*mapping.nodes[odr[i]];
      id=(myrank%n1)/n2;
      array_of_starts[i]=id*array_of_subsizes[i];
      if(id==n-1){
        array_of_subsizes[i]=array_of_sizes[i]-array_of_starts[i];
      }
      (*size)*=array_of_subsizes[i];
    }
  }else if(mapping.dataDim==mapping.nodesDim){
    *ndims=mapping.nodesDim;
    for(i=0;i<mapping.dataDim;i++){
      odr[i]=align_with(mapping.temp,mapping.algn[i],mapping.dataDim);
    }
    *size=1;
    for(i=0;i<mapping.dataDim;i++){
      n =mapping.nodes[odr[i]];
      array_of_sizes[i] =mapping.size[i];
      array_of_subsizes[i]=(array_of_sizes[i]+n-1)/n;

      n2=1;
      for(j=0;j<odr[i];j++){
          n2*=mapping.nodes[j];
      }
      n1=n2*mapping.nodes[odr[i]];
      id=(myrank%n1)/n2;
# 233 "/home/ymlusr/local/var/yml/DefaultExecutionCatalog/generators/XMP/include/yml_xmp_component_base.hh"
      array_of_starts[i]=id*array_of_subsizes[i];
      if(id==n-1){
         array_of_subsizes[i]=array_of_sizes[i]-array_of_starts[i];
      }
      (*size)*=array_of_subsizes[i];
    }
  }else if(mapping.dataDim<mapping.nodesDim){


    *ndims=mapping.dataDim;
    *exclude=1;

    for(i=0;i<mapping.dataDim;i++){
      odr[i]=align_with(mapping.temp,mapping.algn[i],mapping.nodesDim);
    }
    for(i=mapping.dataDim;i<mapping.nodesDim;i++){
      odr[i]=align_with(mapping.temp,'*',mapping.nodesDim);
    }

    *size=1;
    for(i=0;i<=mapping.dataDim;i++){
      n=mapping.nodes[odr[i]];
      array_of_sizes[i] =mapping.size[i];
      array_of_subsizes[i]=(array_of_sizes[i]+n-1)/n;
      n2=1;
      for(j=0;j<odr[i];j++){
          n2*=mapping.nodes[j];
      }
      n1=n2*mapping.nodes[odr[i]];
      id=(myrank%n1)/n2;
      if(i==mapping.dataDim){
        *color=id;
        break;
      }
      array_of_starts[i]=id*array_of_subsizes[i];
      if(id==n-1){
        array_of_subsizes[i]=array_of_sizes[i]-array_of_starts[i];
      }
      (*size)*=array_of_subsizes[i];
    }
  }
# 286 "/home/ymlusr/local/var/yml/DefaultExecutionCatalog/generators/XMP/include/yml_xmp_component_base.hh"
}

static _Bool type_import(void * param,char* filename,MPI_Datatype (*ptFuncType)(void), _Bool (*ptFuncImport)(void*,const char*,const MPI_Datatype, const int), char* mapping_description)
{
  int myrank,nprocs,color;
  int size,ndims;
  int array_of_sizes[4];
  int array_of_subsizes[4];
  int array_of_starts[4];
  char fullpath[256];
  _Bool status,exclude;
  FILE *fp;
  Map_Info_t mapping;
  MPI_Datatype motif;
  MPI_Comm CommExport;

  MPI_Comm_rank(((MPI_Comm) ((void *) &(ompi_mpi_comm_world))),&myrank);
  MPI_Comm_size(((MPI_Comm) ((void *) &(ompi_mpi_comm_world))),&nprocs);
  status =1;
  exclude =0;
  color =0;
  CommExport=((MPI_Comm) ((void *) &(ompi_mpi_comm_world)));

  parse_mapping(&mapping,mapping_description);

  create_type(mapping,&exclude,&color,&ndims,&size,array_of_sizes,array_of_subsizes,array_of_starts);

  if(exclude) MPI_Comm_split(((MPI_Comm) ((void *) &(ompi_mpi_comm_world))),color,myrank,&CommExport);

  MPI_Type_create_subarray(ndims,array_of_sizes,array_of_subsizes,array_of_starts,0,ptFuncType(),&motif);
  MPI_Type_commit(&motif);


  if(myrank==0){
    fp = fopen(filename,"r");
    fscanf(fp,"%s",fullpath);
    fclose(fp);
  }
  MPI_Bcast(fullpath,256,((MPI_Datatype) ((void *) &(ompi_mpi_char))),0,((MPI_Comm) ((void *) &(ompi_mpi_comm_world))));
  status= (*ptFuncImport) (param,fullpath,motif,size);

  MPI_Type_free(&motif);

  if(exclude==1) MPI_Comm_free(&CommExport);

  return status;
}

static _Bool type_export(void *param, char *filename,MPI_Datatype (*ptFuncType)(void), _Bool (*ptFuncExport)(const void*, char*,const MPI_Datatype,const int, MPI_Comm), char *mapping_description)
{
  int myrank,nprocs,color;
  int size=1;
  int ndims;
  int array_of_sizes[4];
  int array_of_subsizes[4];
  int array_of_starts[4];
  char fullpath[256];
  _Bool status,exclude;
  FILE *fp;
  Map_Info_t mapping;
  MPI_Datatype motif;
  MPI_Comm CommExport;

  MPI_Comm_rank(((MPI_Comm) ((void *) &(ompi_mpi_comm_world))),&myrank);
  MPI_Comm_size(((MPI_Comm) ((void *) &(ompi_mpi_comm_world))),&nprocs);
  status =1;
  exclude =0;
  color =0;
  CommExport=((MPI_Comm) ((void *) &(ompi_mpi_comm_world)));

  parse_mapping(&mapping,mapping_description);

  create_type(mapping,&exclude,&color,&ndims,&size,array_of_sizes,array_of_subsizes,array_of_starts);
  MPI_Type_create_subarray(ndims,array_of_sizes,array_of_subsizes,array_of_starts,0,ptFuncType(),&motif);
  MPI_Type_commit(&motif);


  if(exclude) MPI_Comm_split(((MPI_Comm) ((void *) &(ompi_mpi_comm_world))),color,myrank,&CommExport);


  if(myrank==0){
    memset(fullpath,0,256);
    fp=fopen("data_dir.txt","r");
    fscanf(fp,"%s",fullpath);
    strcat(fullpath, filename);
    fclose(fp);
  }
  MPI_Bcast(fullpath,256,((MPI_Datatype) ((void *) &(ompi_mpi_char))),0,((MPI_Comm) ((void *) &(ompi_mpi_comm_world))));

  if(color==0){
    status=(*ptFuncExport)(param,fullpath,motif,size,CommExport);
  }

  if(exclude==1) MPI_Comm_free(&CommExport);

  if(myrank==0){
    fp=fopen("output.txt","a");
    fprintf(fp,"0,%s\n",filename);
    fclose(fp);
  }

  MPI_Type_free(&motif);

  return status;
}
# 8 "/home/ymlusr/local/var/yml/dr/binaries/sousEspace.c" 2
# 1 "/home/ymlusr/local/var/yml/DefaultExecutionCatalog/generators/XMP/include/vector.xmptype.h" 1
# 18 "/home/ymlusr/local/var/yml/DefaultExecutionCatalog/generators/XMP/include/vector.xmptype.h"
typedef double XMP_vector;
typedef double* vector;


static MPI_Datatype vector_MPI_Type()
{

 return ((MPI_Datatype) ((void *) &(ompi_mpi_double)));
}



static _Bool vector_import(vector param, char* filename, const MPI_Datatype motif, const int size)
{
 int ack;
 MPI_File fh;
 MPI_Status status;


 ack = MPI_File_open(((MPI_Comm) ((void *) &(ompi_mpi_comm_world))),filename,2,((MPI_Info) ((void *) &(ompi_mpi_info_null))),&fh);

 if (ack != 42)
 {
  MPI_File_set_view(fh, 0, ((MPI_Datatype) ((void *) &(ompi_mpi_double))), motif,"native", ((MPI_Info) ((void *) &(ompi_mpi_info_null))));
  MPI_File_read_all(fh, param, size, ((MPI_Datatype) ((void *) &(ompi_mpi_double))), &status);
  MPI_File_close(&fh);
  return 1;
 }

 MPI_File_close(&fh);
 return 0;
}

static _Bool vector_export(const vector param, char* filename, const MPI_Datatype motif, const int size, MPI_Comm Communicator)
{
 int ack;
 MPI_File fh;
 MPI_Status status;

 ack = MPI_File_open(Communicator,filename,4 | 1,((MPI_Info) ((void *) &(ompi_mpi_info_null))),&fh);

 if (ack != 42)
 {
  MPI_File_set_view(fh, 0, ((MPI_Datatype) ((void *) &(ompi_mpi_double))), motif ,"native", ((MPI_Info) ((void *) &(ompi_mpi_info_null))));
  MPI_File_write_all(fh, param, size, ((MPI_Datatype) ((void *) &(ompi_mpi_double))), &status);
  MPI_File_close(&fh);
  return 1;
 }

 MPI_File_close(&fh);
 return 0;
}
# 9 "/home/ymlusr/local/var/yml/dr/binaries/sousEspace.c" 2
# 1 "/home/ymlusr/local/var/yml/DefaultExecutionCatalog/generators/XMP/include/Matrix.xmptype.h" 1
# 18 "/home/ymlusr/local/var/yml/DefaultExecutionCatalog/generators/XMP/include/Matrix.xmptype.h"
typedef double XMP_Matrix;
typedef double* Matrix;


static MPI_Datatype Matrix_MPI_Type()
{

 return ((MPI_Datatype) ((void *) &(ompi_mpi_double)));
}



static _Bool Matrix_import(Matrix param, char* filename, const MPI_Datatype motif, const int size)
{
 int ack;
 MPI_File fh;
 MPI_Status status;


 ack = MPI_File_open(((MPI_Comm) ((void *) &(ompi_mpi_comm_world))),filename,2,((MPI_Info) ((void *) &(ompi_mpi_info_null))),&fh);

 if (ack != 42)
 {
  MPI_File_set_view(fh, 0, ((MPI_Datatype) ((void *) &(ompi_mpi_double))), motif,"native", ((MPI_Info) ((void *) &(ompi_mpi_info_null))));
  MPI_File_read_all(fh, param, size, ((MPI_Datatype) ((void *) &(ompi_mpi_double))), &status);
  MPI_File_close(&fh);
  return 1;
 }

 MPI_File_close(&fh);
 return 0;
}

static _Bool Matrix_export(const Matrix param, char* filename, const MPI_Datatype motif, const int size, MPI_Comm Communicator)
{
 int ack;
 MPI_File fh;
 MPI_Status status;

 ack = MPI_File_open(Communicator,filename,4 | 1,((MPI_Info) ((void *) &(ompi_mpi_info_null))),&fh);

 if (ack != 42)
 {
  MPI_File_set_view(fh, 0, ((MPI_Datatype) ((void *) &(ompi_mpi_double))), motif ,"native", ((MPI_Info) ((void *) &(ompi_mpi_info_null))));
  MPI_File_write_all(fh, param, size, ((MPI_Datatype) ((void *) &(ompi_mpi_double))), &status);
  MPI_File_close(&fh);
  return 1;
 }

 MPI_File_close(&fh);
 return 0;
}
# 10 "/home/ymlusr/local/var/yml/dr/binaries/sousEspace.c" 2



# 12 "/home/ymlusr/local/var/yml/dr/binaries/sousEspace.c"
#pragma xmp nodes _XMP_default_nodes(1,1)
# 12 "/home/ymlusr/local/var/yml/dr/binaries/sousEspace.c"



# 14 "/home/ymlusr/local/var/yml/dr/binaries/sousEspace.c"
#pragma xmp template t(0:5,0:5)
# 14 "/home/ymlusr/local/var/yml/dr/binaries/sousEspace.c"


# 15 "/home/ymlusr/local/var/yml/dr/binaries/sousEspace.c"
#pragma xmp distribute t(block,block) onto _XMP_default_nodes
# 15 "/home/ymlusr/local/var/yml/dr/binaries/sousEspace.c"


XMP_vector c[6];

# 18 "/home/ymlusr/local/var/yml/dr/binaries/sousEspace.c"
#pragma xmp align c[i] with t(*,i)
# 18 "/home/ymlusr/local/var/yml/dr/binaries/sousEspace.c"


XMP_Matrix res[4][6];

# 21 "/home/ymlusr/local/var/yml/dr/binaries/sousEspace.c"
#pragma xmp align res[*][j] with t(j,*)
# 21 "/home/ymlusr/local/var/yml/dr/binaries/sousEspace.c"






# 1 "/usr/include/lapacke.h" 1 3 4
# 73 "/usr/include/lapacke.h" 3 4
# 1 "/usr/include/complex.h" 1 3 4
# 28 "/usr/include/complex.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathdef.h" 1 3 4
# 29 "/usr/include/complex.h" 2 3 4


# 73 "/usr/include/complex.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3 4
extern double _Complex cacos (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double _Complex __cacos (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

extern double _Complex casin (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double _Complex __casin (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

extern double _Complex catan (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double _Complex __catan (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));


extern double _Complex ccos (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double _Complex __ccos (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

extern double _Complex csin (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double _Complex __csin (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

extern double _Complex ctan (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double _Complex __ctan (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));





extern double _Complex cacosh (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double _Complex __cacosh (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

extern double _Complex casinh (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double _Complex __casinh (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

extern double _Complex catanh (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double _Complex __catanh (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));


extern double _Complex ccosh (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double _Complex __ccosh (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

extern double _Complex csinh (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double _Complex __csinh (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

extern double _Complex ctanh (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double _Complex __ctanh (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));





extern double _Complex cexp (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double _Complex __cexp (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));


extern double _Complex clog (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double _Complex __clog (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));
# 101 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3 4
extern double _Complex cpow (double _Complex __x, double _Complex __y) __attribute__ ((__nothrow__ , __leaf__)); extern double _Complex __cpow (double _Complex __x, double _Complex __y) __attribute__ ((__nothrow__ , __leaf__));


extern double _Complex csqrt (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double _Complex __csqrt (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));





extern double cabs (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double __cabs (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));


extern double carg (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double __carg (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));


extern double _Complex conj (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double _Complex __conj (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));


extern double _Complex cproj (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double _Complex __cproj (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));





extern double cimag (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double __cimag (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));


extern double creal (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double __creal (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));
# 74 "/usr/include/complex.h" 2 3 4
# 83 "/usr/include/complex.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3 4
extern float _Complex cacosf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float _Complex __cacosf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

extern float _Complex casinf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float _Complex __casinf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

extern float _Complex catanf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float _Complex __catanf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));


extern float _Complex ccosf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float _Complex __ccosf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

extern float _Complex csinf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float _Complex __csinf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

extern float _Complex ctanf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float _Complex __ctanf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));





extern float _Complex cacoshf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float _Complex __cacoshf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

extern float _Complex casinhf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float _Complex __casinhf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

extern float _Complex catanhf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float _Complex __catanhf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));


extern float _Complex ccoshf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float _Complex __ccoshf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

extern float _Complex csinhf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float _Complex __csinhf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

extern float _Complex ctanhf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float _Complex __ctanhf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));





extern float _Complex cexpf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float _Complex __cexpf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));


extern float _Complex clogf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float _Complex __clogf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));
# 101 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3 4
extern float _Complex cpowf (float _Complex __x, float _Complex __y) __attribute__ ((__nothrow__ , __leaf__)); extern float _Complex __cpowf (float _Complex __x, float _Complex __y) __attribute__ ((__nothrow__ , __leaf__));


extern float _Complex csqrtf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float _Complex __csqrtf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));





extern float cabsf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float __cabsf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));


extern float cargf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float __cargf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));


extern float _Complex conjf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float _Complex __conjf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));


extern float _Complex cprojf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float _Complex __cprojf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));





extern float cimagf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float __cimagf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));


extern float crealf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float __crealf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));
# 84 "/usr/include/complex.h" 2 3 4
# 102 "/usr/include/complex.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3 4
extern long double _Complex cacosl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double _Complex __cacosl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

extern long double _Complex casinl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double _Complex __casinl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

extern long double _Complex catanl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double _Complex __catanl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));


extern long double _Complex ccosl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double _Complex __ccosl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

extern long double _Complex csinl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double _Complex __csinl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

extern long double _Complex ctanl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double _Complex __ctanl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));





extern long double _Complex cacoshl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double _Complex __cacoshl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

extern long double _Complex casinhl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double _Complex __casinhl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

extern long double _Complex catanhl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double _Complex __catanhl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));


extern long double _Complex ccoshl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double _Complex __ccoshl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

extern long double _Complex csinhl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double _Complex __csinhl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

extern long double _Complex ctanhl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double _Complex __ctanhl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));





extern long double _Complex cexpl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double _Complex __cexpl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));


extern long double _Complex clogl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double _Complex __clogl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));
# 101 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3 4
extern long double _Complex cpowl (long double _Complex __x, long double _Complex __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double _Complex __cpowl (long double _Complex __x, long double _Complex __y) __attribute__ ((__nothrow__ , __leaf__));


extern long double _Complex csqrtl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double _Complex __csqrtl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));





extern long double cabsl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double __cabsl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));


extern long double cargl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double __cargl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));


extern long double _Complex conjl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double _Complex __conjl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));


extern long double _Complex cprojl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double _Complex __cprojl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));





extern long double cimagl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double __cimagl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));


extern long double creall (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double __creall (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));
# 103 "/usr/include/complex.h" 2 3 4








# 74 "/usr/include/lapacke.h" 2 3 4
# 85 "/usr/include/lapacke.h" 3 4
float _Complex lapack_make_complex_float( float re, float im );
# 101 "/usr/include/lapacke.h" 3 4
double _Complex lapack_make_complex_double( double re, double im );
# 129 "/usr/include/lapacke.h" 3 4
typedef int (*LAPACK_S_SELECT2) ( const float*, const float* );
typedef int (*LAPACK_S_SELECT3)
    ( const float*, const float*, const float* );
typedef int (*LAPACK_D_SELECT2) ( const double*, const double* );
typedef int (*LAPACK_D_SELECT3)
    ( const double*, const double*, const double* );

typedef int (*LAPACK_C_SELECT1) ( const float _Complex* );
typedef int (*LAPACK_C_SELECT2)
    ( const float _Complex*, const float _Complex* );
typedef int (*LAPACK_Z_SELECT1) ( const double _Complex* );
typedef int (*LAPACK_Z_SELECT2)
    ( const double _Complex*, const double _Complex* );

# 1 "/usr/include/lapacke_mangling.h" 1 3 4
# 144 "/usr/include/lapacke.h" 2 3 4


int lsame_( char* ca, char* cb,
                              int lca, int lcb );



int LAPACKE_sbdsdc( int matrix_order, char uplo, char compq,
                           int n, float* d, float* e, float* u,
                           int ldu, float* vt, int ldvt, float* q,
                           int* iq );
int LAPACKE_dbdsdc( int matrix_order, char uplo, char compq,
                           int n, double* d, double* e, double* u,
                           int ldu, double* vt, int ldvt,
                           double* q, int* iq );

int LAPACKE_sbdsqr( int matrix_order, char uplo, int n,
                           int ncvt, int nru, int ncc,
                           float* d, float* e, float* vt, int ldvt,
                           float* u, int ldu, float* c, int ldc );
int LAPACKE_dbdsqr( int matrix_order, char uplo, int n,
                           int ncvt, int nru, int ncc,
                           double* d, double* e, double* vt, int ldvt,
                           double* u, int ldu, double* c,
                           int ldc );
int LAPACKE_cbdsqr( int matrix_order, char uplo, int n,
                           int ncvt, int nru, int ncc,
                           float* d, float* e, float _Complex* vt,
                           int ldvt, float _Complex* u,
                           int ldu, float _Complex* c,
                           int ldc );
int LAPACKE_zbdsqr( int matrix_order, char uplo, int n,
                           int ncvt, int nru, int ncc,
                           double* d, double* e, double _Complex* vt,
                           int ldvt, double _Complex* u,
                           int ldu, double _Complex* c,
                           int ldc );

int LAPACKE_sdisna( char job, int m, int n, const float* d,
                           float* sep );
int LAPACKE_ddisna( char job, int m, int n,
                           const double* d, double* sep );

int LAPACKE_sgbbrd( int matrix_order, char vect, int m,
                           int n, int ncc, int kl,
                           int ku, float* ab, int ldab, float* d,
                           float* e, float* q, int ldq, float* pt,
                           int ldpt, float* c, int ldc );
int LAPACKE_dgbbrd( int matrix_order, char vect, int m,
                           int n, int ncc, int kl,
                           int ku, double* ab, int ldab,
                           double* d, double* e, double* q, int ldq,
                           double* pt, int ldpt, double* c,
                           int ldc );
int LAPACKE_cgbbrd( int matrix_order, char vect, int m,
                           int n, int ncc, int kl,
                           int ku, float _Complex* ab,
                           int ldab, float* d, float* e,
                           float _Complex* q, int ldq,
                           float _Complex* pt, int ldpt,
                           float _Complex* c, int ldc );
int LAPACKE_zgbbrd( int matrix_order, char vect, int m,
                           int n, int ncc, int kl,
                           int ku, double _Complex* ab,
                           int ldab, double* d, double* e,
                           double _Complex* q, int ldq,
                           double _Complex* pt, int ldpt,
                           double _Complex* c, int ldc );

int LAPACKE_sgbcon( int matrix_order, char norm, int n,
                           int kl, int ku, const float* ab,
                           int ldab, const int* ipiv, float anorm,
                           float* rcond );
int LAPACKE_dgbcon( int matrix_order, char norm, int n,
                           int kl, int ku, const double* ab,
                           int ldab, const int* ipiv,
                           double anorm, double* rcond );
int LAPACKE_cgbcon( int matrix_order, char norm, int n,
                           int kl, int ku,
                           const float _Complex* ab, int ldab,
                           const int* ipiv, float anorm, float* rcond );
int LAPACKE_zgbcon( int matrix_order, char norm, int n,
                           int kl, int ku,
                           const double _Complex* ab, int ldab,
                           const int* ipiv, double anorm,
                           double* rcond );

int LAPACKE_sgbequ( int matrix_order, int m, int n,
                           int kl, int ku, const float* ab,
                           int ldab, float* r, float* c, float* rowcnd,
                           float* colcnd, float* amax );
int LAPACKE_dgbequ( int matrix_order, int m, int n,
                           int kl, int ku, const double* ab,
                           int ldab, double* r, double* c,
                           double* rowcnd, double* colcnd, double* amax );
int LAPACKE_cgbequ( int matrix_order, int m, int n,
                           int kl, int ku,
                           const float _Complex* ab, int ldab,
                           float* r, float* c, float* rowcnd, float* colcnd,
                           float* amax );
int LAPACKE_zgbequ( int matrix_order, int m, int n,
                           int kl, int ku,
                           const double _Complex* ab, int ldab,
                           double* r, double* c, double* rowcnd, double* colcnd,
                           double* amax );

int LAPACKE_sgbequb( int matrix_order, int m, int n,
                            int kl, int ku, const float* ab,
                            int ldab, float* r, float* c, float* rowcnd,
                            float* colcnd, float* amax );
int LAPACKE_dgbequb( int matrix_order, int m, int n,
                            int kl, int ku, const double* ab,
                            int ldab, double* r, double* c,
                            double* rowcnd, double* colcnd, double* amax );
int LAPACKE_cgbequb( int matrix_order, int m, int n,
                            int kl, int ku,
                            const float _Complex* ab, int ldab,
                            float* r, float* c, float* rowcnd, float* colcnd,
                            float* amax );
int LAPACKE_zgbequb( int matrix_order, int m, int n,
                            int kl, int ku,
                            const double _Complex* ab, int ldab,
                            double* r, double* c, double* rowcnd,
                            double* colcnd, double* amax );

int LAPACKE_sgbrfs( int matrix_order, char trans, int n,
                           int kl, int ku, int nrhs,
                           const float* ab, int ldab, const float* afb,
                           int ldafb, const int* ipiv,
                           const float* b, int ldb, float* x,
                           int ldx, float* ferr, float* berr );
int LAPACKE_dgbrfs( int matrix_order, char trans, int n,
                           int kl, int ku, int nrhs,
                           const double* ab, int ldab, const double* afb,
                           int ldafb, const int* ipiv,
                           const double* b, int ldb, double* x,
                           int ldx, double* ferr, double* berr );
int LAPACKE_cgbrfs( int matrix_order, char trans, int n,
                           int kl, int ku, int nrhs,
                           const float _Complex* ab, int ldab,
                           const float _Complex* afb, int ldafb,
                           const int* ipiv,
                           const float _Complex* b, int ldb,
                           float _Complex* x, int ldx, float* ferr,
                           float* berr );
int LAPACKE_zgbrfs( int matrix_order, char trans, int n,
                           int kl, int ku, int nrhs,
                           const double _Complex* ab, int ldab,
                           const double _Complex* afb, int ldafb,
                           const int* ipiv,
                           const double _Complex* b, int ldb,
                           double _Complex* x, int ldx,
                           double* ferr, double* berr );

int LAPACKE_sgbrfsx( int matrix_order, char trans, char equed,
                            int n, int kl, int ku,
                            int nrhs, const float* ab, int ldab,
                            const float* afb, int ldafb,
                            const int* ipiv, const float* r,
                            const float* c, const float* b, int ldb,
                            float* x, int ldx, float* rcond, float* berr,
                            int n_err_bnds, float* err_bnds_norm,
                            float* err_bnds_comp, int nparams,
                            float* params );
int LAPACKE_dgbrfsx( int matrix_order, char trans, char equed,
                            int n, int kl, int ku,
                            int nrhs, const double* ab, int ldab,
                            const double* afb, int ldafb,
                            const int* ipiv, const double* r,
                            const double* c, const double* b, int ldb,
                            double* x, int ldx, double* rcond,
                            double* berr, int n_err_bnds,
                            double* err_bnds_norm, double* err_bnds_comp,
                            int nparams, double* params );
int LAPACKE_cgbrfsx( int matrix_order, char trans, char equed,
                            int n, int kl, int ku,
                            int nrhs, const float _Complex* ab,
                            int ldab, const float _Complex* afb,
                            int ldafb, const int* ipiv,
                            const float* r, const float* c,
                            const float _Complex* b, int ldb,
                            float _Complex* x, int ldx,
                            float* rcond, float* berr, int n_err_bnds,
                            float* err_bnds_norm, float* err_bnds_comp,
                            int nparams, float* params );
int LAPACKE_zgbrfsx( int matrix_order, char trans, char equed,
                            int n, int kl, int ku,
                            int nrhs, const double _Complex* ab,
                            int ldab, const double _Complex* afb,
                            int ldafb, const int* ipiv,
                            const double* r, const double* c,
                            const double _Complex* b, int ldb,
                            double _Complex* x, int ldx,
                            double* rcond, double* berr, int n_err_bnds,
                            double* err_bnds_norm, double* err_bnds_comp,
                            int nparams, double* params );

int LAPACKE_sgbsv( int matrix_order, int n, int kl,
                          int ku, int nrhs, float* ab,
                          int ldab, int* ipiv, float* b,
                          int ldb );
int LAPACKE_dgbsv( int matrix_order, int n, int kl,
                          int ku, int nrhs, double* ab,
                          int ldab, int* ipiv, double* b,
                          int ldb );
int LAPACKE_cgbsv( int matrix_order, int n, int kl,
                          int ku, int nrhs,
                          float _Complex* ab, int ldab,
                          int* ipiv, float _Complex* b,
                          int ldb );
int LAPACKE_zgbsv( int matrix_order, int n, int kl,
                          int ku, int nrhs,
                          double _Complex* ab, int ldab,
                          int* ipiv, double _Complex* b,
                          int ldb );

int LAPACKE_sgbsvx( int matrix_order, char fact, char trans,
                           int n, int kl, int ku,
                           int nrhs, float* ab, int ldab,
                           float* afb, int ldafb, int* ipiv,
                           char* equed, float* r, float* c, float* b,
                           int ldb, float* x, int ldx,
                           float* rcond, float* ferr, float* berr,
                           float* rpivot );
int LAPACKE_dgbsvx( int matrix_order, char fact, char trans,
                           int n, int kl, int ku,
                           int nrhs, double* ab, int ldab,
                           double* afb, int ldafb, int* ipiv,
                           char* equed, double* r, double* c, double* b,
                           int ldb, double* x, int ldx,
                           double* rcond, double* ferr, double* berr,
                           double* rpivot );
int LAPACKE_cgbsvx( int matrix_order, char fact, char trans,
                           int n, int kl, int ku,
                           int nrhs, float _Complex* ab,
                           int ldab, float _Complex* afb,
                           int ldafb, int* ipiv, char* equed,
                           float* r, float* c, float _Complex* b,
                           int ldb, float _Complex* x,
                           int ldx, float* rcond, float* ferr,
                           float* berr, float* rpivot );
int LAPACKE_zgbsvx( int matrix_order, char fact, char trans,
                           int n, int kl, int ku,
                           int nrhs, double _Complex* ab,
                           int ldab, double _Complex* afb,
                           int ldafb, int* ipiv, char* equed,
                           double* r, double* c, double _Complex* b,
                           int ldb, double _Complex* x,
                           int ldx, double* rcond, double* ferr,
                           double* berr, double* rpivot );

int LAPACKE_sgbsvxx( int matrix_order, char fact, char trans,
                            int n, int kl, int ku,
                            int nrhs, float* ab, int ldab,
                            float* afb, int ldafb, int* ipiv,
                            char* equed, float* r, float* c, float* b,
                            int ldb, float* x, int ldx,
                            float* rcond, float* rpvgrw, float* berr,
                            int n_err_bnds, float* err_bnds_norm,
                            float* err_bnds_comp, int nparams,
                            float* params );
int LAPACKE_dgbsvxx( int matrix_order, char fact, char trans,
                            int n, int kl, int ku,
                            int nrhs, double* ab, int ldab,
                            double* afb, int ldafb, int* ipiv,
                            char* equed, double* r, double* c, double* b,
                            int ldb, double* x, int ldx,
                            double* rcond, double* rpvgrw, double* berr,
                            int n_err_bnds, double* err_bnds_norm,
                            double* err_bnds_comp, int nparams,
                            double* params );
int LAPACKE_cgbsvxx( int matrix_order, char fact, char trans,
                            int n, int kl, int ku,
                            int nrhs, float _Complex* ab,
                            int ldab, float _Complex* afb,
                            int ldafb, int* ipiv, char* equed,
                            float* r, float* c, float _Complex* b,
                            int ldb, float _Complex* x,
                            int ldx, float* rcond, float* rpvgrw,
                            float* berr, int n_err_bnds,
                            float* err_bnds_norm, float* err_bnds_comp,
                            int nparams, float* params );
int LAPACKE_zgbsvxx( int matrix_order, char fact, char trans,
                            int n, int kl, int ku,
                            int nrhs, double _Complex* ab,
                            int ldab, double _Complex* afb,
                            int ldafb, int* ipiv, char* equed,
                            double* r, double* c, double _Complex* b,
                            int ldb, double _Complex* x,
                            int ldx, double* rcond, double* rpvgrw,
                            double* berr, int n_err_bnds,
                            double* err_bnds_norm, double* err_bnds_comp,
                            int nparams, double* params );

int LAPACKE_sgbtrf( int matrix_order, int m, int n,
                           int kl, int ku, float* ab,
                           int ldab, int* ipiv );
int LAPACKE_dgbtrf( int matrix_order, int m, int n,
                           int kl, int ku, double* ab,
                           int ldab, int* ipiv );
int LAPACKE_cgbtrf( int matrix_order, int m, int n,
                           int kl, int ku,
                           float _Complex* ab, int ldab,
                           int* ipiv );
int LAPACKE_zgbtrf( int matrix_order, int m, int n,
                           int kl, int ku,
                           double _Complex* ab, int ldab,
                           int* ipiv );

int LAPACKE_sgbtrs( int matrix_order, char trans, int n,
                           int kl, int ku, int nrhs,
                           const float* ab, int ldab,
                           const int* ipiv, float* b, int ldb );
int LAPACKE_dgbtrs( int matrix_order, char trans, int n,
                           int kl, int ku, int nrhs,
                           const double* ab, int ldab,
                           const int* ipiv, double* b, int ldb );
int LAPACKE_cgbtrs( int matrix_order, char trans, int n,
                           int kl, int ku, int nrhs,
                           const float _Complex* ab, int ldab,
                           const int* ipiv, float _Complex* b,
                           int ldb );
int LAPACKE_zgbtrs( int matrix_order, char trans, int n,
                           int kl, int ku, int nrhs,
                           const double _Complex* ab, int ldab,
                           const int* ipiv, double _Complex* b,
                           int ldb );

int LAPACKE_sgebak( int matrix_order, char job, char side, int n,
                           int ilo, int ihi, const float* scale,
                           int m, float* v, int ldv );
int LAPACKE_dgebak( int matrix_order, char job, char side, int n,
                           int ilo, int ihi, const double* scale,
                           int m, double* v, int ldv );
int LAPACKE_cgebak( int matrix_order, char job, char side, int n,
                           int ilo, int ihi, const float* scale,
                           int m, float _Complex* v,
                           int ldv );
int LAPACKE_zgebak( int matrix_order, char job, char side, int n,
                           int ilo, int ihi, const double* scale,
                           int m, double _Complex* v,
                           int ldv );

int LAPACKE_sgebal( int matrix_order, char job, int n, float* a,
                           int lda, int* ilo, int* ihi,
                           float* scale );
int LAPACKE_dgebal( int matrix_order, char job, int n, double* a,
                           int lda, int* ilo, int* ihi,
                           double* scale );
int LAPACKE_cgebal( int matrix_order, char job, int n,
                           float _Complex* a, int lda,
                           int* ilo, int* ihi, float* scale );
int LAPACKE_zgebal( int matrix_order, char job, int n,
                           double _Complex* a, int lda,
                           int* ilo, int* ihi, double* scale );

int LAPACKE_sgebrd( int matrix_order, int m, int n,
                           float* a, int lda, float* d, float* e,
                           float* tauq, float* taup );
int LAPACKE_dgebrd( int matrix_order, int m, int n,
                           double* a, int lda, double* d, double* e,
                           double* tauq, double* taup );
int LAPACKE_cgebrd( int matrix_order, int m, int n,
                           float _Complex* a, int lda, float* d,
                           float* e, float _Complex* tauq,
                           float _Complex* taup );
int LAPACKE_zgebrd( int matrix_order, int m, int n,
                           double _Complex* a, int lda, double* d,
                           double* e, double _Complex* tauq,
                           double _Complex* taup );

int LAPACKE_sgecon( int matrix_order, char norm, int n,
                           const float* a, int lda, float anorm,
                           float* rcond );
int LAPACKE_dgecon( int matrix_order, char norm, int n,
                           const double* a, int lda, double anorm,
                           double* rcond );
int LAPACKE_cgecon( int matrix_order, char norm, int n,
                           const float _Complex* a, int lda,
                           float anorm, float* rcond );
int LAPACKE_zgecon( int matrix_order, char norm, int n,
                           const double _Complex* a, int lda,
                           double anorm, double* rcond );

int LAPACKE_sgeequ( int matrix_order, int m, int n,
                           const float* a, int lda, float* r, float* c,
                           float* rowcnd, float* colcnd, float* amax );
int LAPACKE_dgeequ( int matrix_order, int m, int n,
                           const double* a, int lda, double* r,
                           double* c, double* rowcnd, double* colcnd,
                           double* amax );
int LAPACKE_cgeequ( int matrix_order, int m, int n,
                           const float _Complex* a, int lda,
                           float* r, float* c, float* rowcnd, float* colcnd,
                           float* amax );
int LAPACKE_zgeequ( int matrix_order, int m, int n,
                           const double _Complex* a, int lda,
                           double* r, double* c, double* rowcnd, double* colcnd,
                           double* amax );

int LAPACKE_sgeequb( int matrix_order, int m, int n,
                            const float* a, int lda, float* r, float* c,
                            float* rowcnd, float* colcnd, float* amax );
int LAPACKE_dgeequb( int matrix_order, int m, int n,
                            const double* a, int lda, double* r,
                            double* c, double* rowcnd, double* colcnd,
                            double* amax );
int LAPACKE_cgeequb( int matrix_order, int m, int n,
                            const float _Complex* a, int lda,
                            float* r, float* c, float* rowcnd, float* colcnd,
                            float* amax );
int LAPACKE_zgeequb( int matrix_order, int m, int n,
                            const double _Complex* a, int lda,
                            double* r, double* c, double* rowcnd,
                            double* colcnd, double* amax );

int LAPACKE_sgees( int matrix_order, char jobvs, char sort,
                          LAPACK_S_SELECT2 select, int n, float* a,
                          int lda, int* sdim, float* wr,
                          float* wi, float* vs, int ldvs );
int LAPACKE_dgees( int matrix_order, char jobvs, char sort,
                          LAPACK_D_SELECT2 select, int n, double* a,
                          int lda, int* sdim, double* wr,
                          double* wi, double* vs, int ldvs );
int LAPACKE_cgees( int matrix_order, char jobvs, char sort,
                          LAPACK_C_SELECT1 select, int n,
                          float _Complex* a, int lda,
                          int* sdim, float _Complex* w,
                          float _Complex* vs, int ldvs );
int LAPACKE_zgees( int matrix_order, char jobvs, char sort,
                          LAPACK_Z_SELECT1 select, int n,
                          double _Complex* a, int lda,
                          int* sdim, double _Complex* w,
                          double _Complex* vs, int ldvs );

int LAPACKE_sgeesx( int matrix_order, char jobvs, char sort,
                           LAPACK_S_SELECT2 select, char sense, int n,
                           float* a, int lda, int* sdim,
                           float* wr, float* wi, float* vs, int ldvs,
                           float* rconde, float* rcondv );
int LAPACKE_dgeesx( int matrix_order, char jobvs, char sort,
                           LAPACK_D_SELECT2 select, char sense, int n,
                           double* a, int lda, int* sdim,
                           double* wr, double* wi, double* vs, int ldvs,
                           double* rconde, double* rcondv );
int LAPACKE_cgeesx( int matrix_order, char jobvs, char sort,
                           LAPACK_C_SELECT1 select, char sense, int n,
                           float _Complex* a, int lda,
                           int* sdim, float _Complex* w,
                           float _Complex* vs, int ldvs,
                           float* rconde, float* rcondv );
int LAPACKE_zgeesx( int matrix_order, char jobvs, char sort,
                           LAPACK_Z_SELECT1 select, char sense, int n,
                           double _Complex* a, int lda,
                           int* sdim, double _Complex* w,
                           double _Complex* vs, int ldvs,
                           double* rconde, double* rcondv );

int LAPACKE_sgeev( int matrix_order, char jobvl, char jobvr,
                          int n, float* a, int lda, float* wr,
                          float* wi, float* vl, int ldvl, float* vr,
                          int ldvr );
int LAPACKE_dgeev( int matrix_order, char jobvl, char jobvr,
                          int n, double* a, int lda, double* wr,
                          double* wi, double* vl, int ldvl, double* vr,
                          int ldvr );
int LAPACKE_cgeev( int matrix_order, char jobvl, char jobvr,
                          int n, float _Complex* a, int lda,
                          float _Complex* w, float _Complex* vl,
                          int ldvl, float _Complex* vr,
                          int ldvr );
int LAPACKE_zgeev( int matrix_order, char jobvl, char jobvr,
                          int n, double _Complex* a,
                          int lda, double _Complex* w,
                          double _Complex* vl, int ldvl,
                          double _Complex* vr, int ldvr );

int LAPACKE_sgeevx( int matrix_order, char balanc, char jobvl,
                           char jobvr, char sense, int n, float* a,
                           int lda, float* wr, float* wi, float* vl,
                           int ldvl, float* vr, int ldvr,
                           int* ilo, int* ihi, float* scale,
                           float* abnrm, float* rconde, float* rcondv );
int LAPACKE_dgeevx( int matrix_order, char balanc, char jobvl,
                           char jobvr, char sense, int n, double* a,
                           int lda, double* wr, double* wi, double* vl,
                           int ldvl, double* vr, int ldvr,
                           int* ilo, int* ihi, double* scale,
                           double* abnrm, double* rconde, double* rcondv );
int LAPACKE_cgeevx( int matrix_order, char balanc, char jobvl,
                           char jobvr, char sense, int n,
                           float _Complex* a, int lda,
                           float _Complex* w, float _Complex* vl,
                           int ldvl, float _Complex* vr,
                           int ldvr, int* ilo, int* ihi,
                           float* scale, float* abnrm, float* rconde,
                           float* rcondv );
int LAPACKE_zgeevx( int matrix_order, char balanc, char jobvl,
                           char jobvr, char sense, int n,
                           double _Complex* a, int lda,
                           double _Complex* w, double _Complex* vl,
                           int ldvl, double _Complex* vr,
                           int ldvr, int* ilo, int* ihi,
                           double* scale, double* abnrm, double* rconde,
                           double* rcondv );

int LAPACKE_sgehrd( int matrix_order, int n, int ilo,
                           int ihi, float* a, int lda,
                           float* tau );
int LAPACKE_dgehrd( int matrix_order, int n, int ilo,
                           int ihi, double* a, int lda,
                           double* tau );
int LAPACKE_cgehrd( int matrix_order, int n, int ilo,
                           int ihi, float _Complex* a,
                           int lda, float _Complex* tau );
int LAPACKE_zgehrd( int matrix_order, int n, int ilo,
                           int ihi, double _Complex* a,
                           int lda, double _Complex* tau );

int LAPACKE_sgejsv( int matrix_order, char joba, char jobu, char jobv,
                           char jobr, char jobt, char jobp, int m,
                           int n, float* a, int lda, float* sva,
                           float* u, int ldu, float* v, int ldv,
                           float* stat, int* istat );
int LAPACKE_dgejsv( int matrix_order, char joba, char jobu, char jobv,
                           char jobr, char jobt, char jobp, int m,
                           int n, double* a, int lda, double* sva,
                           double* u, int ldu, double* v, int ldv,
                           double* stat, int* istat );

int LAPACKE_sgelq2( int matrix_order, int m, int n,
                           float* a, int lda, float* tau );
int LAPACKE_dgelq2( int matrix_order, int m, int n,
                           double* a, int lda, double* tau );
int LAPACKE_cgelq2( int matrix_order, int m, int n,
                           float _Complex* a, int lda,
                           float _Complex* tau );
int LAPACKE_zgelq2( int matrix_order, int m, int n,
                           double _Complex* a, int lda,
                           double _Complex* tau );

int LAPACKE_sgelqf( int matrix_order, int m, int n,
                           float* a, int lda, float* tau );
int LAPACKE_dgelqf( int matrix_order, int m, int n,
                           double* a, int lda, double* tau );
int LAPACKE_cgelqf( int matrix_order, int m, int n,
                           float _Complex* a, int lda,
                           float _Complex* tau );
int LAPACKE_zgelqf( int matrix_order, int m, int n,
                           double _Complex* a, int lda,
                           double _Complex* tau );

int LAPACKE_sgels( int matrix_order, char trans, int m,
                          int n, int nrhs, float* a,
                          int lda, float* b, int ldb );
int LAPACKE_dgels( int matrix_order, char trans, int m,
                          int n, int nrhs, double* a,
                          int lda, double* b, int ldb );
int LAPACKE_cgels( int matrix_order, char trans, int m,
                          int n, int nrhs,
                          float _Complex* a, int lda,
                          float _Complex* b, int ldb );
int LAPACKE_zgels( int matrix_order, char trans, int m,
                          int n, int nrhs,
                          double _Complex* a, int lda,
                          double _Complex* b, int ldb );

int LAPACKE_sgelsd( int matrix_order, int m, int n,
                           int nrhs, float* a, int lda, float* b,
                           int ldb, float* s, float rcond,
                           int* rank );
int LAPACKE_dgelsd( int matrix_order, int m, int n,
                           int nrhs, double* a, int lda,
                           double* b, int ldb, double* s, double rcond,
                           int* rank );
int LAPACKE_cgelsd( int matrix_order, int m, int n,
                           int nrhs, float _Complex* a,
                           int lda, float _Complex* b,
                           int ldb, float* s, float rcond,
                           int* rank );
int LAPACKE_zgelsd( int matrix_order, int m, int n,
                           int nrhs, double _Complex* a,
                           int lda, double _Complex* b,
                           int ldb, double* s, double rcond,
                           int* rank );

int LAPACKE_sgelss( int matrix_order, int m, int n,
                           int nrhs, float* a, int lda, float* b,
                           int ldb, float* s, float rcond,
                           int* rank );
int LAPACKE_dgelss( int matrix_order, int m, int n,
                           int nrhs, double* a, int lda,
                           double* b, int ldb, double* s, double rcond,
                           int* rank );
int LAPACKE_cgelss( int matrix_order, int m, int n,
                           int nrhs, float _Complex* a,
                           int lda, float _Complex* b,
                           int ldb, float* s, float rcond,
                           int* rank );
int LAPACKE_zgelss( int matrix_order, int m, int n,
                           int nrhs, double _Complex* a,
                           int lda, double _Complex* b,
                           int ldb, double* s, double rcond,
                           int* rank );

int LAPACKE_sgelsy( int matrix_order, int m, int n,
                           int nrhs, float* a, int lda, float* b,
                           int ldb, int* jpvt, float rcond,
                           int* rank );
int LAPACKE_dgelsy( int matrix_order, int m, int n,
                           int nrhs, double* a, int lda,
                           double* b, int ldb, int* jpvt,
                           double rcond, int* rank );
int LAPACKE_cgelsy( int matrix_order, int m, int n,
                           int nrhs, float _Complex* a,
                           int lda, float _Complex* b,
                           int ldb, int* jpvt, float rcond,
                           int* rank );
int LAPACKE_zgelsy( int matrix_order, int m, int n,
                           int nrhs, double _Complex* a,
                           int lda, double _Complex* b,
                           int ldb, int* jpvt, double rcond,
                           int* rank );

int LAPACKE_sgeqlf( int matrix_order, int m, int n,
                           float* a, int lda, float* tau );
int LAPACKE_dgeqlf( int matrix_order, int m, int n,
                           double* a, int lda, double* tau );
int LAPACKE_cgeqlf( int matrix_order, int m, int n,
                           float _Complex* a, int lda,
                           float _Complex* tau );
int LAPACKE_zgeqlf( int matrix_order, int m, int n,
                           double _Complex* a, int lda,
                           double _Complex* tau );

int LAPACKE_sgeqp3( int matrix_order, int m, int n,
                           float* a, int lda, int* jpvt,
                           float* tau );
int LAPACKE_dgeqp3( int matrix_order, int m, int n,
                           double* a, int lda, int* jpvt,
                           double* tau );
int LAPACKE_cgeqp3( int matrix_order, int m, int n,
                           float _Complex* a, int lda,
                           int* jpvt, float _Complex* tau );
int LAPACKE_zgeqp3( int matrix_order, int m, int n,
                           double _Complex* a, int lda,
                           int* jpvt, double _Complex* tau );

int LAPACKE_sgeqpf( int matrix_order, int m, int n,
                           float* a, int lda, int* jpvt,
                           float* tau );
int LAPACKE_dgeqpf( int matrix_order, int m, int n,
                           double* a, int lda, int* jpvt,
                           double* tau );
int LAPACKE_cgeqpf( int matrix_order, int m, int n,
                           float _Complex* a, int lda,
                           int* jpvt, float _Complex* tau );
int LAPACKE_zgeqpf( int matrix_order, int m, int n,
                           double _Complex* a, int lda,
                           int* jpvt, double _Complex* tau );

int LAPACKE_sgeqr2( int matrix_order, int m, int n,
                           float* a, int lda, float* tau );
int LAPACKE_dgeqr2( int matrix_order, int m, int n,
                           double* a, int lda, double* tau );
int LAPACKE_cgeqr2( int matrix_order, int m, int n,
                           float _Complex* a, int lda,
                           float _Complex* tau );
int LAPACKE_zgeqr2( int matrix_order, int m, int n,
                           double _Complex* a, int lda,
                           double _Complex* tau );

int LAPACKE_sgeqrf( int matrix_order, int m, int n,
                           float* a, int lda, float* tau );
int LAPACKE_dgeqrf( int matrix_order, int m, int n,
                           double* a, int lda, double* tau );
int LAPACKE_cgeqrf( int matrix_order, int m, int n,
                           float _Complex* a, int lda,
                           float _Complex* tau );
int LAPACKE_zgeqrf( int matrix_order, int m, int n,
                           double _Complex* a, int lda,
                           double _Complex* tau );

int LAPACKE_sgeqrfp( int matrix_order, int m, int n,
                            float* a, int lda, float* tau );
int LAPACKE_dgeqrfp( int matrix_order, int m, int n,
                            double* a, int lda, double* tau );
int LAPACKE_cgeqrfp( int matrix_order, int m, int n,
                            float _Complex* a, int lda,
                            float _Complex* tau );
int LAPACKE_zgeqrfp( int matrix_order, int m, int n,
                            double _Complex* a, int lda,
                            double _Complex* tau );

int LAPACKE_sgerfs( int matrix_order, char trans, int n,
                           int nrhs, const float* a, int lda,
                           const float* af, int ldaf,
                           const int* ipiv, const float* b,
                           int ldb, float* x, int ldx,
                           float* ferr, float* berr );
int LAPACKE_dgerfs( int matrix_order, char trans, int n,
                           int nrhs, const double* a, int lda,
                           const double* af, int ldaf,
                           const int* ipiv, const double* b,
                           int ldb, double* x, int ldx,
                           double* ferr, double* berr );
int LAPACKE_cgerfs( int matrix_order, char trans, int n,
                           int nrhs, const float _Complex* a,
                           int lda, const float _Complex* af,
                           int ldaf, const int* ipiv,
                           const float _Complex* b, int ldb,
                           float _Complex* x, int ldx, float* ferr,
                           float* berr );
int LAPACKE_zgerfs( int matrix_order, char trans, int n,
                           int nrhs, const double _Complex* a,
                           int lda, const double _Complex* af,
                           int ldaf, const int* ipiv,
                           const double _Complex* b, int ldb,
                           double _Complex* x, int ldx,
                           double* ferr, double* berr );

int LAPACKE_sgerfsx( int matrix_order, char trans, char equed,
                            int n, int nrhs, const float* a,
                            int lda, const float* af, int ldaf,
                            const int* ipiv, const float* r,
                            const float* c, const float* b, int ldb,
                            float* x, int ldx, float* rcond, float* berr,
                            int n_err_bnds, float* err_bnds_norm,
                            float* err_bnds_comp, int nparams,
                            float* params );
int LAPACKE_dgerfsx( int matrix_order, char trans, char equed,
                            int n, int nrhs, const double* a,
                            int lda, const double* af, int ldaf,
                            const int* ipiv, const double* r,
                            const double* c, const double* b, int ldb,
                            double* x, int ldx, double* rcond,
                            double* berr, int n_err_bnds,
                            double* err_bnds_norm, double* err_bnds_comp,
                            int nparams, double* params );
int LAPACKE_cgerfsx( int matrix_order, char trans, char equed,
                            int n, int nrhs,
                            const float _Complex* a, int lda,
                            const float _Complex* af, int ldaf,
                            const int* ipiv, const float* r,
                            const float* c, const float _Complex* b,
                            int ldb, float _Complex* x,
                            int ldx, float* rcond, float* berr,
                            int n_err_bnds, float* err_bnds_norm,
                            float* err_bnds_comp, int nparams,
                            float* params );
int LAPACKE_zgerfsx( int matrix_order, char trans, char equed,
                            int n, int nrhs,
                            const double _Complex* a, int lda,
                            const double _Complex* af, int ldaf,
                            const int* ipiv, const double* r,
                            const double* c, const double _Complex* b,
                            int ldb, double _Complex* x,
                            int ldx, double* rcond, double* berr,
                            int n_err_bnds, double* err_bnds_norm,
                            double* err_bnds_comp, int nparams,
                            double* params );

int LAPACKE_sgerqf( int matrix_order, int m, int n,
                           float* a, int lda, float* tau );
int LAPACKE_dgerqf( int matrix_order, int m, int n,
                           double* a, int lda, double* tau );
int LAPACKE_cgerqf( int matrix_order, int m, int n,
                           float _Complex* a, int lda,
                           float _Complex* tau );
int LAPACKE_zgerqf( int matrix_order, int m, int n,
                           double _Complex* a, int lda,
                           double _Complex* tau );

int LAPACKE_sgesdd( int matrix_order, char jobz, int m,
                           int n, float* a, int lda, float* s,
                           float* u, int ldu, float* vt,
                           int ldvt );
int LAPACKE_dgesdd( int matrix_order, char jobz, int m,
                           int n, double* a, int lda, double* s,
                           double* u, int ldu, double* vt,
                           int ldvt );
int LAPACKE_cgesdd( int matrix_order, char jobz, int m,
                           int n, float _Complex* a,
                           int lda, float* s, float _Complex* u,
                           int ldu, float _Complex* vt,
                           int ldvt );
int LAPACKE_zgesdd( int matrix_order, char jobz, int m,
                           int n, double _Complex* a,
                           int lda, double* s, double _Complex* u,
                           int ldu, double _Complex* vt,
                           int ldvt );

int LAPACKE_sgesv( int matrix_order, int n, int nrhs,
                          float* a, int lda, int* ipiv, float* b,
                          int ldb );
int LAPACKE_dgesv( int matrix_order, int n, int nrhs,
                          double* a, int lda, int* ipiv,
                          double* b, int ldb );
int LAPACKE_cgesv( int matrix_order, int n, int nrhs,
                          float _Complex* a, int lda,
                          int* ipiv, float _Complex* b,
                          int ldb );
int LAPACKE_zgesv( int matrix_order, int n, int nrhs,
                          double _Complex* a, int lda,
                          int* ipiv, double _Complex* b,
                          int ldb );
int LAPACKE_dsgesv( int matrix_order, int n, int nrhs,
                           double* a, int lda, int* ipiv,
                           double* b, int ldb, double* x, int ldx,
                           int* iter );
int LAPACKE_zcgesv( int matrix_order, int n, int nrhs,
                           double _Complex* a, int lda,
                           int* ipiv, double _Complex* b,
                           int ldb, double _Complex* x,
                           int ldx, int* iter );

int LAPACKE_sgesvd( int matrix_order, char jobu, char jobvt,
                           int m, int n, float* a, int lda,
                           float* s, float* u, int ldu, float* vt,
                           int ldvt, float* superb );
int LAPACKE_dgesvd( int matrix_order, char jobu, char jobvt,
                           int m, int n, double* a,
                           int lda, double* s, double* u, int ldu,
                           double* vt, int ldvt, double* superb );
int LAPACKE_cgesvd( int matrix_order, char jobu, char jobvt,
                           int m, int n, float _Complex* a,
                           int lda, float* s, float _Complex* u,
                           int ldu, float _Complex* vt,
                           int ldvt, float* superb );
int LAPACKE_zgesvd( int matrix_order, char jobu, char jobvt,
                           int m, int n, double _Complex* a,
                           int lda, double* s, double _Complex* u,
                           int ldu, double _Complex* vt,
                           int ldvt, double* superb );

int LAPACKE_sgesvj( int matrix_order, char joba, char jobu, char jobv,
                           int m, int n, float* a, int lda,
                           float* sva, int mv, float* v, int ldv,
                           float* stat );
int LAPACKE_dgesvj( int matrix_order, char joba, char jobu, char jobv,
                           int m, int n, double* a,
                           int lda, double* sva, int mv,
                           double* v, int ldv, double* stat );

int LAPACKE_sgesvx( int matrix_order, char fact, char trans,
                           int n, int nrhs, float* a,
                           int lda, float* af, int ldaf,
                           int* ipiv, char* equed, float* r, float* c,
                           float* b, int ldb, float* x, int ldx,
                           float* rcond, float* ferr, float* berr,
                           float* rpivot );
int LAPACKE_dgesvx( int matrix_order, char fact, char trans,
                           int n, int nrhs, double* a,
                           int lda, double* af, int ldaf,
                           int* ipiv, char* equed, double* r, double* c,
                           double* b, int ldb, double* x, int ldx,
                           double* rcond, double* ferr, double* berr,
                           double* rpivot );
int LAPACKE_cgesvx( int matrix_order, char fact, char trans,
                           int n, int nrhs,
                           float _Complex* a, int lda,
                           float _Complex* af, int ldaf,
                           int* ipiv, char* equed, float* r, float* c,
                           float _Complex* b, int ldb,
                           float _Complex* x, int ldx,
                           float* rcond, float* ferr, float* berr,
                           float* rpivot );
int LAPACKE_zgesvx( int matrix_order, char fact, char trans,
                           int n, int nrhs,
                           double _Complex* a, int lda,
                           double _Complex* af, int ldaf,
                           int* ipiv, char* equed, double* r, double* c,
                           double _Complex* b, int ldb,
                           double _Complex* x, int ldx,
                           double* rcond, double* ferr, double* berr,
                           double* rpivot );

int LAPACKE_sgesvxx( int matrix_order, char fact, char trans,
                            int n, int nrhs, float* a,
                            int lda, float* af, int ldaf,
                            int* ipiv, char* equed, float* r, float* c,
                            float* b, int ldb, float* x, int ldx,
                            float* rcond, float* rpvgrw, float* berr,
                            int n_err_bnds, float* err_bnds_norm,
                            float* err_bnds_comp, int nparams,
                            float* params );
int LAPACKE_dgesvxx( int matrix_order, char fact, char trans,
                            int n, int nrhs, double* a,
                            int lda, double* af, int ldaf,
                            int* ipiv, char* equed, double* r, double* c,
                            double* b, int ldb, double* x,
                            int ldx, double* rcond, double* rpvgrw,
                            double* berr, int n_err_bnds,
                            double* err_bnds_norm, double* err_bnds_comp,
                            int nparams, double* params );
int LAPACKE_cgesvxx( int matrix_order, char fact, char trans,
                            int n, int nrhs,
                            float _Complex* a, int lda,
                            float _Complex* af, int ldaf,
                            int* ipiv, char* equed, float* r, float* c,
                            float _Complex* b, int ldb,
                            float _Complex* x, int ldx,
                            float* rcond, float* rpvgrw, float* berr,
                            int n_err_bnds, float* err_bnds_norm,
                            float* err_bnds_comp, int nparams,
                            float* params );
int LAPACKE_zgesvxx( int matrix_order, char fact, char trans,
                            int n, int nrhs,
                            double _Complex* a, int lda,
                            double _Complex* af, int ldaf,
                            int* ipiv, char* equed, double* r, double* c,
                            double _Complex* b, int ldb,
                            double _Complex* x, int ldx,
                            double* rcond, double* rpvgrw, double* berr,
                            int n_err_bnds, double* err_bnds_norm,
                            double* err_bnds_comp, int nparams,
                            double* params );

int LAPACKE_sgetf2( int matrix_order, int m, int n,
                           float* a, int lda, int* ipiv );
int LAPACKE_dgetf2( int matrix_order, int m, int n,
                           double* a, int lda, int* ipiv );
int LAPACKE_cgetf2( int matrix_order, int m, int n,
                           float _Complex* a, int lda,
                           int* ipiv );
int LAPACKE_zgetf2( int matrix_order, int m, int n,
                           double _Complex* a, int lda,
                           int* ipiv );

int LAPACKE_sgetrf( int matrix_order, int m, int n,
                           float* a, int lda, int* ipiv );
int LAPACKE_dgetrf( int matrix_order, int m, int n,
                           double* a, int lda, int* ipiv );
int LAPACKE_cgetrf( int matrix_order, int m, int n,
                           float _Complex* a, int lda,
                           int* ipiv );
int LAPACKE_zgetrf( int matrix_order, int m, int n,
                           double _Complex* a, int lda,
                           int* ipiv );

int LAPACKE_sgetri( int matrix_order, int n, float* a,
                           int lda, const int* ipiv );
int LAPACKE_dgetri( int matrix_order, int n, double* a,
                           int lda, const int* ipiv );
int LAPACKE_cgetri( int matrix_order, int n,
                           float _Complex* a, int lda,
                           const int* ipiv );
int LAPACKE_zgetri( int matrix_order, int n,
                           double _Complex* a, int lda,
                           const int* ipiv );

int LAPACKE_sgetrs( int matrix_order, char trans, int n,
                           int nrhs, const float* a, int lda,
                           const int* ipiv, float* b, int ldb );
int LAPACKE_dgetrs( int matrix_order, char trans, int n,
                           int nrhs, const double* a, int lda,
                           const int* ipiv, double* b, int ldb );
int LAPACKE_cgetrs( int matrix_order, char trans, int n,
                           int nrhs, const float _Complex* a,
                           int lda, const int* ipiv,
                           float _Complex* b, int ldb );
int LAPACKE_zgetrs( int matrix_order, char trans, int n,
                           int nrhs, const double _Complex* a,
                           int lda, const int* ipiv,
                           double _Complex* b, int ldb );

int LAPACKE_sggbak( int matrix_order, char job, char side, int n,
                           int ilo, int ihi, const float* lscale,
                           const float* rscale, int m, float* v,
                           int ldv );
int LAPACKE_dggbak( int matrix_order, char job, char side, int n,
                           int ilo, int ihi, const double* lscale,
                           const double* rscale, int m, double* v,
                           int ldv );
int LAPACKE_cggbak( int matrix_order, char job, char side, int n,
                           int ilo, int ihi, const float* lscale,
                           const float* rscale, int m,
                           float _Complex* v, int ldv );
int LAPACKE_zggbak( int matrix_order, char job, char side, int n,
                           int ilo, int ihi, const double* lscale,
                           const double* rscale, int m,
                           double _Complex* v, int ldv );

int LAPACKE_sggbal( int matrix_order, char job, int n, float* a,
                           int lda, float* b, int ldb,
                           int* ilo, int* ihi, float* lscale,
                           float* rscale );
int LAPACKE_dggbal( int matrix_order, char job, int n, double* a,
                           int lda, double* b, int ldb,
                           int* ilo, int* ihi, double* lscale,
                           double* rscale );
int LAPACKE_cggbal( int matrix_order, char job, int n,
                           float _Complex* a, int lda,
                           float _Complex* b, int ldb,
                           int* ilo, int* ihi, float* lscale,
                           float* rscale );
int LAPACKE_zggbal( int matrix_order, char job, int n,
                           double _Complex* a, int lda,
                           double _Complex* b, int ldb,
                           int* ilo, int* ihi, double* lscale,
                           double* rscale );

int LAPACKE_sgges( int matrix_order, char jobvsl, char jobvsr, char sort,
                          LAPACK_S_SELECT3 selctg, int n, float* a,
                          int lda, float* b, int ldb,
                          int* sdim, float* alphar, float* alphai,
                          float* beta, float* vsl, int ldvsl, float* vsr,
                          int ldvsr );
int LAPACKE_dgges( int matrix_order, char jobvsl, char jobvsr, char sort,
                          LAPACK_D_SELECT3 selctg, int n, double* a,
                          int lda, double* b, int ldb,
                          int* sdim, double* alphar, double* alphai,
                          double* beta, double* vsl, int ldvsl,
                          double* vsr, int ldvsr );
int LAPACKE_cgges( int matrix_order, char jobvsl, char jobvsr, char sort,
                          LAPACK_C_SELECT2 selctg, int n,
                          float _Complex* a, int lda,
                          float _Complex* b, int ldb,
                          int* sdim, float _Complex* alpha,
                          float _Complex* beta, float _Complex* vsl,
                          int ldvsl, float _Complex* vsr,
                          int ldvsr );
int LAPACKE_zgges( int matrix_order, char jobvsl, char jobvsr, char sort,
                          LAPACK_Z_SELECT2 selctg, int n,
                          double _Complex* a, int lda,
                          double _Complex* b, int ldb,
                          int* sdim, double _Complex* alpha,
                          double _Complex* beta,
                          double _Complex* vsl, int ldvsl,
                          double _Complex* vsr, int ldvsr );

int LAPACKE_sggesx( int matrix_order, char jobvsl, char jobvsr,
                           char sort, LAPACK_S_SELECT3 selctg, char sense,
                           int n, float* a, int lda, float* b,
                           int ldb, int* sdim, float* alphar,
                           float* alphai, float* beta, float* vsl,
                           int ldvsl, float* vsr, int ldvsr,
                           float* rconde, float* rcondv );
int LAPACKE_dggesx( int matrix_order, char jobvsl, char jobvsr,
                           char sort, LAPACK_D_SELECT3 selctg, char sense,
                           int n, double* a, int lda, double* b,
                           int ldb, int* sdim, double* alphar,
                           double* alphai, double* beta, double* vsl,
                           int ldvsl, double* vsr, int ldvsr,
                           double* rconde, double* rcondv );
int LAPACKE_cggesx( int matrix_order, char jobvsl, char jobvsr,
                           char sort, LAPACK_C_SELECT2 selctg, char sense,
                           int n, float _Complex* a,
                           int lda, float _Complex* b,
                           int ldb, int* sdim,
                           float _Complex* alpha,
                           float _Complex* beta,
                           float _Complex* vsl, int ldvsl,
                           float _Complex* vsr, int ldvsr,
                           float* rconde, float* rcondv );
int LAPACKE_zggesx( int matrix_order, char jobvsl, char jobvsr,
                           char sort, LAPACK_Z_SELECT2 selctg, char sense,
                           int n, double _Complex* a,
                           int lda, double _Complex* b,
                           int ldb, int* sdim,
                           double _Complex* alpha,
                           double _Complex* beta,
                           double _Complex* vsl, int ldvsl,
                           double _Complex* vsr, int ldvsr,
                           double* rconde, double* rcondv );

int LAPACKE_sggev( int matrix_order, char jobvl, char jobvr,
                          int n, float* a, int lda, float* b,
                          int ldb, float* alphar, float* alphai,
                          float* beta, float* vl, int ldvl, float* vr,
                          int ldvr );
int LAPACKE_dggev( int matrix_order, char jobvl, char jobvr,
                          int n, double* a, int lda, double* b,
                          int ldb, double* alphar, double* alphai,
                          double* beta, double* vl, int ldvl, double* vr,
                          int ldvr );
int LAPACKE_cggev( int matrix_order, char jobvl, char jobvr,
                          int n, float _Complex* a, int lda,
                          float _Complex* b, int ldb,
                          float _Complex* alpha,
                          float _Complex* beta, float _Complex* vl,
                          int ldvl, float _Complex* vr,
                          int ldvr );
int LAPACKE_zggev( int matrix_order, char jobvl, char jobvr,
                          int n, double _Complex* a,
                          int lda, double _Complex* b,
                          int ldb, double _Complex* alpha,
                          double _Complex* beta,
                          double _Complex* vl, int ldvl,
                          double _Complex* vr, int ldvr );

int LAPACKE_sggevx( int matrix_order, char balanc, char jobvl,
                           char jobvr, char sense, int n, float* a,
                           int lda, float* b, int ldb,
                           float* alphar, float* alphai, float* beta, float* vl,
                           int ldvl, float* vr, int ldvr,
                           int* ilo, int* ihi, float* lscale,
                           float* rscale, float* abnrm, float* bbnrm,
                           float* rconde, float* rcondv );
int LAPACKE_dggevx( int matrix_order, char balanc, char jobvl,
                           char jobvr, char sense, int n, double* a,
                           int lda, double* b, int ldb,
                           double* alphar, double* alphai, double* beta,
                           double* vl, int ldvl, double* vr,
                           int ldvr, int* ilo, int* ihi,
                           double* lscale, double* rscale, double* abnrm,
                           double* bbnrm, double* rconde, double* rcondv );
int LAPACKE_cggevx( int matrix_order, char balanc, char jobvl,
                           char jobvr, char sense, int n,
                           float _Complex* a, int lda,
                           float _Complex* b, int ldb,
                           float _Complex* alpha,
                           float _Complex* beta, float _Complex* vl,
                           int ldvl, float _Complex* vr,
                           int ldvr, int* ilo, int* ihi,
                           float* lscale, float* rscale, float* abnrm,
                           float* bbnrm, float* rconde, float* rcondv );
int LAPACKE_zggevx( int matrix_order, char balanc, char jobvl,
                           char jobvr, char sense, int n,
                           double _Complex* a, int lda,
                           double _Complex* b, int ldb,
                           double _Complex* alpha,
                           double _Complex* beta,
                           double _Complex* vl, int ldvl,
                           double _Complex* vr, int ldvr,
                           int* ilo, int* ihi, double* lscale,
                           double* rscale, double* abnrm, double* bbnrm,
                           double* rconde, double* rcondv );

int LAPACKE_sggglm( int matrix_order, int n, int m,
                           int p, float* a, int lda, float* b,
                           int ldb, float* d, float* x, float* y );
int LAPACKE_dggglm( int matrix_order, int n, int m,
                           int p, double* a, int lda, double* b,
                           int ldb, double* d, double* x, double* y );
int LAPACKE_cggglm( int matrix_order, int n, int m,
                           int p, float _Complex* a,
                           int lda, float _Complex* b,
                           int ldb, float _Complex* d,
                           float _Complex* x, float _Complex* y );
int LAPACKE_zggglm( int matrix_order, int n, int m,
                           int p, double _Complex* a,
                           int lda, double _Complex* b,
                           int ldb, double _Complex* d,
                           double _Complex* x, double _Complex* y );

int LAPACKE_sgghrd( int matrix_order, char compq, char compz,
                           int n, int ilo, int ihi,
                           float* a, int lda, float* b, int ldb,
                           float* q, int ldq, float* z, int ldz );
int LAPACKE_dgghrd( int matrix_order, char compq, char compz,
                           int n, int ilo, int ihi,
                           double* a, int lda, double* b, int ldb,
                           double* q, int ldq, double* z,
                           int ldz );
int LAPACKE_cgghrd( int matrix_order, char compq, char compz,
                           int n, int ilo, int ihi,
                           float _Complex* a, int lda,
                           float _Complex* b, int ldb,
                           float _Complex* q, int ldq,
                           float _Complex* z, int ldz );
int LAPACKE_zgghrd( int matrix_order, char compq, char compz,
                           int n, int ilo, int ihi,
                           double _Complex* a, int lda,
                           double _Complex* b, int ldb,
                           double _Complex* q, int ldq,
                           double _Complex* z, int ldz );

int LAPACKE_sgglse( int matrix_order, int m, int n,
                           int p, float* a, int lda, float* b,
                           int ldb, float* c, float* d, float* x );
int LAPACKE_dgglse( int matrix_order, int m, int n,
                           int p, double* a, int lda, double* b,
                           int ldb, double* c, double* d, double* x );
int LAPACKE_cgglse( int matrix_order, int m, int n,
                           int p, float _Complex* a,
                           int lda, float _Complex* b,
                           int ldb, float _Complex* c,
                           float _Complex* d, float _Complex* x );
int LAPACKE_zgglse( int matrix_order, int m, int n,
                           int p, double _Complex* a,
                           int lda, double _Complex* b,
                           int ldb, double _Complex* c,
                           double _Complex* d, double _Complex* x );

int LAPACKE_sggqrf( int matrix_order, int n, int m,
                           int p, float* a, int lda, float* taua,
                           float* b, int ldb, float* taub );
int LAPACKE_dggqrf( int matrix_order, int n, int m,
                           int p, double* a, int lda,
                           double* taua, double* b, int ldb,
                           double* taub );
int LAPACKE_cggqrf( int matrix_order, int n, int m,
                           int p, float _Complex* a,
                           int lda, float _Complex* taua,
                           float _Complex* b, int ldb,
                           float _Complex* taub );
int LAPACKE_zggqrf( int matrix_order, int n, int m,
                           int p, double _Complex* a,
                           int lda, double _Complex* taua,
                           double _Complex* b, int ldb,
                           double _Complex* taub );

int LAPACKE_sggrqf( int matrix_order, int m, int p,
                           int n, float* a, int lda, float* taua,
                           float* b, int ldb, float* taub );
int LAPACKE_dggrqf( int matrix_order, int m, int p,
                           int n, double* a, int lda,
                           double* taua, double* b, int ldb,
                           double* taub );
int LAPACKE_cggrqf( int matrix_order, int m, int p,
                           int n, float _Complex* a,
                           int lda, float _Complex* taua,
                           float _Complex* b, int ldb,
                           float _Complex* taub );
int LAPACKE_zggrqf( int matrix_order, int m, int p,
                           int n, double _Complex* a,
                           int lda, double _Complex* taua,
                           double _Complex* b, int ldb,
                           double _Complex* taub );

int LAPACKE_sggsvd( int matrix_order, char jobu, char jobv, char jobq,
                           int m, int n, int p,
                           int* k, int* l, float* a,
                           int lda, float* b, int ldb,
                           float* alpha, float* beta, float* u, int ldu,
                           float* v, int ldv, float* q, int ldq,
                           int* iwork );
int LAPACKE_dggsvd( int matrix_order, char jobu, char jobv, char jobq,
                           int m, int n, int p,
                           int* k, int* l, double* a,
                           int lda, double* b, int ldb,
                           double* alpha, double* beta, double* u,
                           int ldu, double* v, int ldv, double* q,
                           int ldq, int* iwork );
int LAPACKE_cggsvd( int matrix_order, char jobu, char jobv, char jobq,
                           int m, int n, int p,
                           int* k, int* l,
                           float _Complex* a, int lda,
                           float _Complex* b, int ldb,
                           float* alpha, float* beta, float _Complex* u,
                           int ldu, float _Complex* v,
                           int ldv, float _Complex* q,
                           int ldq, int* iwork );
int LAPACKE_zggsvd( int matrix_order, char jobu, char jobv, char jobq,
                           int m, int n, int p,
                           int* k, int* l,
                           double _Complex* a, int lda,
                           double _Complex* b, int ldb,
                           double* alpha, double* beta,
                           double _Complex* u, int ldu,
                           double _Complex* v, int ldv,
                           double _Complex* q, int ldq,
                           int* iwork );

int LAPACKE_sggsvp( int matrix_order, char jobu, char jobv, char jobq,
                           int m, int p, int n, float* a,
                           int lda, float* b, int ldb, float tola,
                           float tolb, int* k, int* l, float* u,
                           int ldu, float* v, int ldv, float* q,
                           int ldq );
int LAPACKE_dggsvp( int matrix_order, char jobu, char jobv, char jobq,
                           int m, int p, int n, double* a,
                           int lda, double* b, int ldb,
                           double tola, double tolb, int* k,
                           int* l, double* u, int ldu, double* v,
                           int ldv, double* q, int ldq );
int LAPACKE_cggsvp( int matrix_order, char jobu, char jobv, char jobq,
                           int m, int p, int n,
                           float _Complex* a, int lda,
                           float _Complex* b, int ldb, float tola,
                           float tolb, int* k, int* l,
                           float _Complex* u, int ldu,
                           float _Complex* v, int ldv,
                           float _Complex* q, int ldq );
int LAPACKE_zggsvp( int matrix_order, char jobu, char jobv, char jobq,
                           int m, int p, int n,
                           double _Complex* a, int lda,
                           double _Complex* b, int ldb,
                           double tola, double tolb, int* k,
                           int* l, double _Complex* u,
                           int ldu, double _Complex* v,
                           int ldv, double _Complex* q,
                           int ldq );

int LAPACKE_sgtcon( char norm, int n, const float* dl,
                           const float* d, const float* du, const float* du2,
                           const int* ipiv, float anorm, float* rcond );
int LAPACKE_dgtcon( char norm, int n, const double* dl,
                           const double* d, const double* du, const double* du2,
                           const int* ipiv, double anorm,
                           double* rcond );
int LAPACKE_cgtcon( char norm, int n,
                           const float _Complex* dl,
                           const float _Complex* d,
                           const float _Complex* du,
                           const float _Complex* du2,
                           const int* ipiv, float anorm, float* rcond );
int LAPACKE_zgtcon( char norm, int n,
                           const double _Complex* dl,
                           const double _Complex* d,
                           const double _Complex* du,
                           const double _Complex* du2,
                           const int* ipiv, double anorm,
                           double* rcond );

int LAPACKE_sgtrfs( int matrix_order, char trans, int n,
                           int nrhs, const float* dl, const float* d,
                           const float* du, const float* dlf, const float* df,
                           const float* duf, const float* du2,
                           const int* ipiv, const float* b,
                           int ldb, float* x, int ldx,
                           float* ferr, float* berr );
int LAPACKE_dgtrfs( int matrix_order, char trans, int n,
                           int nrhs, const double* dl, const double* d,
                           const double* du, const double* dlf,
                           const double* df, const double* duf,
                           const double* du2, const int* ipiv,
                           const double* b, int ldb, double* x,
                           int ldx, double* ferr, double* berr );
int LAPACKE_cgtrfs( int matrix_order, char trans, int n,
                           int nrhs, const float _Complex* dl,
                           const float _Complex* d,
                           const float _Complex* du,
                           const float _Complex* dlf,
                           const float _Complex* df,
                           const float _Complex* duf,
                           const float _Complex* du2,
                           const int* ipiv,
                           const float _Complex* b, int ldb,
                           float _Complex* x, int ldx, float* ferr,
                           float* berr );
int LAPACKE_zgtrfs( int matrix_order, char trans, int n,
                           int nrhs, const double _Complex* dl,
                           const double _Complex* d,
                           const double _Complex* du,
                           const double _Complex* dlf,
                           const double _Complex* df,
                           const double _Complex* duf,
                           const double _Complex* du2,
                           const int* ipiv,
                           const double _Complex* b, int ldb,
                           double _Complex* x, int ldx,
                           double* ferr, double* berr );

int LAPACKE_sgtsv( int matrix_order, int n, int nrhs,
                          float* dl, float* d, float* du, float* b,
                          int ldb );
int LAPACKE_dgtsv( int matrix_order, int n, int nrhs,
                          double* dl, double* d, double* du, double* b,
                          int ldb );
int LAPACKE_cgtsv( int matrix_order, int n, int nrhs,
                          float _Complex* dl, float _Complex* d,
                          float _Complex* du, float _Complex* b,
                          int ldb );
int LAPACKE_zgtsv( int matrix_order, int n, int nrhs,
                          double _Complex* dl, double _Complex* d,
                          double _Complex* du, double _Complex* b,
                          int ldb );

int LAPACKE_sgtsvx( int matrix_order, char fact, char trans,
                           int n, int nrhs, const float* dl,
                           const float* d, const float* du, float* dlf,
                           float* df, float* duf, float* du2, int* ipiv,
                           const float* b, int ldb, float* x,
                           int ldx, float* rcond, float* ferr,
                           float* berr );
int LAPACKE_dgtsvx( int matrix_order, char fact, char trans,
                           int n, int nrhs, const double* dl,
                           const double* d, const double* du, double* dlf,
                           double* df, double* duf, double* du2,
                           int* ipiv, const double* b, int ldb,
                           double* x, int ldx, double* rcond,
                           double* ferr, double* berr );
int LAPACKE_cgtsvx( int matrix_order, char fact, char trans,
                           int n, int nrhs,
                           const float _Complex* dl,
                           const float _Complex* d,
                           const float _Complex* du,
                           float _Complex* dlf, float _Complex* df,
                           float _Complex* duf, float _Complex* du2,
                           int* ipiv, const float _Complex* b,
                           int ldb, float _Complex* x,
                           int ldx, float* rcond, float* ferr,
                           float* berr );
int LAPACKE_zgtsvx( int matrix_order, char fact, char trans,
                           int n, int nrhs,
                           const double _Complex* dl,
                           const double _Complex* d,
                           const double _Complex* du,
                           double _Complex* dlf,
                           double _Complex* df,
                           double _Complex* duf,
                           double _Complex* du2, int* ipiv,
                           const double _Complex* b, int ldb,
                           double _Complex* x, int ldx,
                           double* rcond, double* ferr, double* berr );

int LAPACKE_sgttrf( int n, float* dl, float* d, float* du,
                           float* du2, int* ipiv );
int LAPACKE_dgttrf( int n, double* dl, double* d, double* du,
                           double* du2, int* ipiv );
int LAPACKE_cgttrf( int n, float _Complex* dl,
                           float _Complex* d, float _Complex* du,
                           float _Complex* du2, int* ipiv );
int LAPACKE_zgttrf( int n, double _Complex* dl,
                           double _Complex* d, double _Complex* du,
                           double _Complex* du2, int* ipiv );

int LAPACKE_sgttrs( int matrix_order, char trans, int n,
                           int nrhs, const float* dl, const float* d,
                           const float* du, const float* du2,
                           const int* ipiv, float* b, int ldb );
int LAPACKE_dgttrs( int matrix_order, char trans, int n,
                           int nrhs, const double* dl, const double* d,
                           const double* du, const double* du2,
                           const int* ipiv, double* b, int ldb );
int LAPACKE_cgttrs( int matrix_order, char trans, int n,
                           int nrhs, const float _Complex* dl,
                           const float _Complex* d,
                           const float _Complex* du,
                           const float _Complex* du2,
                           const int* ipiv, float _Complex* b,
                           int ldb );
int LAPACKE_zgttrs( int matrix_order, char trans, int n,
                           int nrhs, const double _Complex* dl,
                           const double _Complex* d,
                           const double _Complex* du,
                           const double _Complex* du2,
                           const int* ipiv, double _Complex* b,
                           int ldb );

int LAPACKE_chbev( int matrix_order, char jobz, char uplo, int n,
                          int kd, float _Complex* ab,
                          int ldab, float* w, float _Complex* z,
                          int ldz );
int LAPACKE_zhbev( int matrix_order, char jobz, char uplo, int n,
                          int kd, double _Complex* ab,
                          int ldab, double* w, double _Complex* z,
                          int ldz );

int LAPACKE_chbevd( int matrix_order, char jobz, char uplo, int n,
                           int kd, float _Complex* ab,
                           int ldab, float* w, float _Complex* z,
                           int ldz );
int LAPACKE_zhbevd( int matrix_order, char jobz, char uplo, int n,
                           int kd, double _Complex* ab,
                           int ldab, double* w, double _Complex* z,
                           int ldz );

int LAPACKE_chbevx( int matrix_order, char jobz, char range, char uplo,
                           int n, int kd,
                           float _Complex* ab, int ldab,
                           float _Complex* q, int ldq, float vl,
                           float vu, int il, int iu, float abstol,
                           int* m, float* w, float _Complex* z,
                           int ldz, int* ifail );
int LAPACKE_zhbevx( int matrix_order, char jobz, char range, char uplo,
                           int n, int kd,
                           double _Complex* ab, int ldab,
                           double _Complex* q, int ldq, double vl,
                           double vu, int il, int iu,
                           double abstol, int* m, double* w,
                           double _Complex* z, int ldz,
                           int* ifail );

int LAPACKE_chbgst( int matrix_order, char vect, char uplo, int n,
                           int ka, int kb,
                           float _Complex* ab, int ldab,
                           const float _Complex* bb, int ldbb,
                           float _Complex* x, int ldx );
int LAPACKE_zhbgst( int matrix_order, char vect, char uplo, int n,
                           int ka, int kb,
                           double _Complex* ab, int ldab,
                           const double _Complex* bb, int ldbb,
                           double _Complex* x, int ldx );

int LAPACKE_chbgv( int matrix_order, char jobz, char uplo, int n,
                          int ka, int kb,
                          float _Complex* ab, int ldab,
                          float _Complex* bb, int ldbb, float* w,
                          float _Complex* z, int ldz );
int LAPACKE_zhbgv( int matrix_order, char jobz, char uplo, int n,
                          int ka, int kb,
                          double _Complex* ab, int ldab,
                          double _Complex* bb, int ldbb, double* w,
                          double _Complex* z, int ldz );

int LAPACKE_chbgvd( int matrix_order, char jobz, char uplo, int n,
                           int ka, int kb,
                           float _Complex* ab, int ldab,
                           float _Complex* bb, int ldbb, float* w,
                           float _Complex* z, int ldz );
int LAPACKE_zhbgvd( int matrix_order, char jobz, char uplo, int n,
                           int ka, int kb,
                           double _Complex* ab, int ldab,
                           double _Complex* bb, int ldbb,
                           double* w, double _Complex* z,
                           int ldz );

int LAPACKE_chbgvx( int matrix_order, char jobz, char range, char uplo,
                           int n, int ka, int kb,
                           float _Complex* ab, int ldab,
                           float _Complex* bb, int ldbb,
                           float _Complex* q, int ldq, float vl,
                           float vu, int il, int iu, float abstol,
                           int* m, float* w, float _Complex* z,
                           int ldz, int* ifail );
int LAPACKE_zhbgvx( int matrix_order, char jobz, char range, char uplo,
                           int n, int ka, int kb,
                           double _Complex* ab, int ldab,
                           double _Complex* bb, int ldbb,
                           double _Complex* q, int ldq, double vl,
                           double vu, int il, int iu,
                           double abstol, int* m, double* w,
                           double _Complex* z, int ldz,
                           int* ifail );

int LAPACKE_chbtrd( int matrix_order, char vect, char uplo, int n,
                           int kd, float _Complex* ab,
                           int ldab, float* d, float* e,
                           float _Complex* q, int ldq );
int LAPACKE_zhbtrd( int matrix_order, char vect, char uplo, int n,
                           int kd, double _Complex* ab,
                           int ldab, double* d, double* e,
                           double _Complex* q, int ldq );

int LAPACKE_checon( int matrix_order, char uplo, int n,
                           const float _Complex* a, int lda,
                           const int* ipiv, float anorm, float* rcond );
int LAPACKE_zhecon( int matrix_order, char uplo, int n,
                           const double _Complex* a, int lda,
                           const int* ipiv, double anorm,
                           double* rcond );

int LAPACKE_cheequb( int matrix_order, char uplo, int n,
                            const float _Complex* a, int lda,
                            float* s, float* scond, float* amax );
int LAPACKE_zheequb( int matrix_order, char uplo, int n,
                            const double _Complex* a, int lda,
                            double* s, double* scond, double* amax );

int LAPACKE_cheev( int matrix_order, char jobz, char uplo, int n,
                          float _Complex* a, int lda, float* w );
int LAPACKE_zheev( int matrix_order, char jobz, char uplo, int n,
                          double _Complex* a, int lda, double* w );

int LAPACKE_cheevd( int matrix_order, char jobz, char uplo, int n,
                           float _Complex* a, int lda, float* w );
int LAPACKE_zheevd( int matrix_order, char jobz, char uplo, int n,
                           double _Complex* a, int lda,
                           double* w );

int LAPACKE_cheevr( int matrix_order, char jobz, char range, char uplo,
                           int n, float _Complex* a,
                           int lda, float vl, float vu, int il,
                           int iu, float abstol, int* m, float* w,
                           float _Complex* z, int ldz,
                           int* isuppz );
int LAPACKE_zheevr( int matrix_order, char jobz, char range, char uplo,
                           int n, double _Complex* a,
                           int lda, double vl, double vu, int il,
                           int iu, double abstol, int* m,
                           double* w, double _Complex* z, int ldz,
                           int* isuppz );

int LAPACKE_cheevx( int matrix_order, char jobz, char range, char uplo,
                           int n, float _Complex* a,
                           int lda, float vl, float vu, int il,
                           int iu, float abstol, int* m, float* w,
                           float _Complex* z, int ldz,
                           int* ifail );
int LAPACKE_zheevx( int matrix_order, char jobz, char range, char uplo,
                           int n, double _Complex* a,
                           int lda, double vl, double vu, int il,
                           int iu, double abstol, int* m,
                           double* w, double _Complex* z, int ldz,
                           int* ifail );

int LAPACKE_chegst( int matrix_order, int itype, char uplo,
                           int n, float _Complex* a,
                           int lda, const float _Complex* b,
                           int ldb );
int LAPACKE_zhegst( int matrix_order, int itype, char uplo,
                           int n, double _Complex* a,
                           int lda, const double _Complex* b,
                           int ldb );

int LAPACKE_chegv( int matrix_order, int itype, char jobz,
                          char uplo, int n, float _Complex* a,
                          int lda, float _Complex* b,
                          int ldb, float* w );
int LAPACKE_zhegv( int matrix_order, int itype, char jobz,
                          char uplo, int n, double _Complex* a,
                          int lda, double _Complex* b,
                          int ldb, double* w );

int LAPACKE_chegvd( int matrix_order, int itype, char jobz,
                           char uplo, int n, float _Complex* a,
                           int lda, float _Complex* b,
                           int ldb, float* w );
int LAPACKE_zhegvd( int matrix_order, int itype, char jobz,
                           char uplo, int n, double _Complex* a,
                           int lda, double _Complex* b,
                           int ldb, double* w );

int LAPACKE_chegvx( int matrix_order, int itype, char jobz,
                           char range, char uplo, int n,
                           float _Complex* a, int lda,
                           float _Complex* b, int ldb, float vl,
                           float vu, int il, int iu, float abstol,
                           int* m, float* w, float _Complex* z,
                           int ldz, int* ifail );
int LAPACKE_zhegvx( int matrix_order, int itype, char jobz,
                           char range, char uplo, int n,
                           double _Complex* a, int lda,
                           double _Complex* b, int ldb, double vl,
                           double vu, int il, int iu,
                           double abstol, int* m, double* w,
                           double _Complex* z, int ldz,
                           int* ifail );

int LAPACKE_cherfs( int matrix_order, char uplo, int n,
                           int nrhs, const float _Complex* a,
                           int lda, const float _Complex* af,
                           int ldaf, const int* ipiv,
                           const float _Complex* b, int ldb,
                           float _Complex* x, int ldx, float* ferr,
                           float* berr );
int LAPACKE_zherfs( int matrix_order, char uplo, int n,
                           int nrhs, const double _Complex* a,
                           int lda, const double _Complex* af,
                           int ldaf, const int* ipiv,
                           const double _Complex* b, int ldb,
                           double _Complex* x, int ldx,
                           double* ferr, double* berr );

int LAPACKE_cherfsx( int matrix_order, char uplo, char equed,
                            int n, int nrhs,
                            const float _Complex* a, int lda,
                            const float _Complex* af, int ldaf,
                            const int* ipiv, const float* s,
                            const float _Complex* b, int ldb,
                            float _Complex* x, int ldx,
                            float* rcond, float* berr, int n_err_bnds,
                            float* err_bnds_norm, float* err_bnds_comp,
                            int nparams, float* params );
int LAPACKE_zherfsx( int matrix_order, char uplo, char equed,
                            int n, int nrhs,
                            const double _Complex* a, int lda,
                            const double _Complex* af, int ldaf,
                            const int* ipiv, const double* s,
                            const double _Complex* b, int ldb,
                            double _Complex* x, int ldx,
                            double* rcond, double* berr, int n_err_bnds,
                            double* err_bnds_norm, double* err_bnds_comp,
                            int nparams, double* params );

int LAPACKE_chesv( int matrix_order, char uplo, int n,
                          int nrhs, float _Complex* a,
                          int lda, int* ipiv,
                          float _Complex* b, int ldb );
int LAPACKE_zhesv( int matrix_order, char uplo, int n,
                          int nrhs, double _Complex* a,
                          int lda, int* ipiv,
                          double _Complex* b, int ldb );

int LAPACKE_chesvx( int matrix_order, char fact, char uplo, int n,
                           int nrhs, const float _Complex* a,
                           int lda, float _Complex* af,
                           int ldaf, int* ipiv,
                           const float _Complex* b, int ldb,
                           float _Complex* x, int ldx,
                           float* rcond, float* ferr, float* berr );
int LAPACKE_zhesvx( int matrix_order, char fact, char uplo, int n,
                           int nrhs, const double _Complex* a,
                           int lda, double _Complex* af,
                           int ldaf, int* ipiv,
                           const double _Complex* b, int ldb,
                           double _Complex* x, int ldx,
                           double* rcond, double* ferr, double* berr );

int LAPACKE_chesvxx( int matrix_order, char fact, char uplo,
                            int n, int nrhs,
                            float _Complex* a, int lda,
                            float _Complex* af, int ldaf,
                            int* ipiv, char* equed, float* s,
                            float _Complex* b, int ldb,
                            float _Complex* x, int ldx,
                            float* rcond, float* rpvgrw, float* berr,
                            int n_err_bnds, float* err_bnds_norm,
                            float* err_bnds_comp, int nparams,
                            float* params );
int LAPACKE_zhesvxx( int matrix_order, char fact, char uplo,
                            int n, int nrhs,
                            double _Complex* a, int lda,
                            double _Complex* af, int ldaf,
                            int* ipiv, char* equed, double* s,
                            double _Complex* b, int ldb,
                            double _Complex* x, int ldx,
                            double* rcond, double* rpvgrw, double* berr,
                            int n_err_bnds, double* err_bnds_norm,
                            double* err_bnds_comp, int nparams,
                            double* params );

int LAPACKE_chetrd( int matrix_order, char uplo, int n,
                           float _Complex* a, int lda, float* d,
                           float* e, float _Complex* tau );
int LAPACKE_zhetrd( int matrix_order, char uplo, int n,
                           double _Complex* a, int lda, double* d,
                           double* e, double _Complex* tau );

int LAPACKE_chetrf( int matrix_order, char uplo, int n,
                           float _Complex* a, int lda,
                           int* ipiv );
int LAPACKE_zhetrf( int matrix_order, char uplo, int n,
                           double _Complex* a, int lda,
                           int* ipiv );

int LAPACKE_chetri( int matrix_order, char uplo, int n,
                           float _Complex* a, int lda,
                           const int* ipiv );
int LAPACKE_zhetri( int matrix_order, char uplo, int n,
                           double _Complex* a, int lda,
                           const int* ipiv );

int LAPACKE_chetrs( int matrix_order, char uplo, int n,
                           int nrhs, const float _Complex* a,
                           int lda, const int* ipiv,
                           float _Complex* b, int ldb );
int LAPACKE_zhetrs( int matrix_order, char uplo, int n,
                           int nrhs, const double _Complex* a,
                           int lda, const int* ipiv,
                           double _Complex* b, int ldb );

int LAPACKE_chfrk( int matrix_order, char transr, char uplo, char trans,
                          int n, int k, float alpha,
                          const float _Complex* a, int lda,
                          float beta, float _Complex* c );
int LAPACKE_zhfrk( int matrix_order, char transr, char uplo, char trans,
                          int n, int k, double alpha,
                          const double _Complex* a, int lda,
                          double beta, double _Complex* c );

int LAPACKE_shgeqz( int matrix_order, char job, char compq, char compz,
                           int n, int ilo, int ihi,
                           float* h, int ldh, float* t, int ldt,
                           float* alphar, float* alphai, float* beta, float* q,
                           int ldq, float* z, int ldz );
int LAPACKE_dhgeqz( int matrix_order, char job, char compq, char compz,
                           int n, int ilo, int ihi,
                           double* h, int ldh, double* t, int ldt,
                           double* alphar, double* alphai, double* beta,
                           double* q, int ldq, double* z,
                           int ldz );
int LAPACKE_chgeqz( int matrix_order, char job, char compq, char compz,
                           int n, int ilo, int ihi,
                           float _Complex* h, int ldh,
                           float _Complex* t, int ldt,
                           float _Complex* alpha,
                           float _Complex* beta, float _Complex* q,
                           int ldq, float _Complex* z,
                           int ldz );
int LAPACKE_zhgeqz( int matrix_order, char job, char compq, char compz,
                           int n, int ilo, int ihi,
                           double _Complex* h, int ldh,
                           double _Complex* t, int ldt,
                           double _Complex* alpha,
                           double _Complex* beta,
                           double _Complex* q, int ldq,
                           double _Complex* z, int ldz );

int LAPACKE_chpcon( int matrix_order, char uplo, int n,
                           const float _Complex* ap,
                           const int* ipiv, float anorm, float* rcond );
int LAPACKE_zhpcon( int matrix_order, char uplo, int n,
                           const double _Complex* ap,
                           const int* ipiv, double anorm,
                           double* rcond );

int LAPACKE_chpev( int matrix_order, char jobz, char uplo, int n,
                          float _Complex* ap, float* w,
                          float _Complex* z, int ldz );
int LAPACKE_zhpev( int matrix_order, char jobz, char uplo, int n,
                          double _Complex* ap, double* w,
                          double _Complex* z, int ldz );

int LAPACKE_chpevd( int matrix_order, char jobz, char uplo, int n,
                           float _Complex* ap, float* w,
                           float _Complex* z, int ldz );
int LAPACKE_zhpevd( int matrix_order, char jobz, char uplo, int n,
                           double _Complex* ap, double* w,
                           double _Complex* z, int ldz );

int LAPACKE_chpevx( int matrix_order, char jobz, char range, char uplo,
                           int n, float _Complex* ap, float vl,
                           float vu, int il, int iu, float abstol,
                           int* m, float* w, float _Complex* z,
                           int ldz, int* ifail );
int LAPACKE_zhpevx( int matrix_order, char jobz, char range, char uplo,
                           int n, double _Complex* ap, double vl,
                           double vu, int il, int iu,
                           double abstol, int* m, double* w,
                           double _Complex* z, int ldz,
                           int* ifail );

int LAPACKE_chpgst( int matrix_order, int itype, char uplo,
                           int n, float _Complex* ap,
                           const float _Complex* bp );
int LAPACKE_zhpgst( int matrix_order, int itype, char uplo,
                           int n, double _Complex* ap,
                           const double _Complex* bp );

int LAPACKE_chpgv( int matrix_order, int itype, char jobz,
                          char uplo, int n, float _Complex* ap,
                          float _Complex* bp, float* w,
                          float _Complex* z, int ldz );
int LAPACKE_zhpgv( int matrix_order, int itype, char jobz,
                          char uplo, int n, double _Complex* ap,
                          double _Complex* bp, double* w,
                          double _Complex* z, int ldz );

int LAPACKE_chpgvd( int matrix_order, int itype, char jobz,
                           char uplo, int n, float _Complex* ap,
                           float _Complex* bp, float* w,
                           float _Complex* z, int ldz );
int LAPACKE_zhpgvd( int matrix_order, int itype, char jobz,
                           char uplo, int n, double _Complex* ap,
                           double _Complex* bp, double* w,
                           double _Complex* z, int ldz );

int LAPACKE_chpgvx( int matrix_order, int itype, char jobz,
                           char range, char uplo, int n,
                           float _Complex* ap, float _Complex* bp,
                           float vl, float vu, int il, int iu,
                           float abstol, int* m, float* w,
                           float _Complex* z, int ldz,
                           int* ifail );
int LAPACKE_zhpgvx( int matrix_order, int itype, char jobz,
                           char range, char uplo, int n,
                           double _Complex* ap, double _Complex* bp,
                           double vl, double vu, int il, int iu,
                           double abstol, int* m, double* w,
                           double _Complex* z, int ldz,
                           int* ifail );

int LAPACKE_chprfs( int matrix_order, char uplo, int n,
                           int nrhs, const float _Complex* ap,
                           const float _Complex* afp,
                           const int* ipiv,
                           const float _Complex* b, int ldb,
                           float _Complex* x, int ldx, float* ferr,
                           float* berr );
int LAPACKE_zhprfs( int matrix_order, char uplo, int n,
                           int nrhs, const double _Complex* ap,
                           const double _Complex* afp,
                           const int* ipiv,
                           const double _Complex* b, int ldb,
                           double _Complex* x, int ldx,
                           double* ferr, double* berr );

int LAPACKE_chpsv( int matrix_order, char uplo, int n,
                          int nrhs, float _Complex* ap,
                          int* ipiv, float _Complex* b,
                          int ldb );
int LAPACKE_zhpsv( int matrix_order, char uplo, int n,
                          int nrhs, double _Complex* ap,
                          int* ipiv, double _Complex* b,
                          int ldb );

int LAPACKE_chpsvx( int matrix_order, char fact, char uplo, int n,
                           int nrhs, const float _Complex* ap,
                           float _Complex* afp, int* ipiv,
                           const float _Complex* b, int ldb,
                           float _Complex* x, int ldx,
                           float* rcond, float* ferr, float* berr );
int LAPACKE_zhpsvx( int matrix_order, char fact, char uplo, int n,
                           int nrhs, const double _Complex* ap,
                           double _Complex* afp, int* ipiv,
                           const double _Complex* b, int ldb,
                           double _Complex* x, int ldx,
                           double* rcond, double* ferr, double* berr );

int LAPACKE_chptrd( int matrix_order, char uplo, int n,
                           float _Complex* ap, float* d, float* e,
                           float _Complex* tau );
int LAPACKE_zhptrd( int matrix_order, char uplo, int n,
                           double _Complex* ap, double* d, double* e,
                           double _Complex* tau );

int LAPACKE_chptrf( int matrix_order, char uplo, int n,
                           float _Complex* ap, int* ipiv );
int LAPACKE_zhptrf( int matrix_order, char uplo, int n,
                           double _Complex* ap, int* ipiv );

int LAPACKE_chptri( int matrix_order, char uplo, int n,
                           float _Complex* ap, const int* ipiv );
int LAPACKE_zhptri( int matrix_order, char uplo, int n,
                           double _Complex* ap, const int* ipiv );

int LAPACKE_chptrs( int matrix_order, char uplo, int n,
                           int nrhs, const float _Complex* ap,
                           const int* ipiv, float _Complex* b,
                           int ldb );
int LAPACKE_zhptrs( int matrix_order, char uplo, int n,
                           int nrhs, const double _Complex* ap,
                           const int* ipiv, double _Complex* b,
                           int ldb );

int LAPACKE_shsein( int matrix_order, char job, char eigsrc, char initv,
                           int* select, int n, const float* h,
                           int ldh, float* wr, const float* wi,
                           float* vl, int ldvl, float* vr,
                           int ldvr, int mm, int* m,
                           int* ifaill, int* ifailr );
int LAPACKE_dhsein( int matrix_order, char job, char eigsrc, char initv,
                           int* select, int n,
                           const double* h, int ldh, double* wr,
                           const double* wi, double* vl, int ldvl,
                           double* vr, int ldvr, int mm,
                           int* m, int* ifaill,
                           int* ifailr );
int LAPACKE_chsein( int matrix_order, char job, char eigsrc, char initv,
                           const int* select, int n,
                           const float _Complex* h, int ldh,
                           float _Complex* w, float _Complex* vl,
                           int ldvl, float _Complex* vr,
                           int ldvr, int mm, int* m,
                           int* ifaill, int* ifailr );
int LAPACKE_zhsein( int matrix_order, char job, char eigsrc, char initv,
                           const int* select, int n,
                           const double _Complex* h, int ldh,
                           double _Complex* w, double _Complex* vl,
                           int ldvl, double _Complex* vr,
                           int ldvr, int mm, int* m,
                           int* ifaill, int* ifailr );

int LAPACKE_shseqr( int matrix_order, char job, char compz, int n,
                           int ilo, int ihi, float* h,
                           int ldh, float* wr, float* wi, float* z,
                           int ldz );
int LAPACKE_dhseqr( int matrix_order, char job, char compz, int n,
                           int ilo, int ihi, double* h,
                           int ldh, double* wr, double* wi, double* z,
                           int ldz );
int LAPACKE_chseqr( int matrix_order, char job, char compz, int n,
                           int ilo, int ihi,
                           float _Complex* h, int ldh,
                           float _Complex* w, float _Complex* z,
                           int ldz );
int LAPACKE_zhseqr( int matrix_order, char job, char compz, int n,
                           int ilo, int ihi,
                           double _Complex* h, int ldh,
                           double _Complex* w, double _Complex* z,
                           int ldz );

int LAPACKE_clacgv( int n, float _Complex* x,
                           int incx );
int LAPACKE_zlacgv( int n, double _Complex* x,
                           int incx );

int LAPACKE_slacn2( int n, float* v, float* x, int* isgn,
                           float* est, int* kase, int* isave );
int LAPACKE_dlacn2( int n, double* v, double* x, int* isgn,
                           double* est, int* kase, int* isave );
int LAPACKE_clacn2( int n, float _Complex* v,
                           float _Complex* x,
                           float* est, int* kase, int* isave );
int LAPACKE_zlacn2( int n, double _Complex* v,
                           double _Complex* x,
                           double* est, int* kase, int* isave );

int LAPACKE_slacpy( int matrix_order, char uplo, int m,
                           int n, const float* a, int lda, float* b,
                           int ldb );
int LAPACKE_dlacpy( int matrix_order, char uplo, int m,
                           int n, const double* a, int lda, double* b,
                           int ldb );
int LAPACKE_clacpy( int matrix_order, char uplo, int m,
                           int n, const float _Complex* a,
                           int lda, float _Complex* b,
                           int ldb );
int LAPACKE_zlacpy( int matrix_order, char uplo, int m,
                           int n, const double _Complex* a,
                           int lda, double _Complex* b,
                           int ldb );

int LAPACKE_clacp2( int matrix_order, char uplo, int m,
                           int n, const float* a, int lda,
                           float _Complex* b, int ldb );
int LAPACKE_zlacp2( int matrix_order, char uplo, int m,
                           int n, const double* a, int lda,
                           double _Complex* b, int ldb );

int LAPACKE_zlag2c( int matrix_order, int m, int n,
                           const double _Complex* a, int lda,
                           float _Complex* sa, int ldsa );

int LAPACKE_slag2d( int matrix_order, int m, int n,
                           const float* sa, int ldsa, double* a,
                           int lda );

int LAPACKE_dlag2s( int matrix_order, int m, int n,
                           const double* a, int lda, float* sa,
                           int ldsa );

int LAPACKE_clag2z( int matrix_order, int m, int n,
                           const float _Complex* sa, int ldsa,
                           double _Complex* a, int lda );

int LAPACKE_slagge( int matrix_order, int m, int n,
                           int kl, int ku, const float* d,
                           float* a, int lda, int* iseed );
int LAPACKE_dlagge( int matrix_order, int m, int n,
                           int kl, int ku, const double* d,
                           double* a, int lda, int* iseed );
int LAPACKE_clagge( int matrix_order, int m, int n,
                           int kl, int ku, const float* d,
                           float _Complex* a, int lda,
                           int* iseed );
int LAPACKE_zlagge( int matrix_order, int m, int n,
                           int kl, int ku, const double* d,
                           double _Complex* a, int lda,
                           int* iseed );

float LAPACKE_slamch( char cmach );
double LAPACKE_dlamch( char cmach );

float LAPACKE_slange( int matrix_order, char norm, int m,
                           int n, const float* a, int lda );
double LAPACKE_dlange( int matrix_order, char norm, int m,
                           int n, const double* a, int lda );
float LAPACKE_clange( int matrix_order, char norm, int m,
                           int n, const float _Complex* a,
                           int lda );
double LAPACKE_zlange( int matrix_order, char norm, int m,
                           int n, const double _Complex* a,
                           int lda );

float LAPACKE_clanhe( int matrix_order, char norm, char uplo, int n,
                           const float _Complex* a, int lda );
double LAPACKE_zlanhe( int matrix_order, char norm, char uplo, int n,
                           const double _Complex* a, int lda );

float LAPACKE_slansy( int matrix_order, char norm, char uplo, int n,
                           const float* a, int lda );
double LAPACKE_dlansy( int matrix_order, char norm, char uplo, int n,
                           const double* a, int lda );
float LAPACKE_clansy( int matrix_order, char norm, char uplo, int n,
                           const float _Complex* a, int lda );
double LAPACKE_zlansy( int matrix_order, char norm, char uplo, int n,
                           const double _Complex* a, int lda );

float LAPACKE_slantr( int matrix_order, char norm, char uplo, char diag,
                           int m, int n, const float* a,
                           int lda );
double LAPACKE_dlantr( int matrix_order, char norm, char uplo, char diag,
                           int m, int n, const double* a,
                           int lda );
float LAPACKE_clantr( int matrix_order, char norm, char uplo, char diag,
                           int m, int n, const float _Complex* a,
                           int lda );
double LAPACKE_zlantr( int matrix_order, char norm, char uplo, char diag,
                           int m, int n, const double _Complex* a,
                           int lda );


int LAPACKE_slarfb( int matrix_order, char side, char trans, char direct,
                           char storev, int m, int n,
                           int k, const float* v, int ldv,
                           const float* t, int ldt, float* c,
                           int ldc );
int LAPACKE_dlarfb( int matrix_order, char side, char trans, char direct,
                           char storev, int m, int n,
                           int k, const double* v, int ldv,
                           const double* t, int ldt, double* c,
                           int ldc );
int LAPACKE_clarfb( int matrix_order, char side, char trans, char direct,
                           char storev, int m, int n,
                           int k, const float _Complex* v,
                           int ldv, const float _Complex* t,
                           int ldt, float _Complex* c,
                           int ldc );
int LAPACKE_zlarfb( int matrix_order, char side, char trans, char direct,
                           char storev, int m, int n,
                           int k, const double _Complex* v,
                           int ldv, const double _Complex* t,
                           int ldt, double _Complex* c,
                           int ldc );

int LAPACKE_slarfg( int n, float* alpha, float* x,
                           int incx, float* tau );
int LAPACKE_dlarfg( int n, double* alpha, double* x,
                           int incx, double* tau );
int LAPACKE_clarfg( int n, float _Complex* alpha,
                           float _Complex* x, int incx,
                           float _Complex* tau );
int LAPACKE_zlarfg( int n, double _Complex* alpha,
                           double _Complex* x, int incx,
                           double _Complex* tau );

int LAPACKE_slarft( int matrix_order, char direct, char storev,
                           int n, int k, const float* v,
                           int ldv, const float* tau, float* t,
                           int ldt );
int LAPACKE_dlarft( int matrix_order, char direct, char storev,
                           int n, int k, const double* v,
                           int ldv, const double* tau, double* t,
                           int ldt );
int LAPACKE_clarft( int matrix_order, char direct, char storev,
                           int n, int k,
                           const float _Complex* v, int ldv,
                           const float _Complex* tau,
                           float _Complex* t, int ldt );
int LAPACKE_zlarft( int matrix_order, char direct, char storev,
                           int n, int k,
                           const double _Complex* v, int ldv,
                           const double _Complex* tau,
                           double _Complex* t, int ldt );

int LAPACKE_slarfx( int matrix_order, char side, int m,
                           int n, const float* v, float tau, float* c,
                           int ldc, float* work );
int LAPACKE_dlarfx( int matrix_order, char side, int m,
                           int n, const double* v, double tau, double* c,
                           int ldc, double* work );
int LAPACKE_clarfx( int matrix_order, char side, int m,
                           int n, const float _Complex* v,
                           float _Complex tau, float _Complex* c,
                           int ldc, float _Complex* work );
int LAPACKE_zlarfx( int matrix_order, char side, int m,
                           int n, const double _Complex* v,
                           double _Complex tau, double _Complex* c,
                           int ldc, double _Complex* work );

int LAPACKE_slarnv( int idist, int* iseed, int n,
                           float* x );
int LAPACKE_dlarnv( int idist, int* iseed, int n,
                           double* x );
int LAPACKE_clarnv( int idist, int* iseed, int n,
                           float _Complex* x );
int LAPACKE_zlarnv( int idist, int* iseed, int n,
                           double _Complex* x );

int LAPACKE_slaset( int matrix_order, char uplo, int m,
                           int n, float alpha, float beta, float* a,
                           int lda );
int LAPACKE_dlaset( int matrix_order, char uplo, int m,
                           int n, double alpha, double beta, double* a,
                           int lda );
int LAPACKE_claset( int matrix_order, char uplo, int m,
                           int n, float _Complex alpha,
                           float _Complex beta, float _Complex* a,
                           int lda );
int LAPACKE_zlaset( int matrix_order, char uplo, int m,
                           int n, double _Complex alpha,
                           double _Complex beta, double _Complex* a,
                           int lda );

int LAPACKE_slasrt( char id, int n, float* d );
int LAPACKE_dlasrt( char id, int n, double* d );

int LAPACKE_slaswp( int matrix_order, int n, float* a,
                           int lda, int k1, int k2,
                           const int* ipiv, int incx );
int LAPACKE_dlaswp( int matrix_order, int n, double* a,
                           int lda, int k1, int k2,
                           const int* ipiv, int incx );
int LAPACKE_claswp( int matrix_order, int n,
                           float _Complex* a, int lda,
                           int k1, int k2, const int* ipiv,
                           int incx );
int LAPACKE_zlaswp( int matrix_order, int n,
                           double _Complex* a, int lda,
                           int k1, int k2, const int* ipiv,
                           int incx );

int LAPACKE_slatms( int matrix_order, int m, int n,
                           char dist, int* iseed, char sym, float* d,
                           int mode, float cond, float dmax,
                           int kl, int ku, char pack, float* a,
                           int lda );
int LAPACKE_dlatms( int matrix_order, int m, int n,
                           char dist, int* iseed, char sym, double* d,
                           int mode, double cond, double dmax,
                           int kl, int ku, char pack, double* a,
                           int lda );
int LAPACKE_clatms( int matrix_order, int m, int n,
                           char dist, int* iseed, char sym, float* d,
                           int mode, float cond, float dmax,
                           int kl, int ku, char pack,
                           float _Complex* a, int lda );
int LAPACKE_zlatms( int matrix_order, int m, int n,
                           char dist, int* iseed, char sym, double* d,
                           int mode, double cond, double dmax,
                           int kl, int ku, char pack,
                           double _Complex* a, int lda );

int LAPACKE_slauum( int matrix_order, char uplo, int n, float* a,
                           int lda );
int LAPACKE_dlauum( int matrix_order, char uplo, int n, double* a,
                           int lda );
int LAPACKE_clauum( int matrix_order, char uplo, int n,
                           float _Complex* a, int lda );
int LAPACKE_zlauum( int matrix_order, char uplo, int n,
                           double _Complex* a, int lda );

int LAPACKE_sopgtr( int matrix_order, char uplo, int n,
                           const float* ap, const float* tau, float* q,
                           int ldq );
int LAPACKE_dopgtr( int matrix_order, char uplo, int n,
                           const double* ap, const double* tau, double* q,
                           int ldq );

int LAPACKE_sopmtr( int matrix_order, char side, char uplo, char trans,
                           int m, int n, const float* ap,
                           const float* tau, float* c, int ldc );
int LAPACKE_dopmtr( int matrix_order, char side, char uplo, char trans,
                           int m, int n, const double* ap,
                           const double* tau, double* c, int ldc );

int LAPACKE_sorgbr( int matrix_order, char vect, int m,
                           int n, int k, float* a, int lda,
                           const float* tau );
int LAPACKE_dorgbr( int matrix_order, char vect, int m,
                           int n, int k, double* a,
                           int lda, const double* tau );

int LAPACKE_sorghr( int matrix_order, int n, int ilo,
                           int ihi, float* a, int lda,
                           const float* tau );
int LAPACKE_dorghr( int matrix_order, int n, int ilo,
                           int ihi, double* a, int lda,
                           const double* tau );

int LAPACKE_sorglq( int matrix_order, int m, int n,
                           int k, float* a, int lda,
                           const float* tau );
int LAPACKE_dorglq( int matrix_order, int m, int n,
                           int k, double* a, int lda,
                           const double* tau );

int LAPACKE_sorgql( int matrix_order, int m, int n,
                           int k, float* a, int lda,
                           const float* tau );
int LAPACKE_dorgql( int matrix_order, int m, int n,
                           int k, double* a, int lda,
                           const double* tau );

int LAPACKE_sorgqr( int matrix_order, int m, int n,
                           int k, float* a, int lda,
                           const float* tau );
int LAPACKE_dorgqr( int matrix_order, int m, int n,
                           int k, double* a, int lda,
                           const double* tau );

int LAPACKE_sorgrq( int matrix_order, int m, int n,
                           int k, float* a, int lda,
                           const float* tau );
int LAPACKE_dorgrq( int matrix_order, int m, int n,
                           int k, double* a, int lda,
                           const double* tau );

int LAPACKE_sorgtr( int matrix_order, char uplo, int n, float* a,
                           int lda, const float* tau );
int LAPACKE_dorgtr( int matrix_order, char uplo, int n, double* a,
                           int lda, const double* tau );

int LAPACKE_sormbr( int matrix_order, char vect, char side, char trans,
                           int m, int n, int k,
                           const float* a, int lda, const float* tau,
                           float* c, int ldc );
int LAPACKE_dormbr( int matrix_order, char vect, char side, char trans,
                           int m, int n, int k,
                           const double* a, int lda, const double* tau,
                           double* c, int ldc );

int LAPACKE_sormhr( int matrix_order, char side, char trans,
                           int m, int n, int ilo,
                           int ihi, const float* a, int lda,
                           const float* tau, float* c, int ldc );
int LAPACKE_dormhr( int matrix_order, char side, char trans,
                           int m, int n, int ilo,
                           int ihi, const double* a, int lda,
                           const double* tau, double* c, int ldc );

int LAPACKE_sormlq( int matrix_order, char side, char trans,
                           int m, int n, int k,
                           const float* a, int lda, const float* tau,
                           float* c, int ldc );
int LAPACKE_dormlq( int matrix_order, char side, char trans,
                           int m, int n, int k,
                           const double* a, int lda, const double* tau,
                           double* c, int ldc );

int LAPACKE_sormql( int matrix_order, char side, char trans,
                           int m, int n, int k,
                           const float* a, int lda, const float* tau,
                           float* c, int ldc );
int LAPACKE_dormql( int matrix_order, char side, char trans,
                           int m, int n, int k,
                           const double* a, int lda, const double* tau,
                           double* c, int ldc );

int LAPACKE_sormqr( int matrix_order, char side, char trans,
                           int m, int n, int k,
                           const float* a, int lda, const float* tau,
                           float* c, int ldc );
int LAPACKE_dormqr( int matrix_order, char side, char trans,
                           int m, int n, int k,
                           const double* a, int lda, const double* tau,
                           double* c, int ldc );

int LAPACKE_sormrq( int matrix_order, char side, char trans,
                           int m, int n, int k,
                           const float* a, int lda, const float* tau,
                           float* c, int ldc );
int LAPACKE_dormrq( int matrix_order, char side, char trans,
                           int m, int n, int k,
                           const double* a, int lda, const double* tau,
                           double* c, int ldc );

int LAPACKE_sormrz( int matrix_order, char side, char trans,
                           int m, int n, int k,
                           int l, const float* a, int lda,
                           const float* tau, float* c, int ldc );
int LAPACKE_dormrz( int matrix_order, char side, char trans,
                           int m, int n, int k,
                           int l, const double* a, int lda,
                           const double* tau, double* c, int ldc );

int LAPACKE_sormtr( int matrix_order, char side, char uplo, char trans,
                           int m, int n, const float* a,
                           int lda, const float* tau, float* c,
                           int ldc );
int LAPACKE_dormtr( int matrix_order, char side, char uplo, char trans,
                           int m, int n, const double* a,
                           int lda, const double* tau, double* c,
                           int ldc );

int LAPACKE_spbcon( int matrix_order, char uplo, int n,
                           int kd, const float* ab, int ldab,
                           float anorm, float* rcond );
int LAPACKE_dpbcon( int matrix_order, char uplo, int n,
                           int kd, const double* ab, int ldab,
                           double anorm, double* rcond );
int LAPACKE_cpbcon( int matrix_order, char uplo, int n,
                           int kd, const float _Complex* ab,
                           int ldab, float anorm, float* rcond );
int LAPACKE_zpbcon( int matrix_order, char uplo, int n,
                           int kd, const double _Complex* ab,
                           int ldab, double anorm, double* rcond );

int LAPACKE_spbequ( int matrix_order, char uplo, int n,
                           int kd, const float* ab, int ldab,
                           float* s, float* scond, float* amax );
int LAPACKE_dpbequ( int matrix_order, char uplo, int n,
                           int kd, const double* ab, int ldab,
                           double* s, double* scond, double* amax );
int LAPACKE_cpbequ( int matrix_order, char uplo, int n,
                           int kd, const float _Complex* ab,
                           int ldab, float* s, float* scond,
                           float* amax );
int LAPACKE_zpbequ( int matrix_order, char uplo, int n,
                           int kd, const double _Complex* ab,
                           int ldab, double* s, double* scond,
                           double* amax );

int LAPACKE_spbrfs( int matrix_order, char uplo, int n,
                           int kd, int nrhs, const float* ab,
                           int ldab, const float* afb, int ldafb,
                           const float* b, int ldb, float* x,
                           int ldx, float* ferr, float* berr );
int LAPACKE_dpbrfs( int matrix_order, char uplo, int n,
                           int kd, int nrhs, const double* ab,
                           int ldab, const double* afb, int ldafb,
                           const double* b, int ldb, double* x,
                           int ldx, double* ferr, double* berr );
int LAPACKE_cpbrfs( int matrix_order, char uplo, int n,
                           int kd, int nrhs,
                           const float _Complex* ab, int ldab,
                           const float _Complex* afb, int ldafb,
                           const float _Complex* b, int ldb,
                           float _Complex* x, int ldx, float* ferr,
                           float* berr );
int LAPACKE_zpbrfs( int matrix_order, char uplo, int n,
                           int kd, int nrhs,
                           const double _Complex* ab, int ldab,
                           const double _Complex* afb, int ldafb,
                           const double _Complex* b, int ldb,
                           double _Complex* x, int ldx,
                           double* ferr, double* berr );

int LAPACKE_spbstf( int matrix_order, char uplo, int n,
                           int kb, float* bb, int ldbb );
int LAPACKE_dpbstf( int matrix_order, char uplo, int n,
                           int kb, double* bb, int ldbb );
int LAPACKE_cpbstf( int matrix_order, char uplo, int n,
                           int kb, float _Complex* bb,
                           int ldbb );
int LAPACKE_zpbstf( int matrix_order, char uplo, int n,
                           int kb, double _Complex* bb,
                           int ldbb );

int LAPACKE_spbsv( int matrix_order, char uplo, int n,
                          int kd, int nrhs, float* ab,
                          int ldab, float* b, int ldb );
int LAPACKE_dpbsv( int matrix_order, char uplo, int n,
                          int kd, int nrhs, double* ab,
                          int ldab, double* b, int ldb );
int LAPACKE_cpbsv( int matrix_order, char uplo, int n,
                          int kd, int nrhs,
                          float _Complex* ab, int ldab,
                          float _Complex* b, int ldb );
int LAPACKE_zpbsv( int matrix_order, char uplo, int n,
                          int kd, int nrhs,
                          double _Complex* ab, int ldab,
                          double _Complex* b, int ldb );

int LAPACKE_spbsvx( int matrix_order, char fact, char uplo, int n,
                           int kd, int nrhs, float* ab,
                           int ldab, float* afb, int ldafb,
                           char* equed, float* s, float* b, int ldb,
                           float* x, int ldx, float* rcond, float* ferr,
                           float* berr );
int LAPACKE_dpbsvx( int matrix_order, char fact, char uplo, int n,
                           int kd, int nrhs, double* ab,
                           int ldab, double* afb, int ldafb,
                           char* equed, double* s, double* b, int ldb,
                           double* x, int ldx, double* rcond,
                           double* ferr, double* berr );
int LAPACKE_cpbsvx( int matrix_order, char fact, char uplo, int n,
                           int kd, int nrhs,
                           float _Complex* ab, int ldab,
                           float _Complex* afb, int ldafb,
                           char* equed, float* s, float _Complex* b,
                           int ldb, float _Complex* x,
                           int ldx, float* rcond, float* ferr,
                           float* berr );
int LAPACKE_zpbsvx( int matrix_order, char fact, char uplo, int n,
                           int kd, int nrhs,
                           double _Complex* ab, int ldab,
                           double _Complex* afb, int ldafb,
                           char* equed, double* s, double _Complex* b,
                           int ldb, double _Complex* x,
                           int ldx, double* rcond, double* ferr,
                           double* berr );

int LAPACKE_spbtrf( int matrix_order, char uplo, int n,
                           int kd, float* ab, int ldab );
int LAPACKE_dpbtrf( int matrix_order, char uplo, int n,
                           int kd, double* ab, int ldab );
int LAPACKE_cpbtrf( int matrix_order, char uplo, int n,
                           int kd, float _Complex* ab,
                           int ldab );
int LAPACKE_zpbtrf( int matrix_order, char uplo, int n,
                           int kd, double _Complex* ab,
                           int ldab );

int LAPACKE_spbtrs( int matrix_order, char uplo, int n,
                           int kd, int nrhs, const float* ab,
                           int ldab, float* b, int ldb );
int LAPACKE_dpbtrs( int matrix_order, char uplo, int n,
                           int kd, int nrhs, const double* ab,
                           int ldab, double* b, int ldb );
int LAPACKE_cpbtrs( int matrix_order, char uplo, int n,
                           int kd, int nrhs,
                           const float _Complex* ab, int ldab,
                           float _Complex* b, int ldb );
int LAPACKE_zpbtrs( int matrix_order, char uplo, int n,
                           int kd, int nrhs,
                           const double _Complex* ab, int ldab,
                           double _Complex* b, int ldb );

int LAPACKE_spftrf( int matrix_order, char transr, char uplo,
                           int n, float* a );
int LAPACKE_dpftrf( int matrix_order, char transr, char uplo,
                           int n, double* a );
int LAPACKE_cpftrf( int matrix_order, char transr, char uplo,
                           int n, float _Complex* a );
int LAPACKE_zpftrf( int matrix_order, char transr, char uplo,
                           int n, double _Complex* a );

int LAPACKE_spftri( int matrix_order, char transr, char uplo,
                           int n, float* a );
int LAPACKE_dpftri( int matrix_order, char transr, char uplo,
                           int n, double* a );
int LAPACKE_cpftri( int matrix_order, char transr, char uplo,
                           int n, float _Complex* a );
int LAPACKE_zpftri( int matrix_order, char transr, char uplo,
                           int n, double _Complex* a );

int LAPACKE_spftrs( int matrix_order, char transr, char uplo,
                           int n, int nrhs, const float* a,
                           float* b, int ldb );
int LAPACKE_dpftrs( int matrix_order, char transr, char uplo,
                           int n, int nrhs, const double* a,
                           double* b, int ldb );
int LAPACKE_cpftrs( int matrix_order, char transr, char uplo,
                           int n, int nrhs,
                           const float _Complex* a,
                           float _Complex* b, int ldb );
int LAPACKE_zpftrs( int matrix_order, char transr, char uplo,
                           int n, int nrhs,
                           const double _Complex* a,
                           double _Complex* b, int ldb );

int LAPACKE_spocon( int matrix_order, char uplo, int n,
                           const float* a, int lda, float anorm,
                           float* rcond );
int LAPACKE_dpocon( int matrix_order, char uplo, int n,
                           const double* a, int lda, double anorm,
                           double* rcond );
int LAPACKE_cpocon( int matrix_order, char uplo, int n,
                           const float _Complex* a, int lda,
                           float anorm, float* rcond );
int LAPACKE_zpocon( int matrix_order, char uplo, int n,
                           const double _Complex* a, int lda,
                           double anorm, double* rcond );

int LAPACKE_spoequ( int matrix_order, int n, const float* a,
                           int lda, float* s, float* scond,
                           float* amax );
int LAPACKE_dpoequ( int matrix_order, int n, const double* a,
                           int lda, double* s, double* scond,
                           double* amax );
int LAPACKE_cpoequ( int matrix_order, int n,
                           const float _Complex* a, int lda,
                           float* s, float* scond, float* amax );
int LAPACKE_zpoequ( int matrix_order, int n,
                           const double _Complex* a, int lda,
                           double* s, double* scond, double* amax );

int LAPACKE_spoequb( int matrix_order, int n, const float* a,
                            int lda, float* s, float* scond,
                            float* amax );
int LAPACKE_dpoequb( int matrix_order, int n, const double* a,
                            int lda, double* s, double* scond,
                            double* amax );
int LAPACKE_cpoequb( int matrix_order, int n,
                            const float _Complex* a, int lda,
                            float* s, float* scond, float* amax );
int LAPACKE_zpoequb( int matrix_order, int n,
                            const double _Complex* a, int lda,
                            double* s, double* scond, double* amax );

int LAPACKE_sporfs( int matrix_order, char uplo, int n,
                           int nrhs, const float* a, int lda,
                           const float* af, int ldaf, const float* b,
                           int ldb, float* x, int ldx,
                           float* ferr, float* berr );
int LAPACKE_dporfs( int matrix_order, char uplo, int n,
                           int nrhs, const double* a, int lda,
                           const double* af, int ldaf, const double* b,
                           int ldb, double* x, int ldx,
                           double* ferr, double* berr );
int LAPACKE_cporfs( int matrix_order, char uplo, int n,
                           int nrhs, const float _Complex* a,
                           int lda, const float _Complex* af,
                           int ldaf, const float _Complex* b,
                           int ldb, float _Complex* x,
                           int ldx, float* ferr, float* berr );
int LAPACKE_zporfs( int matrix_order, char uplo, int n,
                           int nrhs, const double _Complex* a,
                           int lda, const double _Complex* af,
                           int ldaf, const double _Complex* b,
                           int ldb, double _Complex* x,
                           int ldx, double* ferr, double* berr );

int LAPACKE_sporfsx( int matrix_order, char uplo, char equed,
                            int n, int nrhs, const float* a,
                            int lda, const float* af, int ldaf,
                            const float* s, const float* b, int ldb,
                            float* x, int ldx, float* rcond, float* berr,
                            int n_err_bnds, float* err_bnds_norm,
                            float* err_bnds_comp, int nparams,
                            float* params );
int LAPACKE_dporfsx( int matrix_order, char uplo, char equed,
                            int n, int nrhs, const double* a,
                            int lda, const double* af, int ldaf,
                            const double* s, const double* b, int ldb,
                            double* x, int ldx, double* rcond,
                            double* berr, int n_err_bnds,
                            double* err_bnds_norm, double* err_bnds_comp,
                            int nparams, double* params );
int LAPACKE_cporfsx( int matrix_order, char uplo, char equed,
                            int n, int nrhs,
                            const float _Complex* a, int lda,
                            const float _Complex* af, int ldaf,
                            const float* s, const float _Complex* b,
                            int ldb, float _Complex* x,
                            int ldx, float* rcond, float* berr,
                            int n_err_bnds, float* err_bnds_norm,
                            float* err_bnds_comp, int nparams,
                            float* params );
int LAPACKE_zporfsx( int matrix_order, char uplo, char equed,
                            int n, int nrhs,
                            const double _Complex* a, int lda,
                            const double _Complex* af, int ldaf,
                            const double* s, const double _Complex* b,
                            int ldb, double _Complex* x,
                            int ldx, double* rcond, double* berr,
                            int n_err_bnds, double* err_bnds_norm,
                            double* err_bnds_comp, int nparams,
                            double* params );

int LAPACKE_sposv( int matrix_order, char uplo, int n,
                          int nrhs, float* a, int lda, float* b,
                          int ldb );
int LAPACKE_dposv( int matrix_order, char uplo, int n,
                          int nrhs, double* a, int lda, double* b,
                          int ldb );
int LAPACKE_cposv( int matrix_order, char uplo, int n,
                          int nrhs, float _Complex* a,
                          int lda, float _Complex* b,
                          int ldb );
int LAPACKE_zposv( int matrix_order, char uplo, int n,
                          int nrhs, double _Complex* a,
                          int lda, double _Complex* b,
                          int ldb );
int LAPACKE_dsposv( int matrix_order, char uplo, int n,
                           int nrhs, double* a, int lda,
                           double* b, int ldb, double* x, int ldx,
                           int* iter );
int LAPACKE_zcposv( int matrix_order, char uplo, int n,
                           int nrhs, double _Complex* a,
                           int lda, double _Complex* b,
                           int ldb, double _Complex* x,
                           int ldx, int* iter );

int LAPACKE_sposvx( int matrix_order, char fact, char uplo, int n,
                           int nrhs, float* a, int lda, float* af,
                           int ldaf, char* equed, float* s, float* b,
                           int ldb, float* x, int ldx,
                           float* rcond, float* ferr, float* berr );
int LAPACKE_dposvx( int matrix_order, char fact, char uplo, int n,
                           int nrhs, double* a, int lda,
                           double* af, int ldaf, char* equed, double* s,
                           double* b, int ldb, double* x, int ldx,
                           double* rcond, double* ferr, double* berr );
int LAPACKE_cposvx( int matrix_order, char fact, char uplo, int n,
                           int nrhs, float _Complex* a,
                           int lda, float _Complex* af,
                           int ldaf, char* equed, float* s,
                           float _Complex* b, int ldb,
                           float _Complex* x, int ldx,
                           float* rcond, float* ferr, float* berr );
int LAPACKE_zposvx( int matrix_order, char fact, char uplo, int n,
                           int nrhs, double _Complex* a,
                           int lda, double _Complex* af,
                           int ldaf, char* equed, double* s,
                           double _Complex* b, int ldb,
                           double _Complex* x, int ldx,
                           double* rcond, double* ferr, double* berr );

int LAPACKE_sposvxx( int matrix_order, char fact, char uplo,
                            int n, int nrhs, float* a,
                            int lda, float* af, int ldaf,
                            char* equed, float* s, float* b, int ldb,
                            float* x, int ldx, float* rcond,
                            float* rpvgrw, float* berr, int n_err_bnds,
                            float* err_bnds_norm, float* err_bnds_comp,
                            int nparams, float* params );
int LAPACKE_dposvxx( int matrix_order, char fact, char uplo,
                            int n, int nrhs, double* a,
                            int lda, double* af, int ldaf,
                            char* equed, double* s, double* b, int ldb,
                            double* x, int ldx, double* rcond,
                            double* rpvgrw, double* berr, int n_err_bnds,
                            double* err_bnds_norm, double* err_bnds_comp,
                            int nparams, double* params );
int LAPACKE_cposvxx( int matrix_order, char fact, char uplo,
                            int n, int nrhs,
                            float _Complex* a, int lda,
                            float _Complex* af, int ldaf,
                            char* equed, float* s, float _Complex* b,
                            int ldb, float _Complex* x,
                            int ldx, float* rcond, float* rpvgrw,
                            float* berr, int n_err_bnds,
                            float* err_bnds_norm, float* err_bnds_comp,
                            int nparams, float* params );
int LAPACKE_zposvxx( int matrix_order, char fact, char uplo,
                            int n, int nrhs,
                            double _Complex* a, int lda,
                            double _Complex* af, int ldaf,
                            char* equed, double* s, double _Complex* b,
                            int ldb, double _Complex* x,
                            int ldx, double* rcond, double* rpvgrw,
                            double* berr, int n_err_bnds,
                            double* err_bnds_norm, double* err_bnds_comp,
                            int nparams, double* params );

int LAPACKE_spotrf( int matrix_order, char uplo, int n, float* a,
                           int lda );
int LAPACKE_dpotrf( int matrix_order, char uplo, int n, double* a,
                           int lda );
int LAPACKE_cpotrf( int matrix_order, char uplo, int n,
                           float _Complex* a, int lda );
int LAPACKE_zpotrf( int matrix_order, char uplo, int n,
                           double _Complex* a, int lda );

int LAPACKE_spotri( int matrix_order, char uplo, int n, float* a,
                           int lda );
int LAPACKE_dpotri( int matrix_order, char uplo, int n, double* a,
                           int lda );
int LAPACKE_cpotri( int matrix_order, char uplo, int n,
                           float _Complex* a, int lda );
int LAPACKE_zpotri( int matrix_order, char uplo, int n,
                           double _Complex* a, int lda );

int LAPACKE_spotrs( int matrix_order, char uplo, int n,
                           int nrhs, const float* a, int lda,
                           float* b, int ldb );
int LAPACKE_dpotrs( int matrix_order, char uplo, int n,
                           int nrhs, const double* a, int lda,
                           double* b, int ldb );
int LAPACKE_cpotrs( int matrix_order, char uplo, int n,
                           int nrhs, const float _Complex* a,
                           int lda, float _Complex* b,
                           int ldb );
int LAPACKE_zpotrs( int matrix_order, char uplo, int n,
                           int nrhs, const double _Complex* a,
                           int lda, double _Complex* b,
                           int ldb );

int LAPACKE_sppcon( int matrix_order, char uplo, int n,
                           const float* ap, float anorm, float* rcond );
int LAPACKE_dppcon( int matrix_order, char uplo, int n,
                           const double* ap, double anorm, double* rcond );
int LAPACKE_cppcon( int matrix_order, char uplo, int n,
                           const float _Complex* ap, float anorm,
                           float* rcond );
int LAPACKE_zppcon( int matrix_order, char uplo, int n,
                           const double _Complex* ap, double anorm,
                           double* rcond );

int LAPACKE_sppequ( int matrix_order, char uplo, int n,
                           const float* ap, float* s, float* scond,
                           float* amax );
int LAPACKE_dppequ( int matrix_order, char uplo, int n,
                           const double* ap, double* s, double* scond,
                           double* amax );
int LAPACKE_cppequ( int matrix_order, char uplo, int n,
                           const float _Complex* ap, float* s,
                           float* scond, float* amax );
int LAPACKE_zppequ( int matrix_order, char uplo, int n,
                           const double _Complex* ap, double* s,
                           double* scond, double* amax );

int LAPACKE_spprfs( int matrix_order, char uplo, int n,
                           int nrhs, const float* ap, const float* afp,
                           const float* b, int ldb, float* x,
                           int ldx, float* ferr, float* berr );
int LAPACKE_dpprfs( int matrix_order, char uplo, int n,
                           int nrhs, const double* ap, const double* afp,
                           const double* b, int ldb, double* x,
                           int ldx, double* ferr, double* berr );
int LAPACKE_cpprfs( int matrix_order, char uplo, int n,
                           int nrhs, const float _Complex* ap,
                           const float _Complex* afp,
                           const float _Complex* b, int ldb,
                           float _Complex* x, int ldx, float* ferr,
                           float* berr );
int LAPACKE_zpprfs( int matrix_order, char uplo, int n,
                           int nrhs, const double _Complex* ap,
                           const double _Complex* afp,
                           const double _Complex* b, int ldb,
                           double _Complex* x, int ldx,
                           double* ferr, double* berr );

int LAPACKE_sppsv( int matrix_order, char uplo, int n,
                          int nrhs, float* ap, float* b,
                          int ldb );
int LAPACKE_dppsv( int matrix_order, char uplo, int n,
                          int nrhs, double* ap, double* b,
                          int ldb );
int LAPACKE_cppsv( int matrix_order, char uplo, int n,
                          int nrhs, float _Complex* ap,
                          float _Complex* b, int ldb );
int LAPACKE_zppsv( int matrix_order, char uplo, int n,
                          int nrhs, double _Complex* ap,
                          double _Complex* b, int ldb );

int LAPACKE_sppsvx( int matrix_order, char fact, char uplo, int n,
                           int nrhs, float* ap, float* afp, char* equed,
                           float* s, float* b, int ldb, float* x,
                           int ldx, float* rcond, float* ferr,
                           float* berr );
int LAPACKE_dppsvx( int matrix_order, char fact, char uplo, int n,
                           int nrhs, double* ap, double* afp,
                           char* equed, double* s, double* b, int ldb,
                           double* x, int ldx, double* rcond,
                           double* ferr, double* berr );
int LAPACKE_cppsvx( int matrix_order, char fact, char uplo, int n,
                           int nrhs, float _Complex* ap,
                           float _Complex* afp, char* equed, float* s,
                           float _Complex* b, int ldb,
                           float _Complex* x, int ldx,
                           float* rcond, float* ferr, float* berr );
int LAPACKE_zppsvx( int matrix_order, char fact, char uplo, int n,
                           int nrhs, double _Complex* ap,
                           double _Complex* afp, char* equed, double* s,
                           double _Complex* b, int ldb,
                           double _Complex* x, int ldx,
                           double* rcond, double* ferr, double* berr );

int LAPACKE_spptrf( int matrix_order, char uplo, int n,
                           float* ap );
int LAPACKE_dpptrf( int matrix_order, char uplo, int n,
                           double* ap );
int LAPACKE_cpptrf( int matrix_order, char uplo, int n,
                           float _Complex* ap );
int LAPACKE_zpptrf( int matrix_order, char uplo, int n,
                           double _Complex* ap );

int LAPACKE_spptri( int matrix_order, char uplo, int n,
                           float* ap );
int LAPACKE_dpptri( int matrix_order, char uplo, int n,
                           double* ap );
int LAPACKE_cpptri( int matrix_order, char uplo, int n,
                           float _Complex* ap );
int LAPACKE_zpptri( int matrix_order, char uplo, int n,
                           double _Complex* ap );

int LAPACKE_spptrs( int matrix_order, char uplo, int n,
                           int nrhs, const float* ap, float* b,
                           int ldb );
int LAPACKE_dpptrs( int matrix_order, char uplo, int n,
                           int nrhs, const double* ap, double* b,
                           int ldb );
int LAPACKE_cpptrs( int matrix_order, char uplo, int n,
                           int nrhs, const float _Complex* ap,
                           float _Complex* b, int ldb );
int LAPACKE_zpptrs( int matrix_order, char uplo, int n,
                           int nrhs, const double _Complex* ap,
                           double _Complex* b, int ldb );

int LAPACKE_spstrf( int matrix_order, char uplo, int n, float* a,
                           int lda, int* piv, int* rank,
                           float tol );
int LAPACKE_dpstrf( int matrix_order, char uplo, int n, double* a,
                           int lda, int* piv, int* rank,
                           double tol );
int LAPACKE_cpstrf( int matrix_order, char uplo, int n,
                           float _Complex* a, int lda,
                           int* piv, int* rank, float tol );
int LAPACKE_zpstrf( int matrix_order, char uplo, int n,
                           double _Complex* a, int lda,
                           int* piv, int* rank, double tol );

int LAPACKE_sptcon( int n, const float* d, const float* e,
                           float anorm, float* rcond );
int LAPACKE_dptcon( int n, const double* d, const double* e,
                           double anorm, double* rcond );
int LAPACKE_cptcon( int n, const float* d,
                           const float _Complex* e, float anorm,
                           float* rcond );
int LAPACKE_zptcon( int n, const double* d,
                           const double _Complex* e, double anorm,
                           double* rcond );

int LAPACKE_spteqr( int matrix_order, char compz, int n, float* d,
                           float* e, float* z, int ldz );
int LAPACKE_dpteqr( int matrix_order, char compz, int n,
                           double* d, double* e, double* z, int ldz );
int LAPACKE_cpteqr( int matrix_order, char compz, int n, float* d,
                           float* e, float _Complex* z, int ldz );
int LAPACKE_zpteqr( int matrix_order, char compz, int n,
                           double* d, double* e, double _Complex* z,
                           int ldz );

int LAPACKE_sptrfs( int matrix_order, int n, int nrhs,
                           const float* d, const float* e, const float* df,
                           const float* ef, const float* b, int ldb,
                           float* x, int ldx, float* ferr, float* berr );
int LAPACKE_dptrfs( int matrix_order, int n, int nrhs,
                           const double* d, const double* e, const double* df,
                           const double* ef, const double* b, int ldb,
                           double* x, int ldx, double* ferr,
                           double* berr );
int LAPACKE_cptrfs( int matrix_order, char uplo, int n,
                           int nrhs, const float* d,
                           const float _Complex* e, const float* df,
                           const float _Complex* ef,
                           const float _Complex* b, int ldb,
                           float _Complex* x, int ldx, float* ferr,
                           float* berr );
int LAPACKE_zptrfs( int matrix_order, char uplo, int n,
                           int nrhs, const double* d,
                           const double _Complex* e, const double* df,
                           const double _Complex* ef,
                           const double _Complex* b, int ldb,
                           double _Complex* x, int ldx,
                           double* ferr, double* berr );

int LAPACKE_sptsv( int matrix_order, int n, int nrhs,
                          float* d, float* e, float* b, int ldb );
int LAPACKE_dptsv( int matrix_order, int n, int nrhs,
                          double* d, double* e, double* b, int ldb );
int LAPACKE_cptsv( int matrix_order, int n, int nrhs,
                          float* d, float _Complex* e,
                          float _Complex* b, int ldb );
int LAPACKE_zptsv( int matrix_order, int n, int nrhs,
                          double* d, double _Complex* e,
                          double _Complex* b, int ldb );

int LAPACKE_sptsvx( int matrix_order, char fact, int n,
                           int nrhs, const float* d, const float* e,
                           float* df, float* ef, const float* b, int ldb,
                           float* x, int ldx, float* rcond, float* ferr,
                           float* berr );
int LAPACKE_dptsvx( int matrix_order, char fact, int n,
                           int nrhs, const double* d, const double* e,
                           double* df, double* ef, const double* b,
                           int ldb, double* x, int ldx,
                           double* rcond, double* ferr, double* berr );
int LAPACKE_cptsvx( int matrix_order, char fact, int n,
                           int nrhs, const float* d,
                           const float _Complex* e, float* df,
                           float _Complex* ef,
                           const float _Complex* b, int ldb,
                           float _Complex* x, int ldx,
                           float* rcond, float* ferr, float* berr );
int LAPACKE_zptsvx( int matrix_order, char fact, int n,
                           int nrhs, const double* d,
                           const double _Complex* e, double* df,
                           double _Complex* ef,
                           const double _Complex* b, int ldb,
                           double _Complex* x, int ldx,
                           double* rcond, double* ferr, double* berr );

int LAPACKE_spttrf( int n, float* d, float* e );
int LAPACKE_dpttrf( int n, double* d, double* e );
int LAPACKE_cpttrf( int n, float* d, float _Complex* e );
int LAPACKE_zpttrf( int n, double* d, double _Complex* e );

int LAPACKE_spttrs( int matrix_order, int n, int nrhs,
                           const float* d, const float* e, float* b,
                           int ldb );
int LAPACKE_dpttrs( int matrix_order, int n, int nrhs,
                           const double* d, const double* e, double* b,
                           int ldb );
int LAPACKE_cpttrs( int matrix_order, char uplo, int n,
                           int nrhs, const float* d,
                           const float _Complex* e,
                           float _Complex* b, int ldb );
int LAPACKE_zpttrs( int matrix_order, char uplo, int n,
                           int nrhs, const double* d,
                           const double _Complex* e,
                           double _Complex* b, int ldb );

int LAPACKE_ssbev( int matrix_order, char jobz, char uplo, int n,
                          int kd, float* ab, int ldab, float* w,
                          float* z, int ldz );
int LAPACKE_dsbev( int matrix_order, char jobz, char uplo, int n,
                          int kd, double* ab, int ldab, double* w,
                          double* z, int ldz );

int LAPACKE_ssbevd( int matrix_order, char jobz, char uplo, int n,
                           int kd, float* ab, int ldab, float* w,
                           float* z, int ldz );
int LAPACKE_dsbevd( int matrix_order, char jobz, char uplo, int n,
                           int kd, double* ab, int ldab,
                           double* w, double* z, int ldz );

int LAPACKE_ssbevx( int matrix_order, char jobz, char range, char uplo,
                           int n, int kd, float* ab,
                           int ldab, float* q, int ldq, float vl,
                           float vu, int il, int iu, float abstol,
                           int* m, float* w, float* z, int ldz,
                           int* ifail );
int LAPACKE_dsbevx( int matrix_order, char jobz, char range, char uplo,
                           int n, int kd, double* ab,
                           int ldab, double* q, int ldq,
                           double vl, double vu, int il, int iu,
                           double abstol, int* m, double* w, double* z,
                           int ldz, int* ifail );

int LAPACKE_ssbgst( int matrix_order, char vect, char uplo, int n,
                           int ka, int kb, float* ab,
                           int ldab, const float* bb, int ldbb,
                           float* x, int ldx );
int LAPACKE_dsbgst( int matrix_order, char vect, char uplo, int n,
                           int ka, int kb, double* ab,
                           int ldab, const double* bb, int ldbb,
                           double* x, int ldx );

int LAPACKE_ssbgv( int matrix_order, char jobz, char uplo, int n,
                          int ka, int kb, float* ab,
                          int ldab, float* bb, int ldbb, float* w,
                          float* z, int ldz );
int LAPACKE_dsbgv( int matrix_order, char jobz, char uplo, int n,
                          int ka, int kb, double* ab,
                          int ldab, double* bb, int ldbb,
                          double* w, double* z, int ldz );

int LAPACKE_ssbgvd( int matrix_order, char jobz, char uplo, int n,
                           int ka, int kb, float* ab,
                           int ldab, float* bb, int ldbb,
                           float* w, float* z, int ldz );
int LAPACKE_dsbgvd( int matrix_order, char jobz, char uplo, int n,
                           int ka, int kb, double* ab,
                           int ldab, double* bb, int ldbb,
                           double* w, double* z, int ldz );

int LAPACKE_ssbgvx( int matrix_order, char jobz, char range, char uplo,
                           int n, int ka, int kb,
                           float* ab, int ldab, float* bb,
                           int ldbb, float* q, int ldq, float vl,
                           float vu, int il, int iu, float abstol,
                           int* m, float* w, float* z, int ldz,
                           int* ifail );
int LAPACKE_dsbgvx( int matrix_order, char jobz, char range, char uplo,
                           int n, int ka, int kb,
                           double* ab, int ldab, double* bb,
                           int ldbb, double* q, int ldq,
                           double vl, double vu, int il, int iu,
                           double abstol, int* m, double* w, double* z,
                           int ldz, int* ifail );

int LAPACKE_ssbtrd( int matrix_order, char vect, char uplo, int n,
                           int kd, float* ab, int ldab, float* d,
                           float* e, float* q, int ldq );
int LAPACKE_dsbtrd( int matrix_order, char vect, char uplo, int n,
                           int kd, double* ab, int ldab,
                           double* d, double* e, double* q, int ldq );

int LAPACKE_ssfrk( int matrix_order, char transr, char uplo, char trans,
                          int n, int k, float alpha,
                          const float* a, int lda, float beta,
                          float* c );
int LAPACKE_dsfrk( int matrix_order, char transr, char uplo, char trans,
                          int n, int k, double alpha,
                          const double* a, int lda, double beta,
                          double* c );

int LAPACKE_sspcon( int matrix_order, char uplo, int n,
                           const float* ap, const int* ipiv, float anorm,
                           float* rcond );
int LAPACKE_dspcon( int matrix_order, char uplo, int n,
                           const double* ap, const int* ipiv,
                           double anorm, double* rcond );
int LAPACKE_cspcon( int matrix_order, char uplo, int n,
                           const float _Complex* ap,
                           const int* ipiv, float anorm, float* rcond );
int LAPACKE_zspcon( int matrix_order, char uplo, int n,
                           const double _Complex* ap,
                           const int* ipiv, double anorm,
                           double* rcond );

int LAPACKE_sspev( int matrix_order, char jobz, char uplo, int n,
                          float* ap, float* w, float* z, int ldz );
int LAPACKE_dspev( int matrix_order, char jobz, char uplo, int n,
                          double* ap, double* w, double* z, int ldz );

int LAPACKE_sspevd( int matrix_order, char jobz, char uplo, int n,
                           float* ap, float* w, float* z, int ldz );
int LAPACKE_dspevd( int matrix_order, char jobz, char uplo, int n,
                           double* ap, double* w, double* z, int ldz );

int LAPACKE_sspevx( int matrix_order, char jobz, char range, char uplo,
                           int n, float* ap, float vl, float vu,
                           int il, int iu, float abstol,
                           int* m, float* w, float* z, int ldz,
                           int* ifail );
int LAPACKE_dspevx( int matrix_order, char jobz, char range, char uplo,
                           int n, double* ap, double vl, double vu,
                           int il, int iu, double abstol,
                           int* m, double* w, double* z, int ldz,
                           int* ifail );

int LAPACKE_sspgst( int matrix_order, int itype, char uplo,
                           int n, float* ap, const float* bp );
int LAPACKE_dspgst( int matrix_order, int itype, char uplo,
                           int n, double* ap, const double* bp );

int LAPACKE_sspgv( int matrix_order, int itype, char jobz,
                          char uplo, int n, float* ap, float* bp,
                          float* w, float* z, int ldz );
int LAPACKE_dspgv( int matrix_order, int itype, char jobz,
                          char uplo, int n, double* ap, double* bp,
                          double* w, double* z, int ldz );

int LAPACKE_sspgvd( int matrix_order, int itype, char jobz,
                           char uplo, int n, float* ap, float* bp,
                           float* w, float* z, int ldz );
int LAPACKE_dspgvd( int matrix_order, int itype, char jobz,
                           char uplo, int n, double* ap, double* bp,
                           double* w, double* z, int ldz );

int LAPACKE_sspgvx( int matrix_order, int itype, char jobz,
                           char range, char uplo, int n, float* ap,
                           float* bp, float vl, float vu, int il,
                           int iu, float abstol, int* m, float* w,
                           float* z, int ldz, int* ifail );
int LAPACKE_dspgvx( int matrix_order, int itype, char jobz,
                           char range, char uplo, int n, double* ap,
                           double* bp, double vl, double vu, int il,
                           int iu, double abstol, int* m,
                           double* w, double* z, int ldz,
                           int* ifail );

int LAPACKE_ssprfs( int matrix_order, char uplo, int n,
                           int nrhs, const float* ap, const float* afp,
                           const int* ipiv, const float* b,
                           int ldb, float* x, int ldx,
                           float* ferr, float* berr );
int LAPACKE_dsprfs( int matrix_order, char uplo, int n,
                           int nrhs, const double* ap, const double* afp,
                           const int* ipiv, const double* b,
                           int ldb, double* x, int ldx,
                           double* ferr, double* berr );
int LAPACKE_csprfs( int matrix_order, char uplo, int n,
                           int nrhs, const float _Complex* ap,
                           const float _Complex* afp,
                           const int* ipiv,
                           const float _Complex* b, int ldb,
                           float _Complex* x, int ldx, float* ferr,
                           float* berr );
int LAPACKE_zsprfs( int matrix_order, char uplo, int n,
                           int nrhs, const double _Complex* ap,
                           const double _Complex* afp,
                           const int* ipiv,
                           const double _Complex* b, int ldb,
                           double _Complex* x, int ldx,
                           double* ferr, double* berr );

int LAPACKE_sspsv( int matrix_order, char uplo, int n,
                          int nrhs, float* ap, int* ipiv,
                          float* b, int ldb );
int LAPACKE_dspsv( int matrix_order, char uplo, int n,
                          int nrhs, double* ap, int* ipiv,
                          double* b, int ldb );
int LAPACKE_cspsv( int matrix_order, char uplo, int n,
                          int nrhs, float _Complex* ap,
                          int* ipiv, float _Complex* b,
                          int ldb );
int LAPACKE_zspsv( int matrix_order, char uplo, int n,
                          int nrhs, double _Complex* ap,
                          int* ipiv, double _Complex* b,
                          int ldb );

int LAPACKE_sspsvx( int matrix_order, char fact, char uplo, int n,
                           int nrhs, const float* ap, float* afp,
                           int* ipiv, const float* b, int ldb,
                           float* x, int ldx, float* rcond, float* ferr,
                           float* berr );
int LAPACKE_dspsvx( int matrix_order, char fact, char uplo, int n,
                           int nrhs, const double* ap, double* afp,
                           int* ipiv, const double* b, int ldb,
                           double* x, int ldx, double* rcond,
                           double* ferr, double* berr );
int LAPACKE_cspsvx( int matrix_order, char fact, char uplo, int n,
                           int nrhs, const float _Complex* ap,
                           float _Complex* afp, int* ipiv,
                           const float _Complex* b, int ldb,
                           float _Complex* x, int ldx,
                           float* rcond, float* ferr, float* berr );
int LAPACKE_zspsvx( int matrix_order, char fact, char uplo, int n,
                           int nrhs, const double _Complex* ap,
                           double _Complex* afp, int* ipiv,
                           const double _Complex* b, int ldb,
                           double _Complex* x, int ldx,
                           double* rcond, double* ferr, double* berr );

int LAPACKE_ssptrd( int matrix_order, char uplo, int n, float* ap,
                           float* d, float* e, float* tau );
int LAPACKE_dsptrd( int matrix_order, char uplo, int n,
                           double* ap, double* d, double* e, double* tau );

int LAPACKE_ssptrf( int matrix_order, char uplo, int n, float* ap,
                           int* ipiv );
int LAPACKE_dsptrf( int matrix_order, char uplo, int n,
                           double* ap, int* ipiv );
int LAPACKE_csptrf( int matrix_order, char uplo, int n,
                           float _Complex* ap, int* ipiv );
int LAPACKE_zsptrf( int matrix_order, char uplo, int n,
                           double _Complex* ap, int* ipiv );

int LAPACKE_ssptri( int matrix_order, char uplo, int n, float* ap,
                           const int* ipiv );
int LAPACKE_dsptri( int matrix_order, char uplo, int n,
                           double* ap, const int* ipiv );
int LAPACKE_csptri( int matrix_order, char uplo, int n,
                           float _Complex* ap, const int* ipiv );
int LAPACKE_zsptri( int matrix_order, char uplo, int n,
                           double _Complex* ap, const int* ipiv );

int LAPACKE_ssptrs( int matrix_order, char uplo, int n,
                           int nrhs, const float* ap,
                           const int* ipiv, float* b, int ldb );
int LAPACKE_dsptrs( int matrix_order, char uplo, int n,
                           int nrhs, const double* ap,
                           const int* ipiv, double* b, int ldb );
int LAPACKE_csptrs( int matrix_order, char uplo, int n,
                           int nrhs, const float _Complex* ap,
                           const int* ipiv, float _Complex* b,
                           int ldb );
int LAPACKE_zsptrs( int matrix_order, char uplo, int n,
                           int nrhs, const double _Complex* ap,
                           const int* ipiv, double _Complex* b,
                           int ldb );

int LAPACKE_sstebz( char range, char order, int n, float vl,
                           float vu, int il, int iu, float abstol,
                           const float* d, const float* e, int* m,
                           int* nsplit, float* w, int* iblock,
                           int* isplit );
int LAPACKE_dstebz( char range, char order, int n, double vl,
                           double vu, int il, int iu,
                           double abstol, const double* d, const double* e,
                           int* m, int* nsplit, double* w,
                           int* iblock, int* isplit );

int LAPACKE_sstedc( int matrix_order, char compz, int n, float* d,
                           float* e, float* z, int ldz );
int LAPACKE_dstedc( int matrix_order, char compz, int n,
                           double* d, double* e, double* z, int ldz );
int LAPACKE_cstedc( int matrix_order, char compz, int n, float* d,
                           float* e, float _Complex* z, int ldz );
int LAPACKE_zstedc( int matrix_order, char compz, int n,
                           double* d, double* e, double _Complex* z,
                           int ldz );

int LAPACKE_sstegr( int matrix_order, char jobz, char range,
                           int n, float* d, float* e, float vl, float vu,
                           int il, int iu, float abstol,
                           int* m, float* w, float* z, int ldz,
                           int* isuppz );
int LAPACKE_dstegr( int matrix_order, char jobz, char range,
                           int n, double* d, double* e, double vl,
                           double vu, int il, int iu,
                           double abstol, int* m, double* w, double* z,
                           int ldz, int* isuppz );
int LAPACKE_cstegr( int matrix_order, char jobz, char range,
                           int n, float* d, float* e, float vl, float vu,
                           int il, int iu, float abstol,
                           int* m, float* w, float _Complex* z,
                           int ldz, int* isuppz );
int LAPACKE_zstegr( int matrix_order, char jobz, char range,
                           int n, double* d, double* e, double vl,
                           double vu, int il, int iu,
                           double abstol, int* m, double* w,
                           double _Complex* z, int ldz,
                           int* isuppz );

int LAPACKE_sstein( int matrix_order, int n, const float* d,
                           const float* e, int m, const float* w,
                           const int* iblock, const int* isplit,
                           float* z, int ldz, int* ifailv );
int LAPACKE_dstein( int matrix_order, int n, const double* d,
                           const double* e, int m, const double* w,
                           const int* iblock, const int* isplit,
                           double* z, int ldz, int* ifailv );
int LAPACKE_cstein( int matrix_order, int n, const float* d,
                           const float* e, int m, const float* w,
                           const int* iblock, const int* isplit,
                           float _Complex* z, int ldz,
                           int* ifailv );
int LAPACKE_zstein( int matrix_order, int n, const double* d,
                           const double* e, int m, const double* w,
                           const int* iblock, const int* isplit,
                           double _Complex* z, int ldz,
                           int* ifailv );

int LAPACKE_sstemr( int matrix_order, char jobz, char range,
                           int n, float* d, float* e, float vl, float vu,
                           int il, int iu, int* m,
                           float* w, float* z, int ldz, int nzc,
                           int* isuppz, int* tryrac );
int LAPACKE_dstemr( int matrix_order, char jobz, char range,
                           int n, double* d, double* e, double vl,
                           double vu, int il, int iu,
                           int* m, double* w, double* z, int ldz,
                           int nzc, int* isuppz,
                           int* tryrac );
int LAPACKE_cstemr( int matrix_order, char jobz, char range,
                           int n, float* d, float* e, float vl, float vu,
                           int il, int iu, int* m,
                           float* w, float _Complex* z, int ldz,
                           int nzc, int* isuppz,
                           int* tryrac );
int LAPACKE_zstemr( int matrix_order, char jobz, char range,
                           int n, double* d, double* e, double vl,
                           double vu, int il, int iu,
                           int* m, double* w, double _Complex* z,
                           int ldz, int nzc, int* isuppz,
                           int* tryrac );

int LAPACKE_ssteqr( int matrix_order, char compz, int n, float* d,
                           float* e, float* z, int ldz );
int LAPACKE_dsteqr( int matrix_order, char compz, int n,
                           double* d, double* e, double* z, int ldz );
int LAPACKE_csteqr( int matrix_order, char compz, int n, float* d,
                           float* e, float _Complex* z, int ldz );
int LAPACKE_zsteqr( int matrix_order, char compz, int n,
                           double* d, double* e, double _Complex* z,
                           int ldz );

int LAPACKE_ssterf( int n, float* d, float* e );
int LAPACKE_dsterf( int n, double* d, double* e );

int LAPACKE_sstev( int matrix_order, char jobz, int n, float* d,
                          float* e, float* z, int ldz );
int LAPACKE_dstev( int matrix_order, char jobz, int n, double* d,
                          double* e, double* z, int ldz );

int LAPACKE_sstevd( int matrix_order, char jobz, int n, float* d,
                           float* e, float* z, int ldz );
int LAPACKE_dstevd( int matrix_order, char jobz, int n, double* d,
                           double* e, double* z, int ldz );

int LAPACKE_sstevr( int matrix_order, char jobz, char range,
                           int n, float* d, float* e, float vl, float vu,
                           int il, int iu, float abstol,
                           int* m, float* w, float* z, int ldz,
                           int* isuppz );
int LAPACKE_dstevr( int matrix_order, char jobz, char range,
                           int n, double* d, double* e, double vl,
                           double vu, int il, int iu,
                           double abstol, int* m, double* w, double* z,
                           int ldz, int* isuppz );

int LAPACKE_sstevx( int matrix_order, char jobz, char range,
                           int n, float* d, float* e, float vl, float vu,
                           int il, int iu, float abstol,
                           int* m, float* w, float* z, int ldz,
                           int* ifail );
int LAPACKE_dstevx( int matrix_order, char jobz, char range,
                           int n, double* d, double* e, double vl,
                           double vu, int il, int iu,
                           double abstol, int* m, double* w, double* z,
                           int ldz, int* ifail );

int LAPACKE_ssycon( int matrix_order, char uplo, int n,
                           const float* a, int lda,
                           const int* ipiv, float anorm, float* rcond );
int LAPACKE_dsycon( int matrix_order, char uplo, int n,
                           const double* a, int lda,
                           const int* ipiv, double anorm,
                           double* rcond );
int LAPACKE_csycon( int matrix_order, char uplo, int n,
                           const float _Complex* a, int lda,
                           const int* ipiv, float anorm, float* rcond );
int LAPACKE_zsycon( int matrix_order, char uplo, int n,
                           const double _Complex* a, int lda,
                           const int* ipiv, double anorm,
                           double* rcond );

int LAPACKE_ssyequb( int matrix_order, char uplo, int n,
                            const float* a, int lda, float* s,
                            float* scond, float* amax );
int LAPACKE_dsyequb( int matrix_order, char uplo, int n,
                            const double* a, int lda, double* s,
                            double* scond, double* amax );
int LAPACKE_csyequb( int matrix_order, char uplo, int n,
                            const float _Complex* a, int lda,
                            float* s, float* scond, float* amax );
int LAPACKE_zsyequb( int matrix_order, char uplo, int n,
                            const double _Complex* a, int lda,
                            double* s, double* scond, double* amax );

int LAPACKE_ssyev( int matrix_order, char jobz, char uplo, int n,
                          float* a, int lda, float* w );
int LAPACKE_dsyev( int matrix_order, char jobz, char uplo, int n,
                          double* a, int lda, double* w );

int LAPACKE_ssyevd( int matrix_order, char jobz, char uplo, int n,
                           float* a, int lda, float* w );
int LAPACKE_dsyevd( int matrix_order, char jobz, char uplo, int n,
                           double* a, int lda, double* w );

int LAPACKE_ssyevr( int matrix_order, char jobz, char range, char uplo,
                           int n, float* a, int lda, float vl,
                           float vu, int il, int iu, float abstol,
                           int* m, float* w, float* z, int ldz,
                           int* isuppz );
int LAPACKE_dsyevr( int matrix_order, char jobz, char range, char uplo,
                           int n, double* a, int lda, double vl,
                           double vu, int il, int iu,
                           double abstol, int* m, double* w, double* z,
                           int ldz, int* isuppz );

int LAPACKE_ssyevx( int matrix_order, char jobz, char range, char uplo,
                           int n, float* a, int lda, float vl,
                           float vu, int il, int iu, float abstol,
                           int* m, float* w, float* z, int ldz,
                           int* ifail );
int LAPACKE_dsyevx( int matrix_order, char jobz, char range, char uplo,
                           int n, double* a, int lda, double vl,
                           double vu, int il, int iu,
                           double abstol, int* m, double* w, double* z,
                           int ldz, int* ifail );

int LAPACKE_ssygst( int matrix_order, int itype, char uplo,
                           int n, float* a, int lda,
                           const float* b, int ldb );
int LAPACKE_dsygst( int matrix_order, int itype, char uplo,
                           int n, double* a, int lda,
                           const double* b, int ldb );

int LAPACKE_ssygv( int matrix_order, int itype, char jobz,
                          char uplo, int n, float* a, int lda,
                          float* b, int ldb, float* w );
int LAPACKE_dsygv( int matrix_order, int itype, char jobz,
                          char uplo, int n, double* a, int lda,
                          double* b, int ldb, double* w );

int LAPACKE_ssygvd( int matrix_order, int itype, char jobz,
                           char uplo, int n, float* a, int lda,
                           float* b, int ldb, float* w );
int LAPACKE_dsygvd( int matrix_order, int itype, char jobz,
                           char uplo, int n, double* a, int lda,
                           double* b, int ldb, double* w );

int LAPACKE_ssygvx( int matrix_order, int itype, char jobz,
                           char range, char uplo, int n, float* a,
                           int lda, float* b, int ldb, float vl,
                           float vu, int il, int iu, float abstol,
                           int* m, float* w, float* z, int ldz,
                           int* ifail );
int LAPACKE_dsygvx( int matrix_order, int itype, char jobz,
                           char range, char uplo, int n, double* a,
                           int lda, double* b, int ldb, double vl,
                           double vu, int il, int iu,
                           double abstol, int* m, double* w, double* z,
                           int ldz, int* ifail );

int LAPACKE_ssyrfs( int matrix_order, char uplo, int n,
                           int nrhs, const float* a, int lda,
                           const float* af, int ldaf,
                           const int* ipiv, const float* b,
                           int ldb, float* x, int ldx,
                           float* ferr, float* berr );
int LAPACKE_dsyrfs( int matrix_order, char uplo, int n,
                           int nrhs, const double* a, int lda,
                           const double* af, int ldaf,
                           const int* ipiv, const double* b,
                           int ldb, double* x, int ldx,
                           double* ferr, double* berr );
int LAPACKE_csyrfs( int matrix_order, char uplo, int n,
                           int nrhs, const float _Complex* a,
                           int lda, const float _Complex* af,
                           int ldaf, const int* ipiv,
                           const float _Complex* b, int ldb,
                           float _Complex* x, int ldx, float* ferr,
                           float* berr );
int LAPACKE_zsyrfs( int matrix_order, char uplo, int n,
                           int nrhs, const double _Complex* a,
                           int lda, const double _Complex* af,
                           int ldaf, const int* ipiv,
                           const double _Complex* b, int ldb,
                           double _Complex* x, int ldx,
                           double* ferr, double* berr );

int LAPACKE_ssyrfsx( int matrix_order, char uplo, char equed,
                            int n, int nrhs, const float* a,
                            int lda, const float* af, int ldaf,
                            const int* ipiv, const float* s,
                            const float* b, int ldb, float* x,
                            int ldx, float* rcond, float* berr,
                            int n_err_bnds, float* err_bnds_norm,
                            float* err_bnds_comp, int nparams,
                            float* params );
int LAPACKE_dsyrfsx( int matrix_order, char uplo, char equed,
                            int n, int nrhs, const double* a,
                            int lda, const double* af, int ldaf,
                            const int* ipiv, const double* s,
                            const double* b, int ldb, double* x,
                            int ldx, double* rcond, double* berr,
                            int n_err_bnds, double* err_bnds_norm,
                            double* err_bnds_comp, int nparams,
                            double* params );
int LAPACKE_csyrfsx( int matrix_order, char uplo, char equed,
                            int n, int nrhs,
                            const float _Complex* a, int lda,
                            const float _Complex* af, int ldaf,
                            const int* ipiv, const float* s,
                            const float _Complex* b, int ldb,
                            float _Complex* x, int ldx,
                            float* rcond, float* berr, int n_err_bnds,
                            float* err_bnds_norm, float* err_bnds_comp,
                            int nparams, float* params );
int LAPACKE_zsyrfsx( int matrix_order, char uplo, char equed,
                            int n, int nrhs,
                            const double _Complex* a, int lda,
                            const double _Complex* af, int ldaf,
                            const int* ipiv, const double* s,
                            const double _Complex* b, int ldb,
                            double _Complex* x, int ldx,
                            double* rcond, double* berr, int n_err_bnds,
                            double* err_bnds_norm, double* err_bnds_comp,
                            int nparams, double* params );

int LAPACKE_ssysv( int matrix_order, char uplo, int n,
                          int nrhs, float* a, int lda,
                          int* ipiv, float* b, int ldb );
int LAPACKE_dsysv( int matrix_order, char uplo, int n,
                          int nrhs, double* a, int lda,
                          int* ipiv, double* b, int ldb );
int LAPACKE_csysv( int matrix_order, char uplo, int n,
                          int nrhs, float _Complex* a,
                          int lda, int* ipiv,
                          float _Complex* b, int ldb );
int LAPACKE_zsysv( int matrix_order, char uplo, int n,
                          int nrhs, double _Complex* a,
                          int lda, int* ipiv,
                          double _Complex* b, int ldb );

int LAPACKE_ssysvx( int matrix_order, char fact, char uplo, int n,
                           int nrhs, const float* a, int lda,
                           float* af, int ldaf, int* ipiv,
                           const float* b, int ldb, float* x,
                           int ldx, float* rcond, float* ferr,
                           float* berr );
int LAPACKE_dsysvx( int matrix_order, char fact, char uplo, int n,
                           int nrhs, const double* a, int lda,
                           double* af, int ldaf, int* ipiv,
                           const double* b, int ldb, double* x,
                           int ldx, double* rcond, double* ferr,
                           double* berr );
int LAPACKE_csysvx( int matrix_order, char fact, char uplo, int n,
                           int nrhs, const float _Complex* a,
                           int lda, float _Complex* af,
                           int ldaf, int* ipiv,
                           const float _Complex* b, int ldb,
                           float _Complex* x, int ldx,
                           float* rcond, float* ferr, float* berr );
int LAPACKE_zsysvx( int matrix_order, char fact, char uplo, int n,
                           int nrhs, const double _Complex* a,
                           int lda, double _Complex* af,
                           int ldaf, int* ipiv,
                           const double _Complex* b, int ldb,
                           double _Complex* x, int ldx,
                           double* rcond, double* ferr, double* berr );

int LAPACKE_ssysvxx( int matrix_order, char fact, char uplo,
                            int n, int nrhs, float* a,
                            int lda, float* af, int ldaf,
                            int* ipiv, char* equed, float* s, float* b,
                            int ldb, float* x, int ldx,
                            float* rcond, float* rpvgrw, float* berr,
                            int n_err_bnds, float* err_bnds_norm,
                            float* err_bnds_comp, int nparams,
                            float* params );
int LAPACKE_dsysvxx( int matrix_order, char fact, char uplo,
                            int n, int nrhs, double* a,
                            int lda, double* af, int ldaf,
                            int* ipiv, char* equed, double* s, double* b,
                            int ldb, double* x, int ldx,
                            double* rcond, double* rpvgrw, double* berr,
                            int n_err_bnds, double* err_bnds_norm,
                            double* err_bnds_comp, int nparams,
                            double* params );
int LAPACKE_csysvxx( int matrix_order, char fact, char uplo,
                            int n, int nrhs,
                            float _Complex* a, int lda,
                            float _Complex* af, int ldaf,
                            int* ipiv, char* equed, float* s,
                            float _Complex* b, int ldb,
                            float _Complex* x, int ldx,
                            float* rcond, float* rpvgrw, float* berr,
                            int n_err_bnds, float* err_bnds_norm,
                            float* err_bnds_comp, int nparams,
                            float* params );
int LAPACKE_zsysvxx( int matrix_order, char fact, char uplo,
                            int n, int nrhs,
                            double _Complex* a, int lda,
                            double _Complex* af, int ldaf,
                            int* ipiv, char* equed, double* s,
                            double _Complex* b, int ldb,
                            double _Complex* x, int ldx,
                            double* rcond, double* rpvgrw, double* berr,
                            int n_err_bnds, double* err_bnds_norm,
                            double* err_bnds_comp, int nparams,
                            double* params );

int LAPACKE_ssytrd( int matrix_order, char uplo, int n, float* a,
                           int lda, float* d, float* e, float* tau );
int LAPACKE_dsytrd( int matrix_order, char uplo, int n, double* a,
                           int lda, double* d, double* e, double* tau );

int LAPACKE_ssytrf( int matrix_order, char uplo, int n, float* a,
                           int lda, int* ipiv );
int LAPACKE_dsytrf( int matrix_order, char uplo, int n, double* a,
                           int lda, int* ipiv );
int LAPACKE_csytrf( int matrix_order, char uplo, int n,
                           float _Complex* a, int lda,
                           int* ipiv );
int LAPACKE_zsytrf( int matrix_order, char uplo, int n,
                           double _Complex* a, int lda,
                           int* ipiv );

int LAPACKE_ssytri( int matrix_order, char uplo, int n, float* a,
                           int lda, const int* ipiv );
int LAPACKE_dsytri( int matrix_order, char uplo, int n, double* a,
                           int lda, const int* ipiv );
int LAPACKE_csytri( int matrix_order, char uplo, int n,
                           float _Complex* a, int lda,
                           const int* ipiv );
int LAPACKE_zsytri( int matrix_order, char uplo, int n,
                           double _Complex* a, int lda,
                           const int* ipiv );

int LAPACKE_ssytrs( int matrix_order, char uplo, int n,
                           int nrhs, const float* a, int lda,
                           const int* ipiv, float* b, int ldb );
int LAPACKE_dsytrs( int matrix_order, char uplo, int n,
                           int nrhs, const double* a, int lda,
                           const int* ipiv, double* b, int ldb );
int LAPACKE_csytrs( int matrix_order, char uplo, int n,
                           int nrhs, const float _Complex* a,
                           int lda, const int* ipiv,
                           float _Complex* b, int ldb );
int LAPACKE_zsytrs( int matrix_order, char uplo, int n,
                           int nrhs, const double _Complex* a,
                           int lda, const int* ipiv,
                           double _Complex* b, int ldb );

int LAPACKE_stbcon( int matrix_order, char norm, char uplo, char diag,
                           int n, int kd, const float* ab,
                           int ldab, float* rcond );
int LAPACKE_dtbcon( int matrix_order, char norm, char uplo, char diag,
                           int n, int kd, const double* ab,
                           int ldab, double* rcond );
int LAPACKE_ctbcon( int matrix_order, char norm, char uplo, char diag,
                           int n, int kd,
                           const float _Complex* ab, int ldab,
                           float* rcond );
int LAPACKE_ztbcon( int matrix_order, char norm, char uplo, char diag,
                           int n, int kd,
                           const double _Complex* ab, int ldab,
                           double* rcond );

int LAPACKE_stbrfs( int matrix_order, char uplo, char trans, char diag,
                           int n, int kd, int nrhs,
                           const float* ab, int ldab, const float* b,
                           int ldb, const float* x, int ldx,
                           float* ferr, float* berr );
int LAPACKE_dtbrfs( int matrix_order, char uplo, char trans, char diag,
                           int n, int kd, int nrhs,
                           const double* ab, int ldab, const double* b,
                           int ldb, const double* x, int ldx,
                           double* ferr, double* berr );
int LAPACKE_ctbrfs( int matrix_order, char uplo, char trans, char diag,
                           int n, int kd, int nrhs,
                           const float _Complex* ab, int ldab,
                           const float _Complex* b, int ldb,
                           const float _Complex* x, int ldx,
                           float* ferr, float* berr );
int LAPACKE_ztbrfs( int matrix_order, char uplo, char trans, char diag,
                           int n, int kd, int nrhs,
                           const double _Complex* ab, int ldab,
                           const double _Complex* b, int ldb,
                           const double _Complex* x, int ldx,
                           double* ferr, double* berr );

int LAPACKE_stbtrs( int matrix_order, char uplo, char trans, char diag,
                           int n, int kd, int nrhs,
                           const float* ab, int ldab, float* b,
                           int ldb );
int LAPACKE_dtbtrs( int matrix_order, char uplo, char trans, char diag,
                           int n, int kd, int nrhs,
                           const double* ab, int ldab, double* b,
                           int ldb );
int LAPACKE_ctbtrs( int matrix_order, char uplo, char trans, char diag,
                           int n, int kd, int nrhs,
                           const float _Complex* ab, int ldab,
                           float _Complex* b, int ldb );
int LAPACKE_ztbtrs( int matrix_order, char uplo, char trans, char diag,
                           int n, int kd, int nrhs,
                           const double _Complex* ab, int ldab,
                           double _Complex* b, int ldb );

int LAPACKE_stfsm( int matrix_order, char transr, char side, char uplo,
                          char trans, char diag, int m, int n,
                          float alpha, const float* a, float* b,
                          int ldb );
int LAPACKE_dtfsm( int matrix_order, char transr, char side, char uplo,
                          char trans, char diag, int m, int n,
                          double alpha, const double* a, double* b,
                          int ldb );
int LAPACKE_ctfsm( int matrix_order, char transr, char side, char uplo,
                          char trans, char diag, int m, int n,
                          float _Complex alpha,
                          const float _Complex* a,
                          float _Complex* b, int ldb );
int LAPACKE_ztfsm( int matrix_order, char transr, char side, char uplo,
                          char trans, char diag, int m, int n,
                          double _Complex alpha,
                          const double _Complex* a,
                          double _Complex* b, int ldb );

int LAPACKE_stftri( int matrix_order, char transr, char uplo, char diag,
                           int n, float* a );
int LAPACKE_dtftri( int matrix_order, char transr, char uplo, char diag,
                           int n, double* a );
int LAPACKE_ctftri( int matrix_order, char transr, char uplo, char diag,
                           int n, float _Complex* a );
int LAPACKE_ztftri( int matrix_order, char transr, char uplo, char diag,
                           int n, double _Complex* a );

int LAPACKE_stfttp( int matrix_order, char transr, char uplo,
                           int n, const float* arf, float* ap );
int LAPACKE_dtfttp( int matrix_order, char transr, char uplo,
                           int n, const double* arf, double* ap );
int LAPACKE_ctfttp( int matrix_order, char transr, char uplo,
                           int n, const float _Complex* arf,
                           float _Complex* ap );
int LAPACKE_ztfttp( int matrix_order, char transr, char uplo,
                           int n, const double _Complex* arf,
                           double _Complex* ap );

int LAPACKE_stfttr( int matrix_order, char transr, char uplo,
                           int n, const float* arf, float* a,
                           int lda );
int LAPACKE_dtfttr( int matrix_order, char transr, char uplo,
                           int n, const double* arf, double* a,
                           int lda );
int LAPACKE_ctfttr( int matrix_order, char transr, char uplo,
                           int n, const float _Complex* arf,
                           float _Complex* a, int lda );
int LAPACKE_ztfttr( int matrix_order, char transr, char uplo,
                           int n, const double _Complex* arf,
                           double _Complex* a, int lda );

int LAPACKE_stgevc( int matrix_order, char side, char howmny,
                           const int* select, int n,
                           const float* s, int lds, const float* p,
                           int ldp, float* vl, int ldvl,
                           float* vr, int ldvr, int mm,
                           int* m );
int LAPACKE_dtgevc( int matrix_order, char side, char howmny,
                           const int* select, int n,
                           const double* s, int lds, const double* p,
                           int ldp, double* vl, int ldvl,
                           double* vr, int ldvr, int mm,
                           int* m );
int LAPACKE_ctgevc( int matrix_order, char side, char howmny,
                           const int* select, int n,
                           const float _Complex* s, int lds,
                           const float _Complex* p, int ldp,
                           float _Complex* vl, int ldvl,
                           float _Complex* vr, int ldvr,
                           int mm, int* m );
int LAPACKE_ztgevc( int matrix_order, char side, char howmny,
                           const int* select, int n,
                           const double _Complex* s, int lds,
                           const double _Complex* p, int ldp,
                           double _Complex* vl, int ldvl,
                           double _Complex* vr, int ldvr,
                           int mm, int* m );

int LAPACKE_stgexc( int matrix_order, int wantq,
                           int wantz, int n, float* a,
                           int lda, float* b, int ldb, float* q,
                           int ldq, float* z, int ldz,
                           int* ifst, int* ilst );
int LAPACKE_dtgexc( int matrix_order, int wantq,
                           int wantz, int n, double* a,
                           int lda, double* b, int ldb, double* q,
                           int ldq, double* z, int ldz,
                           int* ifst, int* ilst );
int LAPACKE_ctgexc( int matrix_order, int wantq,
                           int wantz, int n,
                           float _Complex* a, int lda,
                           float _Complex* b, int ldb,
                           float _Complex* q, int ldq,
                           float _Complex* z, int ldz,
                           int ifst, int ilst );
int LAPACKE_ztgexc( int matrix_order, int wantq,
                           int wantz, int n,
                           double _Complex* a, int lda,
                           double _Complex* b, int ldb,
                           double _Complex* q, int ldq,
                           double _Complex* z, int ldz,
                           int ifst, int ilst );

int LAPACKE_stgsen( int matrix_order, int ijob,
                           int wantq, int wantz,
                           const int* select, int n, float* a,
                           int lda, float* b, int ldb,
                           float* alphar, float* alphai, float* beta, float* q,
                           int ldq, float* z, int ldz,
                           int* m, float* pl, float* pr, float* dif );
int LAPACKE_dtgsen( int matrix_order, int ijob,
                           int wantq, int wantz,
                           const int* select, int n,
                           double* a, int lda, double* b, int ldb,
                           double* alphar, double* alphai, double* beta,
                           double* q, int ldq, double* z, int ldz,
                           int* m, double* pl, double* pr, double* dif );
int LAPACKE_ctgsen( int matrix_order, int ijob,
                           int wantq, int wantz,
                           const int* select, int n,
                           float _Complex* a, int lda,
                           float _Complex* b, int ldb,
                           float _Complex* alpha,
                           float _Complex* beta, float _Complex* q,
                           int ldq, float _Complex* z,
                           int ldz, int* m, float* pl, float* pr,
                           float* dif );
int LAPACKE_ztgsen( int matrix_order, int ijob,
                           int wantq, int wantz,
                           const int* select, int n,
                           double _Complex* a, int lda,
                           double _Complex* b, int ldb,
                           double _Complex* alpha,
                           double _Complex* beta,
                           double _Complex* q, int ldq,
                           double _Complex* z, int ldz,
                           int* m, double* pl, double* pr, double* dif );

int LAPACKE_stgsja( int matrix_order, char jobu, char jobv, char jobq,
                           int m, int p, int n,
                           int k, int l, float* a, int lda,
                           float* b, int ldb, float tola, float tolb,
                           float* alpha, float* beta, float* u, int ldu,
                           float* v, int ldv, float* q, int ldq,
                           int* ncycle );
int LAPACKE_dtgsja( int matrix_order, char jobu, char jobv, char jobq,
                           int m, int p, int n,
                           int k, int l, double* a,
                           int lda, double* b, int ldb,
                           double tola, double tolb, double* alpha,
                           double* beta, double* u, int ldu, double* v,
                           int ldv, double* q, int ldq,
                           int* ncycle );
int LAPACKE_ctgsja( int matrix_order, char jobu, char jobv, char jobq,
                           int m, int p, int n,
                           int k, int l, float _Complex* a,
                           int lda, float _Complex* b,
                           int ldb, float tola, float tolb, float* alpha,
                           float* beta, float _Complex* u, int ldu,
                           float _Complex* v, int ldv,
                           float _Complex* q, int ldq,
                           int* ncycle );
int LAPACKE_ztgsja( int matrix_order, char jobu, char jobv, char jobq,
                           int m, int p, int n,
                           int k, int l, double _Complex* a,
                           int lda, double _Complex* b,
                           int ldb, double tola, double tolb,
                           double* alpha, double* beta,
                           double _Complex* u, int ldu,
                           double _Complex* v, int ldv,
                           double _Complex* q, int ldq,
                           int* ncycle );

int LAPACKE_stgsna( int matrix_order, char job, char howmny,
                           const int* select, int n,
                           const float* a, int lda, const float* b,
                           int ldb, const float* vl, int ldvl,
                           const float* vr, int ldvr, float* s,
                           float* dif, int mm, int* m );
int LAPACKE_dtgsna( int matrix_order, char job, char howmny,
                           const int* select, int n,
                           const double* a, int lda, const double* b,
                           int ldb, const double* vl, int ldvl,
                           const double* vr, int ldvr, double* s,
                           double* dif, int mm, int* m );
int LAPACKE_ctgsna( int matrix_order, char job, char howmny,
                           const int* select, int n,
                           const float _Complex* a, int lda,
                           const float _Complex* b, int ldb,
                           const float _Complex* vl, int ldvl,
                           const float _Complex* vr, int ldvr,
                           float* s, float* dif, int mm, int* m );
int LAPACKE_ztgsna( int matrix_order, char job, char howmny,
                           const int* select, int n,
                           const double _Complex* a, int lda,
                           const double _Complex* b, int ldb,
                           const double _Complex* vl, int ldvl,
                           const double _Complex* vr, int ldvr,
                           double* s, double* dif, int mm,
                           int* m );

int LAPACKE_stgsyl( int matrix_order, char trans, int ijob,
                           int m, int n, const float* a,
                           int lda, const float* b, int ldb,
                           float* c, int ldc, const float* d,
                           int ldd, const float* e, int lde,
                           float* f, int ldf, float* scale, float* dif );
int LAPACKE_dtgsyl( int matrix_order, char trans, int ijob,
                           int m, int n, const double* a,
                           int lda, const double* b, int ldb,
                           double* c, int ldc, const double* d,
                           int ldd, const double* e, int lde,
                           double* f, int ldf, double* scale,
                           double* dif );
int LAPACKE_ctgsyl( int matrix_order, char trans, int ijob,
                           int m, int n,
                           const float _Complex* a, int lda,
                           const float _Complex* b, int ldb,
                           float _Complex* c, int ldc,
                           const float _Complex* d, int ldd,
                           const float _Complex* e, int lde,
                           float _Complex* f, int ldf,
                           float* scale, float* dif );
int LAPACKE_ztgsyl( int matrix_order, char trans, int ijob,
                           int m, int n,
                           const double _Complex* a, int lda,
                           const double _Complex* b, int ldb,
                           double _Complex* c, int ldc,
                           const double _Complex* d, int ldd,
                           const double _Complex* e, int lde,
                           double _Complex* f, int ldf,
                           double* scale, double* dif );

int LAPACKE_stpcon( int matrix_order, char norm, char uplo, char diag,
                           int n, const float* ap, float* rcond );
int LAPACKE_dtpcon( int matrix_order, char norm, char uplo, char diag,
                           int n, const double* ap, double* rcond );
int LAPACKE_ctpcon( int matrix_order, char norm, char uplo, char diag,
                           int n, const float _Complex* ap,
                           float* rcond );
int LAPACKE_ztpcon( int matrix_order, char norm, char uplo, char diag,
                           int n, const double _Complex* ap,
                           double* rcond );

int LAPACKE_stprfs( int matrix_order, char uplo, char trans, char diag,
                           int n, int nrhs, const float* ap,
                           const float* b, int ldb, const float* x,
                           int ldx, float* ferr, float* berr );
int LAPACKE_dtprfs( int matrix_order, char uplo, char trans, char diag,
                           int n, int nrhs, const double* ap,
                           const double* b, int ldb, const double* x,
                           int ldx, double* ferr, double* berr );
int LAPACKE_ctprfs( int matrix_order, char uplo, char trans, char diag,
                           int n, int nrhs,
                           const float _Complex* ap,
                           const float _Complex* b, int ldb,
                           const float _Complex* x, int ldx,
                           float* ferr, float* berr );
int LAPACKE_ztprfs( int matrix_order, char uplo, char trans, char diag,
                           int n, int nrhs,
                           const double _Complex* ap,
                           const double _Complex* b, int ldb,
                           const double _Complex* x, int ldx,
                           double* ferr, double* berr );

int LAPACKE_stptri( int matrix_order, char uplo, char diag, int n,
                           float* ap );
int LAPACKE_dtptri( int matrix_order, char uplo, char diag, int n,
                           double* ap );
int LAPACKE_ctptri( int matrix_order, char uplo, char diag, int n,
                           float _Complex* ap );
int LAPACKE_ztptri( int matrix_order, char uplo, char diag, int n,
                           double _Complex* ap );

int LAPACKE_stptrs( int matrix_order, char uplo, char trans, char diag,
                           int n, int nrhs, const float* ap,
                           float* b, int ldb );
int LAPACKE_dtptrs( int matrix_order, char uplo, char trans, char diag,
                           int n, int nrhs, const double* ap,
                           double* b, int ldb );
int LAPACKE_ctptrs( int matrix_order, char uplo, char trans, char diag,
                           int n, int nrhs,
                           const float _Complex* ap,
                           float _Complex* b, int ldb );
int LAPACKE_ztptrs( int matrix_order, char uplo, char trans, char diag,
                           int n, int nrhs,
                           const double _Complex* ap,
                           double _Complex* b, int ldb );

int LAPACKE_stpttf( int matrix_order, char transr, char uplo,
                           int n, const float* ap, float* arf );
int LAPACKE_dtpttf( int matrix_order, char transr, char uplo,
                           int n, const double* ap, double* arf );
int LAPACKE_ctpttf( int matrix_order, char transr, char uplo,
                           int n, const float _Complex* ap,
                           float _Complex* arf );
int LAPACKE_ztpttf( int matrix_order, char transr, char uplo,
                           int n, const double _Complex* ap,
                           double _Complex* arf );

int LAPACKE_stpttr( int matrix_order, char uplo, int n,
                           const float* ap, float* a, int lda );
int LAPACKE_dtpttr( int matrix_order, char uplo, int n,
                           const double* ap, double* a, int lda );
int LAPACKE_ctpttr( int matrix_order, char uplo, int n,
                           const float _Complex* ap,
                           float _Complex* a, int lda );
int LAPACKE_ztpttr( int matrix_order, char uplo, int n,
                           const double _Complex* ap,
                           double _Complex* a, int lda );

int LAPACKE_strcon( int matrix_order, char norm, char uplo, char diag,
                           int n, const float* a, int lda,
                           float* rcond );
int LAPACKE_dtrcon( int matrix_order, char norm, char uplo, char diag,
                           int n, const double* a, int lda,
                           double* rcond );
int LAPACKE_ctrcon( int matrix_order, char norm, char uplo, char diag,
                           int n, const float _Complex* a,
                           int lda, float* rcond );
int LAPACKE_ztrcon( int matrix_order, char norm, char uplo, char diag,
                           int n, const double _Complex* a,
                           int lda, double* rcond );

int LAPACKE_strevc( int matrix_order, char side, char howmny,
                           int* select, int n, const float* t,
                           int ldt, float* vl, int ldvl,
                           float* vr, int ldvr, int mm,
                           int* m );
int LAPACKE_dtrevc( int matrix_order, char side, char howmny,
                           int* select, int n,
                           const double* t, int ldt, double* vl,
                           int ldvl, double* vr, int ldvr,
                           int mm, int* m );
int LAPACKE_ctrevc( int matrix_order, char side, char howmny,
                           const int* select, int n,
                           float _Complex* t, int ldt,
                           float _Complex* vl, int ldvl,
                           float _Complex* vr, int ldvr,
                           int mm, int* m );
int LAPACKE_ztrevc( int matrix_order, char side, char howmny,
                           const int* select, int n,
                           double _Complex* t, int ldt,
                           double _Complex* vl, int ldvl,
                           double _Complex* vr, int ldvr,
                           int mm, int* m );

int LAPACKE_strexc( int matrix_order, char compq, int n, float* t,
                           int ldt, float* q, int ldq,
                           int* ifst, int* ilst );
int LAPACKE_dtrexc( int matrix_order, char compq, int n,
                           double* t, int ldt, double* q, int ldq,
                           int* ifst, int* ilst );
int LAPACKE_ctrexc( int matrix_order, char compq, int n,
                           float _Complex* t, int ldt,
                           float _Complex* q, int ldq,
                           int ifst, int ilst );
int LAPACKE_ztrexc( int matrix_order, char compq, int n,
                           double _Complex* t, int ldt,
                           double _Complex* q, int ldq,
                           int ifst, int ilst );

int LAPACKE_strrfs( int matrix_order, char uplo, char trans, char diag,
                           int n, int nrhs, const float* a,
                           int lda, const float* b, int ldb,
                           const float* x, int ldx, float* ferr,
                           float* berr );
int LAPACKE_dtrrfs( int matrix_order, char uplo, char trans, char diag,
                           int n, int nrhs, const double* a,
                           int lda, const double* b, int ldb,
                           const double* x, int ldx, double* ferr,
                           double* berr );
int LAPACKE_ctrrfs( int matrix_order, char uplo, char trans, char diag,
                           int n, int nrhs,
                           const float _Complex* a, int lda,
                           const float _Complex* b, int ldb,
                           const float _Complex* x, int ldx,
                           float* ferr, float* berr );
int LAPACKE_ztrrfs( int matrix_order, char uplo, char trans, char diag,
                           int n, int nrhs,
                           const double _Complex* a, int lda,
                           const double _Complex* b, int ldb,
                           const double _Complex* x, int ldx,
                           double* ferr, double* berr );

int LAPACKE_strsen( int matrix_order, char job, char compq,
                           const int* select, int n, float* t,
                           int ldt, float* q, int ldq, float* wr,
                           float* wi, int* m, float* s, float* sep );
int LAPACKE_dtrsen( int matrix_order, char job, char compq,
                           const int* select, int n,
                           double* t, int ldt, double* q, int ldq,
                           double* wr, double* wi, int* m, double* s,
                           double* sep );
int LAPACKE_ctrsen( int matrix_order, char job, char compq,
                           const int* select, int n,
                           float _Complex* t, int ldt,
                           float _Complex* q, int ldq,
                           float _Complex* w, int* m, float* s,
                           float* sep );
int LAPACKE_ztrsen( int matrix_order, char job, char compq,
                           const int* select, int n,
                           double _Complex* t, int ldt,
                           double _Complex* q, int ldq,
                           double _Complex* w, int* m, double* s,
                           double* sep );

int LAPACKE_strsna( int matrix_order, char job, char howmny,
                           const int* select, int n,
                           const float* t, int ldt, const float* vl,
                           int ldvl, const float* vr, int ldvr,
                           float* s, float* sep, int mm, int* m );
int LAPACKE_dtrsna( int matrix_order, char job, char howmny,
                           const int* select, int n,
                           const double* t, int ldt, const double* vl,
                           int ldvl, const double* vr, int ldvr,
                           double* s, double* sep, int mm,
                           int* m );
int LAPACKE_ctrsna( int matrix_order, char job, char howmny,
                           const int* select, int n,
                           const float _Complex* t, int ldt,
                           const float _Complex* vl, int ldvl,
                           const float _Complex* vr, int ldvr,
                           float* s, float* sep, int mm, int* m );
int LAPACKE_ztrsna( int matrix_order, char job, char howmny,
                           const int* select, int n,
                           const double _Complex* t, int ldt,
                           const double _Complex* vl, int ldvl,
                           const double _Complex* vr, int ldvr,
                           double* s, double* sep, int mm,
                           int* m );

int LAPACKE_strsyl( int matrix_order, char trana, char tranb,
                           int isgn, int m, int n,
                           const float* a, int lda, const float* b,
                           int ldb, float* c, int ldc,
                           float* scale );
int LAPACKE_dtrsyl( int matrix_order, char trana, char tranb,
                           int isgn, int m, int n,
                           const double* a, int lda, const double* b,
                           int ldb, double* c, int ldc,
                           double* scale );
int LAPACKE_ctrsyl( int matrix_order, char trana, char tranb,
                           int isgn, int m, int n,
                           const float _Complex* a, int lda,
                           const float _Complex* b, int ldb,
                           float _Complex* c, int ldc,
                           float* scale );
int LAPACKE_ztrsyl( int matrix_order, char trana, char tranb,
                           int isgn, int m, int n,
                           const double _Complex* a, int lda,
                           const double _Complex* b, int ldb,
                           double _Complex* c, int ldc,
                           double* scale );

int LAPACKE_strtri( int matrix_order, char uplo, char diag, int n,
                           float* a, int lda );
int LAPACKE_dtrtri( int matrix_order, char uplo, char diag, int n,
                           double* a, int lda );
int LAPACKE_ctrtri( int matrix_order, char uplo, char diag, int n,
                           float _Complex* a, int lda );
int LAPACKE_ztrtri( int matrix_order, char uplo, char diag, int n,
                           double _Complex* a, int lda );

int LAPACKE_strtrs( int matrix_order, char uplo, char trans, char diag,
                           int n, int nrhs, const float* a,
                           int lda, float* b, int ldb );
int LAPACKE_dtrtrs( int matrix_order, char uplo, char trans, char diag,
                           int n, int nrhs, const double* a,
                           int lda, double* b, int ldb );
int LAPACKE_ctrtrs( int matrix_order, char uplo, char trans, char diag,
                           int n, int nrhs,
                           const float _Complex* a, int lda,
                           float _Complex* b, int ldb );
int LAPACKE_ztrtrs( int matrix_order, char uplo, char trans, char diag,
                           int n, int nrhs,
                           const double _Complex* a, int lda,
                           double _Complex* b, int ldb );

int LAPACKE_strttf( int matrix_order, char transr, char uplo,
                           int n, const float* a, int lda,
                           float* arf );
int LAPACKE_dtrttf( int matrix_order, char transr, char uplo,
                           int n, const double* a, int lda,
                           double* arf );
int LAPACKE_ctrttf( int matrix_order, char transr, char uplo,
                           int n, const float _Complex* a,
                           int lda, float _Complex* arf );
int LAPACKE_ztrttf( int matrix_order, char transr, char uplo,
                           int n, const double _Complex* a,
                           int lda, double _Complex* arf );

int LAPACKE_strttp( int matrix_order, char uplo, int n,
                           const float* a, int lda, float* ap );
int LAPACKE_dtrttp( int matrix_order, char uplo, int n,
                           const double* a, int lda, double* ap );
int LAPACKE_ctrttp( int matrix_order, char uplo, int n,
                           const float _Complex* a, int lda,
                           float _Complex* ap );
int LAPACKE_ztrttp( int matrix_order, char uplo, int n,
                           const double _Complex* a, int lda,
                           double _Complex* ap );

int LAPACKE_stzrzf( int matrix_order, int m, int n,
                           float* a, int lda, float* tau );
int LAPACKE_dtzrzf( int matrix_order, int m, int n,
                           double* a, int lda, double* tau );
int LAPACKE_ctzrzf( int matrix_order, int m, int n,
                           float _Complex* a, int lda,
                           float _Complex* tau );
int LAPACKE_ztzrzf( int matrix_order, int m, int n,
                           double _Complex* a, int lda,
                           double _Complex* tau );

int LAPACKE_cungbr( int matrix_order, char vect, int m,
                           int n, int k, float _Complex* a,
                           int lda, const float _Complex* tau );
int LAPACKE_zungbr( int matrix_order, char vect, int m,
                           int n, int k, double _Complex* a,
                           int lda, const double _Complex* tau );

int LAPACKE_cunghr( int matrix_order, int n, int ilo,
                           int ihi, float _Complex* a,
                           int lda, const float _Complex* tau );
int LAPACKE_zunghr( int matrix_order, int n, int ilo,
                           int ihi, double _Complex* a,
                           int lda, const double _Complex* tau );

int LAPACKE_cunglq( int matrix_order, int m, int n,
                           int k, float _Complex* a,
                           int lda, const float _Complex* tau );
int LAPACKE_zunglq( int matrix_order, int m, int n,
                           int k, double _Complex* a,
                           int lda, const double _Complex* tau );

int LAPACKE_cungql( int matrix_order, int m, int n,
                           int k, float _Complex* a,
                           int lda, const float _Complex* tau );
int LAPACKE_zungql( int matrix_order, int m, int n,
                           int k, double _Complex* a,
                           int lda, const double _Complex* tau );

int LAPACKE_cungqr( int matrix_order, int m, int n,
                           int k, float _Complex* a,
                           int lda, const float _Complex* tau );
int LAPACKE_zungqr( int matrix_order, int m, int n,
                           int k, double _Complex* a,
                           int lda, const double _Complex* tau );

int LAPACKE_cungrq( int matrix_order, int m, int n,
                           int k, float _Complex* a,
                           int lda, const float _Complex* tau );
int LAPACKE_zungrq( int matrix_order, int m, int n,
                           int k, double _Complex* a,
                           int lda, const double _Complex* tau );

int LAPACKE_cungtr( int matrix_order, char uplo, int n,
                           float _Complex* a, int lda,
                           const float _Complex* tau );
int LAPACKE_zungtr( int matrix_order, char uplo, int n,
                           double _Complex* a, int lda,
                           const double _Complex* tau );

int LAPACKE_cunmbr( int matrix_order, char vect, char side, char trans,
                           int m, int n, int k,
                           const float _Complex* a, int lda,
                           const float _Complex* tau,
                           float _Complex* c, int ldc );
int LAPACKE_zunmbr( int matrix_order, char vect, char side, char trans,
                           int m, int n, int k,
                           const double _Complex* a, int lda,
                           const double _Complex* tau,
                           double _Complex* c, int ldc );

int LAPACKE_cunmhr( int matrix_order, char side, char trans,
                           int m, int n, int ilo,
                           int ihi, const float _Complex* a,
                           int lda, const float _Complex* tau,
                           float _Complex* c, int ldc );
int LAPACKE_zunmhr( int matrix_order, char side, char trans,
                           int m, int n, int ilo,
                           int ihi, const double _Complex* a,
                           int lda, const double _Complex* tau,
                           double _Complex* c, int ldc );

int LAPACKE_cunmlq( int matrix_order, char side, char trans,
                           int m, int n, int k,
                           const float _Complex* a, int lda,
                           const float _Complex* tau,
                           float _Complex* c, int ldc );
int LAPACKE_zunmlq( int matrix_order, char side, char trans,
                           int m, int n, int k,
                           const double _Complex* a, int lda,
                           const double _Complex* tau,
                           double _Complex* c, int ldc );

int LAPACKE_cunmql( int matrix_order, char side, char trans,
                           int m, int n, int k,
                           const float _Complex* a, int lda,
                           const float _Complex* tau,
                           float _Complex* c, int ldc );
int LAPACKE_zunmql( int matrix_order, char side, char trans,
                           int m, int n, int k,
                           const double _Complex* a, int lda,
                           const double _Complex* tau,
                           double _Complex* c, int ldc );

int LAPACKE_cunmqr( int matrix_order, char side, char trans,
                           int m, int n, int k,
                           const float _Complex* a, int lda,
                           const float _Complex* tau,
                           float _Complex* c, int ldc );
int LAPACKE_zunmqr( int matrix_order, char side, char trans,
                           int m, int n, int k,
                           const double _Complex* a, int lda,
                           const double _Complex* tau,
                           double _Complex* c, int ldc );

int LAPACKE_cunmrq( int matrix_order, char side, char trans,
                           int m, int n, int k,
                           const float _Complex* a, int lda,
                           const float _Complex* tau,
                           float _Complex* c, int ldc );
int LAPACKE_zunmrq( int matrix_order, char side, char trans,
                           int m, int n, int k,
                           const double _Complex* a, int lda,
                           const double _Complex* tau,
                           double _Complex* c, int ldc );

int LAPACKE_cunmrz( int matrix_order, char side, char trans,
                           int m, int n, int k,
                           int l, const float _Complex* a,
                           int lda, const float _Complex* tau,
                           float _Complex* c, int ldc );
int LAPACKE_zunmrz( int matrix_order, char side, char trans,
                           int m, int n, int k,
                           int l, const double _Complex* a,
                           int lda, const double _Complex* tau,
                           double _Complex* c, int ldc );

int LAPACKE_cunmtr( int matrix_order, char side, char uplo, char trans,
                           int m, int n,
                           const float _Complex* a, int lda,
                           const float _Complex* tau,
                           float _Complex* c, int ldc );
int LAPACKE_zunmtr( int matrix_order, char side, char uplo, char trans,
                           int m, int n,
                           const double _Complex* a, int lda,
                           const double _Complex* tau,
                           double _Complex* c, int ldc );

int LAPACKE_cupgtr( int matrix_order, char uplo, int n,
                           const float _Complex* ap,
                           const float _Complex* tau,
                           float _Complex* q, int ldq );
int LAPACKE_zupgtr( int matrix_order, char uplo, int n,
                           const double _Complex* ap,
                           const double _Complex* tau,
                           double _Complex* q, int ldq );

int LAPACKE_cupmtr( int matrix_order, char side, char uplo, char trans,
                           int m, int n,
                           const float _Complex* ap,
                           const float _Complex* tau,
                           float _Complex* c, int ldc );
int LAPACKE_zupmtr( int matrix_order, char side, char uplo, char trans,
                           int m, int n,
                           const double _Complex* ap,
                           const double _Complex* tau,
                           double _Complex* c, int ldc );

int LAPACKE_sbdsdc_work( int matrix_order, char uplo, char compq,
                                int n, float* d, float* e, float* u,
                                int ldu, float* vt, int ldvt,
                                float* q, int* iq, float* work,
                                int* iwork );
int LAPACKE_dbdsdc_work( int matrix_order, char uplo, char compq,
                                int n, double* d, double* e, double* u,
                                int ldu, double* vt, int ldvt,
                                double* q, int* iq, double* work,
                                int* iwork );

int LAPACKE_sbdsqr_work( int matrix_order, char uplo, int n,
                                int ncvt, int nru, int ncc,
                                float* d, float* e, float* vt, int ldvt,
                                float* u, int ldu, float* c,
                                int ldc, float* work );
int LAPACKE_dbdsqr_work( int matrix_order, char uplo, int n,
                                int ncvt, int nru, int ncc,
                                double* d, double* e, double* vt,
                                int ldvt, double* u, int ldu,
                                double* c, int ldc, double* work );
int LAPACKE_cbdsqr_work( int matrix_order, char uplo, int n,
                                int ncvt, int nru, int ncc,
                                float* d, float* e, float _Complex* vt,
                                int ldvt, float _Complex* u,
                                int ldu, float _Complex* c,
                                int ldc, float* work );
int LAPACKE_zbdsqr_work( int matrix_order, char uplo, int n,
                                int ncvt, int nru, int ncc,
                                double* d, double* e, double _Complex* vt,
                                int ldvt, double _Complex* u,
                                int ldu, double _Complex* c,
                                int ldc, double* work );

int LAPACKE_sdisna_work( char job, int m, int n,
                                const float* d, float* sep );
int LAPACKE_ddisna_work( char job, int m, int n,
                                const double* d, double* sep );

int LAPACKE_sgbbrd_work( int matrix_order, char vect, int m,
                                int n, int ncc, int kl,
                                int ku, float* ab, int ldab,
                                float* d, float* e, float* q, int ldq,
                                float* pt, int ldpt, float* c,
                                int ldc, float* work );
int LAPACKE_dgbbrd_work( int matrix_order, char vect, int m,
                                int n, int ncc, int kl,
                                int ku, double* ab, int ldab,
                                double* d, double* e, double* q, int ldq,
                                double* pt, int ldpt, double* c,
                                int ldc, double* work );
int LAPACKE_cgbbrd_work( int matrix_order, char vect, int m,
                                int n, int ncc, int kl,
                                int ku, float _Complex* ab,
                                int ldab, float* d, float* e,
                                float _Complex* q, int ldq,
                                float _Complex* pt, int ldpt,
                                float _Complex* c, int ldc,
                                float _Complex* work, float* rwork );
int LAPACKE_zgbbrd_work( int matrix_order, char vect, int m,
                                int n, int ncc, int kl,
                                int ku, double _Complex* ab,
                                int ldab, double* d, double* e,
                                double _Complex* q, int ldq,
                                double _Complex* pt, int ldpt,
                                double _Complex* c, int ldc,
                                double _Complex* work, double* rwork );

int LAPACKE_sgbcon_work( int matrix_order, char norm, int n,
                                int kl, int ku, const float* ab,
                                int ldab, const int* ipiv,
                                float anorm, float* rcond, float* work,
                                int* iwork );
int LAPACKE_dgbcon_work( int matrix_order, char norm, int n,
                                int kl, int ku, const double* ab,
                                int ldab, const int* ipiv,
                                double anorm, double* rcond, double* work,
                                int* iwork );
int LAPACKE_cgbcon_work( int matrix_order, char norm, int n,
                                int kl, int ku,
                                const float _Complex* ab, int ldab,
                                const int* ipiv, float anorm,
                                float* rcond, float _Complex* work,
                                float* rwork );
int LAPACKE_zgbcon_work( int matrix_order, char norm, int n,
                                int kl, int ku,
                                const double _Complex* ab,
                                int ldab, const int* ipiv,
                                double anorm, double* rcond,
                                double _Complex* work, double* rwork );

int LAPACKE_sgbequ_work( int matrix_order, int m, int n,
                                int kl, int ku, const float* ab,
                                int ldab, float* r, float* c,
                                float* rowcnd, float* colcnd, float* amax );
int LAPACKE_dgbequ_work( int matrix_order, int m, int n,
                                int kl, int ku, const double* ab,
                                int ldab, double* r, double* c,
                                double* rowcnd, double* colcnd, double* amax );
int LAPACKE_cgbequ_work( int matrix_order, int m, int n,
                                int kl, int ku,
                                const float _Complex* ab, int ldab,
                                float* r, float* c, float* rowcnd,
                                float* colcnd, float* amax );
int LAPACKE_zgbequ_work( int matrix_order, int m, int n,
                                int kl, int ku,
                                const double _Complex* ab,
                                int ldab, double* r, double* c,
                                double* rowcnd, double* colcnd, double* amax );

int LAPACKE_sgbequb_work( int matrix_order, int m, int n,
                                 int kl, int ku, const float* ab,
                                 int ldab, float* r, float* c,
                                 float* rowcnd, float* colcnd, float* amax );
int LAPACKE_dgbequb_work( int matrix_order, int m, int n,
                                 int kl, int ku, const double* ab,
                                 int ldab, double* r, double* c,
                                 double* rowcnd, double* colcnd, double* amax );
int LAPACKE_cgbequb_work( int matrix_order, int m, int n,
                                 int kl, int ku,
                                 const float _Complex* ab,
                                 int ldab, float* r, float* c,
                                 float* rowcnd, float* colcnd, float* amax );
int LAPACKE_zgbequb_work( int matrix_order, int m, int n,
                                 int kl, int ku,
                                 const double _Complex* ab,
                                 int ldab, double* r, double* c,
                                 double* rowcnd, double* colcnd, double* amax );

int LAPACKE_sgbrfs_work( int matrix_order, char trans, int n,
                                int kl, int ku, int nrhs,
                                const float* ab, int ldab,
                                const float* afb, int ldafb,
                                const int* ipiv, const float* b,
                                int ldb, float* x, int ldx,
                                float* ferr, float* berr, float* work,
                                int* iwork );
int LAPACKE_dgbrfs_work( int matrix_order, char trans, int n,
                                int kl, int ku, int nrhs,
                                const double* ab, int ldab,
                                const double* afb, int ldafb,
                                const int* ipiv, const double* b,
                                int ldb, double* x, int ldx,
                                double* ferr, double* berr, double* work,
                                int* iwork );
int LAPACKE_cgbrfs_work( int matrix_order, char trans, int n,
                                int kl, int ku, int nrhs,
                                const float _Complex* ab, int ldab,
                                const float _Complex* afb,
                                int ldafb, const int* ipiv,
                                const float _Complex* b, int ldb,
                                float _Complex* x, int ldx,
                                float* ferr, float* berr,
                                float _Complex* work, float* rwork );
int LAPACKE_zgbrfs_work( int matrix_order, char trans, int n,
                                int kl, int ku, int nrhs,
                                const double _Complex* ab,
                                int ldab,
                                const double _Complex* afb,
                                int ldafb, const int* ipiv,
                                const double _Complex* b, int ldb,
                                double _Complex* x, int ldx,
                                double* ferr, double* berr,
                                double _Complex* work, double* rwork );

int LAPACKE_sgbrfsx_work( int matrix_order, char trans, char equed,
                                 int n, int kl, int ku,
                                 int nrhs, const float* ab,
                                 int ldab, const float* afb,
                                 int ldafb, const int* ipiv,
                                 const float* r, const float* c, const float* b,
                                 int ldb, float* x, int ldx,
                                 float* rcond, float* berr,
                                 int n_err_bnds, float* err_bnds_norm,
                                 float* err_bnds_comp, int nparams,
                                 float* params, float* work,
                                 int* iwork );
int LAPACKE_dgbrfsx_work( int matrix_order, char trans, char equed,
                                 int n, int kl, int ku,
                                 int nrhs, const double* ab,
                                 int ldab, const double* afb,
                                 int ldafb, const int* ipiv,
                                 const double* r, const double* c,
                                 const double* b, int ldb, double* x,
                                 int ldx, double* rcond, double* berr,
                                 int n_err_bnds, double* err_bnds_norm,
                                 double* err_bnds_comp, int nparams,
                                 double* params, double* work,
                                 int* iwork );
int LAPACKE_cgbrfsx_work( int matrix_order, char trans, char equed,
                                 int n, int kl, int ku,
                                 int nrhs,
                                 const float _Complex* ab,
                                 int ldab,
                                 const float _Complex* afb,
                                 int ldafb, const int* ipiv,
                                 const float* r, const float* c,
                                 const float _Complex* b, int ldb,
                                 float _Complex* x, int ldx,
                                 float* rcond, float* berr,
                                 int n_err_bnds, float* err_bnds_norm,
                                 float* err_bnds_comp, int nparams,
                                 float* params, float _Complex* work,
                                 float* rwork );
int LAPACKE_zgbrfsx_work( int matrix_order, char trans, char equed,
                                 int n, int kl, int ku,
                                 int nrhs,
                                 const double _Complex* ab,
                                 int ldab,
                                 const double _Complex* afb,
                                 int ldafb, const int* ipiv,
                                 const double* r, const double* c,
                                 const double _Complex* b, int ldb,
                                 double _Complex* x, int ldx,
                                 double* rcond, double* berr,
                                 int n_err_bnds, double* err_bnds_norm,
                                 double* err_bnds_comp, int nparams,
                                 double* params, double _Complex* work,
                                 double* rwork );

int LAPACKE_sgbsv_work( int matrix_order, int n, int kl,
                               int ku, int nrhs, float* ab,
                               int ldab, int* ipiv, float* b,
                               int ldb );
int LAPACKE_dgbsv_work( int matrix_order, int n, int kl,
                               int ku, int nrhs, double* ab,
                               int ldab, int* ipiv, double* b,
                               int ldb );
int LAPACKE_cgbsv_work( int matrix_order, int n, int kl,
                               int ku, int nrhs,
                               float _Complex* ab, int ldab,
                               int* ipiv, float _Complex* b,
                               int ldb );
int LAPACKE_zgbsv_work( int matrix_order, int n, int kl,
                               int ku, int nrhs,
                               double _Complex* ab, int ldab,
                               int* ipiv, double _Complex* b,
                               int ldb );

int LAPACKE_sgbsvx_work( int matrix_order, char fact, char trans,
                                int n, int kl, int ku,
                                int nrhs, float* ab, int ldab,
                                float* afb, int ldafb, int* ipiv,
                                char* equed, float* r, float* c, float* b,
                                int ldb, float* x, int ldx,
                                float* rcond, float* ferr, float* berr,
                                float* work, int* iwork );
int LAPACKE_dgbsvx_work( int matrix_order, char fact, char trans,
                                int n, int kl, int ku,
                                int nrhs, double* ab, int ldab,
                                double* afb, int ldafb, int* ipiv,
                                char* equed, double* r, double* c, double* b,
                                int ldb, double* x, int ldx,
                                double* rcond, double* ferr, double* berr,
                                double* work, int* iwork );
int LAPACKE_cgbsvx_work( int matrix_order, char fact, char trans,
                                int n, int kl, int ku,
                                int nrhs, float _Complex* ab,
                                int ldab, float _Complex* afb,
                                int ldafb, int* ipiv, char* equed,
                                float* r, float* c, float _Complex* b,
                                int ldb, float _Complex* x,
                                int ldx, float* rcond, float* ferr,
                                float* berr, float _Complex* work,
                                float* rwork );
int LAPACKE_zgbsvx_work( int matrix_order, char fact, char trans,
                                int n, int kl, int ku,
                                int nrhs, double _Complex* ab,
                                int ldab, double _Complex* afb,
                                int ldafb, int* ipiv, char* equed,
                                double* r, double* c, double _Complex* b,
                                int ldb, double _Complex* x,
                                int ldx, double* rcond, double* ferr,
                                double* berr, double _Complex* work,
                                double* rwork );

int LAPACKE_sgbsvxx_work( int matrix_order, char fact, char trans,
                                 int n, int kl, int ku,
                                 int nrhs, float* ab, int ldab,
                                 float* afb, int ldafb, int* ipiv,
                                 char* equed, float* r, float* c, float* b,
                                 int ldb, float* x, int ldx,
                                 float* rcond, float* rpvgrw, float* berr,
                                 int n_err_bnds, float* err_bnds_norm,
                                 float* err_bnds_comp, int nparams,
                                 float* params, float* work,
                                 int* iwork );
int LAPACKE_dgbsvxx_work( int matrix_order, char fact, char trans,
                                 int n, int kl, int ku,
                                 int nrhs, double* ab, int ldab,
                                 double* afb, int ldafb,
                                 int* ipiv, char* equed, double* r,
                                 double* c, double* b, int ldb,
                                 double* x, int ldx, double* rcond,
                                 double* rpvgrw, double* berr,
                                 int n_err_bnds, double* err_bnds_norm,
                                 double* err_bnds_comp, int nparams,
                                 double* params, double* work,
                                 int* iwork );
int LAPACKE_cgbsvxx_work( int matrix_order, char fact, char trans,
                                 int n, int kl, int ku,
                                 int nrhs, float _Complex* ab,
                                 int ldab, float _Complex* afb,
                                 int ldafb, int* ipiv,
                                 char* equed, float* r, float* c,
                                 float _Complex* b, int ldb,
                                 float _Complex* x, int ldx,
                                 float* rcond, float* rpvgrw, float* berr,
                                 int n_err_bnds, float* err_bnds_norm,
                                 float* err_bnds_comp, int nparams,
                                 float* params, float _Complex* work,
                                 float* rwork );
int LAPACKE_zgbsvxx_work( int matrix_order, char fact, char trans,
                                 int n, int kl, int ku,
                                 int nrhs, double _Complex* ab,
                                 int ldab, double _Complex* afb,
                                 int ldafb, int* ipiv,
                                 char* equed, double* r, double* c,
                                 double _Complex* b, int ldb,
                                 double _Complex* x, int ldx,
                                 double* rcond, double* rpvgrw, double* berr,
                                 int n_err_bnds, double* err_bnds_norm,
                                 double* err_bnds_comp, int nparams,
                                 double* params, double _Complex* work,
                                 double* rwork );

int LAPACKE_sgbtrf_work( int matrix_order, int m, int n,
                                int kl, int ku, float* ab,
                                int ldab, int* ipiv );
int LAPACKE_dgbtrf_work( int matrix_order, int m, int n,
                                int kl, int ku, double* ab,
                                int ldab, int* ipiv );
int LAPACKE_cgbtrf_work( int matrix_order, int m, int n,
                                int kl, int ku,
                                float _Complex* ab, int ldab,
                                int* ipiv );
int LAPACKE_zgbtrf_work( int matrix_order, int m, int n,
                                int kl, int ku,
                                double _Complex* ab, int ldab,
                                int* ipiv );

int LAPACKE_sgbtrs_work( int matrix_order, char trans, int n,
                                int kl, int ku, int nrhs,
                                const float* ab, int ldab,
                                const int* ipiv, float* b,
                                int ldb );
int LAPACKE_dgbtrs_work( int matrix_order, char trans, int n,
                                int kl, int ku, int nrhs,
                                const double* ab, int ldab,
                                const int* ipiv, double* b,
                                int ldb );
int LAPACKE_cgbtrs_work( int matrix_order, char trans, int n,
                                int kl, int ku, int nrhs,
                                const float _Complex* ab, int ldab,
                                const int* ipiv, float _Complex* b,
                                int ldb );
int LAPACKE_zgbtrs_work( int matrix_order, char trans, int n,
                                int kl, int ku, int nrhs,
                                const double _Complex* ab,
                                int ldab, const int* ipiv,
                                double _Complex* b, int ldb );

int LAPACKE_sgebak_work( int matrix_order, char job, char side,
                                int n, int ilo, int ihi,
                                const float* scale, int m, float* v,
                                int ldv );
int LAPACKE_dgebak_work( int matrix_order, char job, char side,
                                int n, int ilo, int ihi,
                                const double* scale, int m, double* v,
                                int ldv );
int LAPACKE_cgebak_work( int matrix_order, char job, char side,
                                int n, int ilo, int ihi,
                                const float* scale, int m,
                                float _Complex* v, int ldv );
int LAPACKE_zgebak_work( int matrix_order, char job, char side,
                                int n, int ilo, int ihi,
                                const double* scale, int m,
                                double _Complex* v, int ldv );

int LAPACKE_sgebal_work( int matrix_order, char job, int n,
                                float* a, int lda, int* ilo,
                                int* ihi, float* scale );
int LAPACKE_dgebal_work( int matrix_order, char job, int n,
                                double* a, int lda, int* ilo,
                                int* ihi, double* scale );
int LAPACKE_cgebal_work( int matrix_order, char job, int n,
                                float _Complex* a, int lda,
                                int* ilo, int* ihi,
                                float* scale );
int LAPACKE_zgebal_work( int matrix_order, char job, int n,
                                double _Complex* a, int lda,
                                int* ilo, int* ihi,
                                double* scale );

int LAPACKE_sgebrd_work( int matrix_order, int m, int n,
                                float* a, int lda, float* d, float* e,
                                float* tauq, float* taup, float* work,
                                int lwork );
int LAPACKE_dgebrd_work( int matrix_order, int m, int n,
                                double* a, int lda, double* d, double* e,
                                double* tauq, double* taup, double* work,
                                int lwork );
int LAPACKE_cgebrd_work( int matrix_order, int m, int n,
                                float _Complex* a, int lda,
                                float* d, float* e, float _Complex* tauq,
                                float _Complex* taup,
                                float _Complex* work, int lwork );
int LAPACKE_zgebrd_work( int matrix_order, int m, int n,
                                double _Complex* a, int lda,
                                double* d, double* e,
                                double _Complex* tauq,
                                double _Complex* taup,
                                double _Complex* work, int lwork );

int LAPACKE_sgecon_work( int matrix_order, char norm, int n,
                                const float* a, int lda, float anorm,
                                float* rcond, float* work, int* iwork );
int LAPACKE_dgecon_work( int matrix_order, char norm, int n,
                                const double* a, int lda, double anorm,
                                double* rcond, double* work,
                                int* iwork );
int LAPACKE_cgecon_work( int matrix_order, char norm, int n,
                                const float _Complex* a, int lda,
                                float anorm, float* rcond,
                                float _Complex* work, float* rwork );
int LAPACKE_zgecon_work( int matrix_order, char norm, int n,
                                const double _Complex* a, int lda,
                                double anorm, double* rcond,
                                double _Complex* work, double* rwork );

int LAPACKE_sgeequ_work( int matrix_order, int m, int n,
                                const float* a, int lda, float* r,
                                float* c, float* rowcnd, float* colcnd,
                                float* amax );
int LAPACKE_dgeequ_work( int matrix_order, int m, int n,
                                const double* a, int lda, double* r,
                                double* c, double* rowcnd, double* colcnd,
                                double* amax );
int LAPACKE_cgeequ_work( int matrix_order, int m, int n,
                                const float _Complex* a, int lda,
                                float* r, float* c, float* rowcnd,
                                float* colcnd, float* amax );
int LAPACKE_zgeequ_work( int matrix_order, int m, int n,
                                const double _Complex* a, int lda,
                                double* r, double* c, double* rowcnd,
                                double* colcnd, double* amax );

int LAPACKE_sgeequb_work( int matrix_order, int m, int n,
                                 const float* a, int lda, float* r,
                                 float* c, float* rowcnd, float* colcnd,
                                 float* amax );
int LAPACKE_dgeequb_work( int matrix_order, int m, int n,
                                 const double* a, int lda, double* r,
                                 double* c, double* rowcnd, double* colcnd,
                                 double* amax );
int LAPACKE_cgeequb_work( int matrix_order, int m, int n,
                                 const float _Complex* a, int lda,
                                 float* r, float* c, float* rowcnd,
                                 float* colcnd, float* amax );
int LAPACKE_zgeequb_work( int matrix_order, int m, int n,
                                 const double _Complex* a, int lda,
                                 double* r, double* c, double* rowcnd,
                                 double* colcnd, double* amax );

int LAPACKE_sgees_work( int matrix_order, char jobvs, char sort,
                               LAPACK_S_SELECT2 select, int n, float* a,
                               int lda, int* sdim, float* wr,
                               float* wi, float* vs, int ldvs,
                               float* work, int lwork,
                               int* bwork );
int LAPACKE_dgees_work( int matrix_order, char jobvs, char sort,
                               LAPACK_D_SELECT2 select, int n, double* a,
                               int lda, int* sdim, double* wr,
                               double* wi, double* vs, int ldvs,
                               double* work, int lwork,
                               int* bwork );
int LAPACKE_cgees_work( int matrix_order, char jobvs, char sort,
                               LAPACK_C_SELECT1 select, int n,
                               float _Complex* a, int lda,
                               int* sdim, float _Complex* w,
                               float _Complex* vs, int ldvs,
                               float _Complex* work, int lwork,
                               float* rwork, int* bwork );
int LAPACKE_zgees_work( int matrix_order, char jobvs, char sort,
                               LAPACK_Z_SELECT1 select, int n,
                               double _Complex* a, int lda,
                               int* sdim, double _Complex* w,
                               double _Complex* vs, int ldvs,
                               double _Complex* work, int lwork,
                               double* rwork, int* bwork );

int LAPACKE_sgeesx_work( int matrix_order, char jobvs, char sort,
                                LAPACK_S_SELECT2 select, char sense,
                                int n, float* a, int lda,
                                int* sdim, float* wr, float* wi,
                                float* vs, int ldvs, float* rconde,
                                float* rcondv, float* work, int lwork,
                                int* iwork, int liwork,
                                int* bwork );
int LAPACKE_dgeesx_work( int matrix_order, char jobvs, char sort,
                                LAPACK_D_SELECT2 select, char sense,
                                int n, double* a, int lda,
                                int* sdim, double* wr, double* wi,
                                double* vs, int ldvs, double* rconde,
                                double* rcondv, double* work, int lwork,
                                int* iwork, int liwork,
                                int* bwork );
int LAPACKE_cgeesx_work( int matrix_order, char jobvs, char sort,
                                LAPACK_C_SELECT1 select, char sense,
                                int n, float _Complex* a,
                                int lda, int* sdim,
                                float _Complex* w,
                                float _Complex* vs, int ldvs,
                                float* rconde, float* rcondv,
                                float _Complex* work, int lwork,
                                float* rwork, int* bwork );
int LAPACKE_zgeesx_work( int matrix_order, char jobvs, char sort,
                                LAPACK_Z_SELECT1 select, char sense,
                                int n, double _Complex* a,
                                int lda, int* sdim,
                                double _Complex* w,
                                double _Complex* vs, int ldvs,
                                double* rconde, double* rcondv,
                                double _Complex* work, int lwork,
                                double* rwork, int* bwork );

int LAPACKE_sgeev_work( int matrix_order, char jobvl, char jobvr,
                               int n, float* a, int lda,
                               float* wr, float* wi, float* vl, int ldvl,
                               float* vr, int ldvr, float* work,
                               int lwork );
int LAPACKE_dgeev_work( int matrix_order, char jobvl, char jobvr,
                               int n, double* a, int lda,
                               double* wr, double* wi, double* vl,
                               int ldvl, double* vr, int ldvr,
                               double* work, int lwork );
int LAPACKE_cgeev_work( int matrix_order, char jobvl, char jobvr,
                               int n, float _Complex* a,
                               int lda, float _Complex* w,
                               float _Complex* vl, int ldvl,
                               float _Complex* vr, int ldvr,
                               float _Complex* work, int lwork,
                               float* rwork );
int LAPACKE_zgeev_work( int matrix_order, char jobvl, char jobvr,
                               int n, double _Complex* a,
                               int lda, double _Complex* w,
                               double _Complex* vl, int ldvl,
                               double _Complex* vr, int ldvr,
                               double _Complex* work, int lwork,
                               double* rwork );

int LAPACKE_sgeevx_work( int matrix_order, char balanc, char jobvl,
                                char jobvr, char sense, int n, float* a,
                                int lda, float* wr, float* wi, float* vl,
                                int ldvl, float* vr, int ldvr,
                                int* ilo, int* ihi, float* scale,
                                float* abnrm, float* rconde, float* rcondv,
                                float* work, int lwork,
                                int* iwork );
int LAPACKE_dgeevx_work( int matrix_order, char balanc, char jobvl,
                                char jobvr, char sense, int n, double* a,
                                int lda, double* wr, double* wi,
                                double* vl, int ldvl, double* vr,
                                int ldvr, int* ilo,
                                int* ihi, double* scale, double* abnrm,
                                double* rconde, double* rcondv, double* work,
                                int lwork, int* iwork );
int LAPACKE_cgeevx_work( int matrix_order, char balanc, char jobvl,
                                char jobvr, char sense, int n,
                                float _Complex* a, int lda,
                                float _Complex* w,
                                float _Complex* vl, int ldvl,
                                float _Complex* vr, int ldvr,
                                int* ilo, int* ihi, float* scale,
                                float* abnrm, float* rconde, float* rcondv,
                                float _Complex* work, int lwork,
                                float* rwork );
int LAPACKE_zgeevx_work( int matrix_order, char balanc, char jobvl,
                                char jobvr, char sense, int n,
                                double _Complex* a, int lda,
                                double _Complex* w,
                                double _Complex* vl, int ldvl,
                                double _Complex* vr, int ldvr,
                                int* ilo, int* ihi, double* scale,
                                double* abnrm, double* rconde, double* rcondv,
                                double _Complex* work, int lwork,
                                double* rwork );

int LAPACKE_sgehrd_work( int matrix_order, int n, int ilo,
                                int ihi, float* a, int lda,
                                float* tau, float* work, int lwork );
int LAPACKE_dgehrd_work( int matrix_order, int n, int ilo,
                                int ihi, double* a, int lda,
                                double* tau, double* work, int lwork );
int LAPACKE_cgehrd_work( int matrix_order, int n, int ilo,
                                int ihi, float _Complex* a,
                                int lda, float _Complex* tau,
                                float _Complex* work, int lwork );
int LAPACKE_zgehrd_work( int matrix_order, int n, int ilo,
                                int ihi, double _Complex* a,
                                int lda, double _Complex* tau,
                                double _Complex* work, int lwork );

int LAPACKE_sgejsv_work( int matrix_order, char joba, char jobu,
                                char jobv, char jobr, char jobt, char jobp,
                                int m, int n, float* a,
                                int lda, float* sva, float* u,
                                int ldu, float* v, int ldv,
                                float* work, int lwork,
                                int* iwork );
int LAPACKE_dgejsv_work( int matrix_order, char joba, char jobu,
                                char jobv, char jobr, char jobt, char jobp,
                                int m, int n, double* a,
                                int lda, double* sva, double* u,
                                int ldu, double* v, int ldv,
                                double* work, int lwork,
                                int* iwork );

int LAPACKE_sgelq2_work( int matrix_order, int m, int n,
                                float* a, int lda, float* tau,
                                float* work );
int LAPACKE_dgelq2_work( int matrix_order, int m, int n,
                                double* a, int lda, double* tau,
                                double* work );
int LAPACKE_cgelq2_work( int matrix_order, int m, int n,
                                float _Complex* a, int lda,
                                float _Complex* tau,
                                float _Complex* work );
int LAPACKE_zgelq2_work( int matrix_order, int m, int n,
                                double _Complex* a, int lda,
                                double _Complex* tau,
                                double _Complex* work );

int LAPACKE_sgelqf_work( int matrix_order, int m, int n,
                                float* a, int lda, float* tau,
                                float* work, int lwork );
int LAPACKE_dgelqf_work( int matrix_order, int m, int n,
                                double* a, int lda, double* tau,
                                double* work, int lwork );
int LAPACKE_cgelqf_work( int matrix_order, int m, int n,
                                float _Complex* a, int lda,
                                float _Complex* tau,
                                float _Complex* work, int lwork );
int LAPACKE_zgelqf_work( int matrix_order, int m, int n,
                                double _Complex* a, int lda,
                                double _Complex* tau,
                                double _Complex* work, int lwork );

int LAPACKE_sgels_work( int matrix_order, char trans, int m,
                               int n, int nrhs, float* a,
                               int lda, float* b, int ldb,
                               float* work, int lwork );
int LAPACKE_dgels_work( int matrix_order, char trans, int m,
                               int n, int nrhs, double* a,
                               int lda, double* b, int ldb,
                               double* work, int lwork );
int LAPACKE_cgels_work( int matrix_order, char trans, int m,
                               int n, int nrhs,
                               float _Complex* a, int lda,
                               float _Complex* b, int ldb,
                               float _Complex* work, int lwork );
int LAPACKE_zgels_work( int matrix_order, char trans, int m,
                               int n, int nrhs,
                               double _Complex* a, int lda,
                               double _Complex* b, int ldb,
                               double _Complex* work, int lwork );

int LAPACKE_sgelsd_work( int matrix_order, int m, int n,
                                int nrhs, float* a, int lda,
                                float* b, int ldb, float* s, float rcond,
                                int* rank, float* work, int lwork,
                                int* iwork );
int LAPACKE_dgelsd_work( int matrix_order, int m, int n,
                                int nrhs, double* a, int lda,
                                double* b, int ldb, double* s,
                                double rcond, int* rank, double* work,
                                int lwork, int* iwork );
int LAPACKE_cgelsd_work( int matrix_order, int m, int n,
                                int nrhs, float _Complex* a,
                                int lda, float _Complex* b,
                                int ldb, float* s, float rcond,
                                int* rank, float _Complex* work,
                                int lwork, float* rwork,
                                int* iwork );
int LAPACKE_zgelsd_work( int matrix_order, int m, int n,
                                int nrhs, double _Complex* a,
                                int lda, double _Complex* b,
                                int ldb, double* s, double rcond,
                                int* rank, double _Complex* work,
                                int lwork, double* rwork,
                                int* iwork );

int LAPACKE_sgelss_work( int matrix_order, int m, int n,
                                int nrhs, float* a, int lda,
                                float* b, int ldb, float* s, float rcond,
                                int* rank, float* work,
                                int lwork );
int LAPACKE_dgelss_work( int matrix_order, int m, int n,
                                int nrhs, double* a, int lda,
                                double* b, int ldb, double* s,
                                double rcond, int* rank, double* work,
                                int lwork );
int LAPACKE_cgelss_work( int matrix_order, int m, int n,
                                int nrhs, float _Complex* a,
                                int lda, float _Complex* b,
                                int ldb, float* s, float rcond,
                                int* rank, float _Complex* work,
                                int lwork, float* rwork );
int LAPACKE_zgelss_work( int matrix_order, int m, int n,
                                int nrhs, double _Complex* a,
                                int lda, double _Complex* b,
                                int ldb, double* s, double rcond,
                                int* rank, double _Complex* work,
                                int lwork, double* rwork );

int LAPACKE_sgelsy_work( int matrix_order, int m, int n,
                                int nrhs, float* a, int lda,
                                float* b, int ldb, int* jpvt,
                                float rcond, int* rank, float* work,
                                int lwork );
int LAPACKE_dgelsy_work( int matrix_order, int m, int n,
                                int nrhs, double* a, int lda,
                                double* b, int ldb, int* jpvt,
                                double rcond, int* rank, double* work,
                                int lwork );
int LAPACKE_cgelsy_work( int matrix_order, int m, int n,
                                int nrhs, float _Complex* a,
                                int lda, float _Complex* b,
                                int ldb, int* jpvt, float rcond,
                                int* rank, float _Complex* work,
                                int lwork, float* rwork );
int LAPACKE_zgelsy_work( int matrix_order, int m, int n,
                                int nrhs, double _Complex* a,
                                int lda, double _Complex* b,
                                int ldb, int* jpvt, double rcond,
                                int* rank, double _Complex* work,
                                int lwork, double* rwork );

int LAPACKE_sgeqlf_work( int matrix_order, int m, int n,
                                float* a, int lda, float* tau,
                                float* work, int lwork );
int LAPACKE_dgeqlf_work( int matrix_order, int m, int n,
                                double* a, int lda, double* tau,
                                double* work, int lwork );
int LAPACKE_cgeqlf_work( int matrix_order, int m, int n,
                                float _Complex* a, int lda,
                                float _Complex* tau,
                                float _Complex* work, int lwork );
int LAPACKE_zgeqlf_work( int matrix_order, int m, int n,
                                double _Complex* a, int lda,
                                double _Complex* tau,
                                double _Complex* work, int lwork );

int LAPACKE_sgeqp3_work( int matrix_order, int m, int n,
                                float* a, int lda, int* jpvt,
                                float* tau, float* work, int lwork );
int LAPACKE_dgeqp3_work( int matrix_order, int m, int n,
                                double* a, int lda, int* jpvt,
                                double* tau, double* work, int lwork );
int LAPACKE_cgeqp3_work( int matrix_order, int m, int n,
                                float _Complex* a, int lda,
                                int* jpvt, float _Complex* tau,
                                float _Complex* work, int lwork,
                                float* rwork );
int LAPACKE_zgeqp3_work( int matrix_order, int m, int n,
                                double _Complex* a, int lda,
                                int* jpvt, double _Complex* tau,
                                double _Complex* work, int lwork,
                                double* rwork );

int LAPACKE_sgeqpf_work( int matrix_order, int m, int n,
                                float* a, int lda, int* jpvt,
                                float* tau, float* work );
int LAPACKE_dgeqpf_work( int matrix_order, int m, int n,
                                double* a, int lda, int* jpvt,
                                double* tau, double* work );
int LAPACKE_cgeqpf_work( int matrix_order, int m, int n,
                                float _Complex* a, int lda,
                                int* jpvt, float _Complex* tau,
                                float _Complex* work, float* rwork );
int LAPACKE_zgeqpf_work( int matrix_order, int m, int n,
                                double _Complex* a, int lda,
                                int* jpvt, double _Complex* tau,
                                double _Complex* work, double* rwork );

int LAPACKE_sgeqr2_work( int matrix_order, int m, int n,
                                float* a, int lda, float* tau,
                                float* work );
int LAPACKE_dgeqr2_work( int matrix_order, int m, int n,
                                double* a, int lda, double* tau,
                                double* work );
int LAPACKE_cgeqr2_work( int matrix_order, int m, int n,
                                float _Complex* a, int lda,
                                float _Complex* tau,
                                float _Complex* work );
int LAPACKE_zgeqr2_work( int matrix_order, int m, int n,
                                double _Complex* a, int lda,
                                double _Complex* tau,
                                double _Complex* work );

int LAPACKE_sgeqrf_work( int matrix_order, int m, int n,
                                float* a, int lda, float* tau,
                                float* work, int lwork );
int LAPACKE_dgeqrf_work( int matrix_order, int m, int n,
                                double* a, int lda, double* tau,
                                double* work, int lwork );
int LAPACKE_cgeqrf_work( int matrix_order, int m, int n,
                                float _Complex* a, int lda,
                                float _Complex* tau,
                                float _Complex* work, int lwork );
int LAPACKE_zgeqrf_work( int matrix_order, int m, int n,
                                double _Complex* a, int lda,
                                double _Complex* tau,
                                double _Complex* work, int lwork );

int LAPACKE_sgeqrfp_work( int matrix_order, int m, int n,
                                 float* a, int lda, float* tau,
                                 float* work, int lwork );
int LAPACKE_dgeqrfp_work( int matrix_order, int m, int n,
                                 double* a, int lda, double* tau,
                                 double* work, int lwork );
int LAPACKE_cgeqrfp_work( int matrix_order, int m, int n,
                                 float _Complex* a, int lda,
                                 float _Complex* tau,
                                 float _Complex* work, int lwork );
int LAPACKE_zgeqrfp_work( int matrix_order, int m, int n,
                                 double _Complex* a, int lda,
                                 double _Complex* tau,
                                 double _Complex* work,
                                 int lwork );

int LAPACKE_sgerfs_work( int matrix_order, char trans, int n,
                                int nrhs, const float* a, int lda,
                                const float* af, int ldaf,
                                const int* ipiv, const float* b,
                                int ldb, float* x, int ldx,
                                float* ferr, float* berr, float* work,
                                int* iwork );
int LAPACKE_dgerfs_work( int matrix_order, char trans, int n,
                                int nrhs, const double* a,
                                int lda, const double* af,
                                int ldaf, const int* ipiv,
                                const double* b, int ldb, double* x,
                                int ldx, double* ferr, double* berr,
                                double* work, int* iwork );
int LAPACKE_cgerfs_work( int matrix_order, char trans, int n,
                                int nrhs, const float _Complex* a,
                                int lda, const float _Complex* af,
                                int ldaf, const int* ipiv,
                                const float _Complex* b, int ldb,
                                float _Complex* x, int ldx,
                                float* ferr, float* berr,
                                float _Complex* work, float* rwork );
int LAPACKE_zgerfs_work( int matrix_order, char trans, int n,
                                int nrhs, const double _Complex* a,
                                int lda, const double _Complex* af,
                                int ldaf, const int* ipiv,
                                const double _Complex* b, int ldb,
                                double _Complex* x, int ldx,
                                double* ferr, double* berr,
                                double _Complex* work, double* rwork );

int LAPACKE_sgerfsx_work( int matrix_order, char trans, char equed,
                                 int n, int nrhs, const float* a,
                                 int lda, const float* af,
                                 int ldaf, const int* ipiv,
                                 const float* r, const float* c, const float* b,
                                 int ldb, float* x, int ldx,
                                 float* rcond, float* berr,
                                 int n_err_bnds, float* err_bnds_norm,
                                 float* err_bnds_comp, int nparams,
                                 float* params, float* work,
                                 int* iwork );
int LAPACKE_dgerfsx_work( int matrix_order, char trans, char equed,
                                 int n, int nrhs, const double* a,
                                 int lda, const double* af,
                                 int ldaf, const int* ipiv,
                                 const double* r, const double* c,
                                 const double* b, int ldb, double* x,
                                 int ldx, double* rcond, double* berr,
                                 int n_err_bnds, double* err_bnds_norm,
                                 double* err_bnds_comp, int nparams,
                                 double* params, double* work,
                                 int* iwork );
int LAPACKE_cgerfsx_work( int matrix_order, char trans, char equed,
                                 int n, int nrhs,
                                 const float _Complex* a, int lda,
                                 const float _Complex* af,
                                 int ldaf, const int* ipiv,
                                 const float* r, const float* c,
                                 const float _Complex* b, int ldb,
                                 float _Complex* x, int ldx,
                                 float* rcond, float* berr,
                                 int n_err_bnds, float* err_bnds_norm,
                                 float* err_bnds_comp, int nparams,
                                 float* params, float _Complex* work,
                                 float* rwork );
int LAPACKE_zgerfsx_work( int matrix_order, char trans, char equed,
                                 int n, int nrhs,
                                 const double _Complex* a, int lda,
                                 const double _Complex* af,
                                 int ldaf, const int* ipiv,
                                 const double* r, const double* c,
                                 const double _Complex* b, int ldb,
                                 double _Complex* x, int ldx,
                                 double* rcond, double* berr,
                                 int n_err_bnds, double* err_bnds_norm,
                                 double* err_bnds_comp, int nparams,
                                 double* params, double _Complex* work,
                                 double* rwork );

int LAPACKE_sgerqf_work( int matrix_order, int m, int n,
                                float* a, int lda, float* tau,
                                float* work, int lwork );
int LAPACKE_dgerqf_work( int matrix_order, int m, int n,
                                double* a, int lda, double* tau,
                                double* work, int lwork );
int LAPACKE_cgerqf_work( int matrix_order, int m, int n,
                                float _Complex* a, int lda,
                                float _Complex* tau,
                                float _Complex* work, int lwork );
int LAPACKE_zgerqf_work( int matrix_order, int m, int n,
                                double _Complex* a, int lda,
                                double _Complex* tau,
                                double _Complex* work, int lwork );

int LAPACKE_sgesdd_work( int matrix_order, char jobz, int m,
                                int n, float* a, int lda,
                                float* s, float* u, int ldu, float* vt,
                                int ldvt, float* work, int lwork,
                                int* iwork );
int LAPACKE_dgesdd_work( int matrix_order, char jobz, int m,
                                int n, double* a, int lda,
                                double* s, double* u, int ldu,
                                double* vt, int ldvt, double* work,
                                int lwork, int* iwork );
int LAPACKE_cgesdd_work( int matrix_order, char jobz, int m,
                                int n, float _Complex* a,
                                int lda, float* s,
                                float _Complex* u, int ldu,
                                float _Complex* vt, int ldvt,
                                float _Complex* work, int lwork,
                                float* rwork, int* iwork );
int LAPACKE_zgesdd_work( int matrix_order, char jobz, int m,
                                int n, double _Complex* a,
                                int lda, double* s,
                                double _Complex* u, int ldu,
                                double _Complex* vt, int ldvt,
                                double _Complex* work, int lwork,
                                double* rwork, int* iwork );

int LAPACKE_sgesv_work( int matrix_order, int n, int nrhs,
                               float* a, int lda, int* ipiv,
                               float* b, int ldb );
int LAPACKE_dgesv_work( int matrix_order, int n, int nrhs,
                               double* a, int lda, int* ipiv,
                               double* b, int ldb );
int LAPACKE_cgesv_work( int matrix_order, int n, int nrhs,
                               float _Complex* a, int lda,
                               int* ipiv, float _Complex* b,
                               int ldb );
int LAPACKE_zgesv_work( int matrix_order, int n, int nrhs,
                               double _Complex* a, int lda,
                               int* ipiv, double _Complex* b,
                               int ldb );
int LAPACKE_dsgesv_work( int matrix_order, int n, int nrhs,
                                double* a, int lda, int* ipiv,
                                double* b, int ldb, double* x,
                                int ldx, double* work, float* swork,
                                int* iter );
int LAPACKE_zcgesv_work( int matrix_order, int n, int nrhs,
                                double _Complex* a, int lda,
                                int* ipiv, double _Complex* b,
                                int ldb, double _Complex* x,
                                int ldx, double _Complex* work,
                                float _Complex* swork, double* rwork,
                                int* iter );

int LAPACKE_sgesvd_work( int matrix_order, char jobu, char jobvt,
                                int m, int n, float* a,
                                int lda, float* s, float* u,
                                int ldu, float* vt, int ldvt,
                                float* work, int lwork );
int LAPACKE_dgesvd_work( int matrix_order, char jobu, char jobvt,
                                int m, int n, double* a,
                                int lda, double* s, double* u,
                                int ldu, double* vt, int ldvt,
                                double* work, int lwork );
int LAPACKE_cgesvd_work( int matrix_order, char jobu, char jobvt,
                                int m, int n,
                                float _Complex* a, int lda,
                                float* s, float _Complex* u,
                                int ldu, float _Complex* vt,
                                int ldvt, float _Complex* work,
                                int lwork, float* rwork );
int LAPACKE_zgesvd_work( int matrix_order, char jobu, char jobvt,
                                int m, int n,
                                double _Complex* a, int lda,
                                double* s, double _Complex* u,
                                int ldu, double _Complex* vt,
                                int ldvt, double _Complex* work,
                                int lwork, double* rwork );

int LAPACKE_sgesvj_work( int matrix_order, char joba, char jobu,
                                char jobv, int m, int n, float* a,
                                int lda, float* sva, int mv,
                                float* v, int ldv, float* work,
                                int lwork );
int LAPACKE_dgesvj_work( int matrix_order, char joba, char jobu,
                                char jobv, int m, int n,
                                double* a, int lda, double* sva,
                                int mv, double* v, int ldv,
                                double* work, int lwork );

int LAPACKE_sgesvx_work( int matrix_order, char fact, char trans,
                                int n, int nrhs, float* a,
                                int lda, float* af, int ldaf,
                                int* ipiv, char* equed, float* r,
                                float* c, float* b, int ldb, float* x,
                                int ldx, float* rcond, float* ferr,
                                float* berr, float* work, int* iwork );
int LAPACKE_dgesvx_work( int matrix_order, char fact, char trans,
                                int n, int nrhs, double* a,
                                int lda, double* af, int ldaf,
                                int* ipiv, char* equed, double* r,
                                double* c, double* b, int ldb, double* x,
                                int ldx, double* rcond, double* ferr,
                                double* berr, double* work, int* iwork );
int LAPACKE_cgesvx_work( int matrix_order, char fact, char trans,
                                int n, int nrhs,
                                float _Complex* a, int lda,
                                float _Complex* af, int ldaf,
                                int* ipiv, char* equed, float* r,
                                float* c, float _Complex* b,
                                int ldb, float _Complex* x,
                                int ldx, float* rcond, float* ferr,
                                float* berr, float _Complex* work,
                                float* rwork );
int LAPACKE_zgesvx_work( int matrix_order, char fact, char trans,
                                int n, int nrhs,
                                double _Complex* a, int lda,
                                double _Complex* af, int ldaf,
                                int* ipiv, char* equed, double* r,
                                double* c, double _Complex* b,
                                int ldb, double _Complex* x,
                                int ldx, double* rcond, double* ferr,
                                double* berr, double _Complex* work,
                                double* rwork );

int LAPACKE_sgesvxx_work( int matrix_order, char fact, char trans,
                                 int n, int nrhs, float* a,
                                 int lda, float* af, int ldaf,
                                 int* ipiv, char* equed, float* r,
                                 float* c, float* b, int ldb, float* x,
                                 int ldx, float* rcond, float* rpvgrw,
                                 float* berr, int n_err_bnds,
                                 float* err_bnds_norm, float* err_bnds_comp,
                                 int nparams, float* params, float* work,
                                 int* iwork );
int LAPACKE_dgesvxx_work( int matrix_order, char fact, char trans,
                                 int n, int nrhs, double* a,
                                 int lda, double* af, int ldaf,
                                 int* ipiv, char* equed, double* r,
                                 double* c, double* b, int ldb,
                                 double* x, int ldx, double* rcond,
                                 double* rpvgrw, double* berr,
                                 int n_err_bnds, double* err_bnds_norm,
                                 double* err_bnds_comp, int nparams,
                                 double* params, double* work,
                                 int* iwork );
int LAPACKE_cgesvxx_work( int matrix_order, char fact, char trans,
                                 int n, int nrhs,
                                 float _Complex* a, int lda,
                                 float _Complex* af, int ldaf,
                                 int* ipiv, char* equed, float* r,
                                 float* c, float _Complex* b,
                                 int ldb, float _Complex* x,
                                 int ldx, float* rcond, float* rpvgrw,
                                 float* berr, int n_err_bnds,
                                 float* err_bnds_norm, float* err_bnds_comp,
                                 int nparams, float* params,
                                 float _Complex* work, float* rwork );
int LAPACKE_zgesvxx_work( int matrix_order, char fact, char trans,
                                 int n, int nrhs,
                                 double _Complex* a, int lda,
                                 double _Complex* af, int ldaf,
                                 int* ipiv, char* equed, double* r,
                                 double* c, double _Complex* b,
                                 int ldb, double _Complex* x,
                                 int ldx, double* rcond, double* rpvgrw,
                                 double* berr, int n_err_bnds,
                                 double* err_bnds_norm, double* err_bnds_comp,
                                 int nparams, double* params,
                                 double _Complex* work, double* rwork );

int LAPACKE_sgetf2_work( int matrix_order, int m, int n,
                                float* a, int lda, int* ipiv );
int LAPACKE_dgetf2_work( int matrix_order, int m, int n,
                                double* a, int lda, int* ipiv );
int LAPACKE_cgetf2_work( int matrix_order, int m, int n,
                                float _Complex* a, int lda,
                                int* ipiv );
int LAPACKE_zgetf2_work( int matrix_order, int m, int n,
                                double _Complex* a, int lda,
                                int* ipiv );

int LAPACKE_sgetrf_work( int matrix_order, int m, int n,
                                float* a, int lda, int* ipiv );
int LAPACKE_dgetrf_work( int matrix_order, int m, int n,
                                double* a, int lda, int* ipiv );
int LAPACKE_cgetrf_work( int matrix_order, int m, int n,
                                float _Complex* a, int lda,
                                int* ipiv );
int LAPACKE_zgetrf_work( int matrix_order, int m, int n,
                                double _Complex* a, int lda,
                                int* ipiv );

int LAPACKE_sgetri_work( int matrix_order, int n, float* a,
                                int lda, const int* ipiv,
                                float* work, int lwork );
int LAPACKE_dgetri_work( int matrix_order, int n, double* a,
                                int lda, const int* ipiv,
                                double* work, int lwork );
int LAPACKE_cgetri_work( int matrix_order, int n,
                                float _Complex* a, int lda,
                                const int* ipiv,
                                float _Complex* work, int lwork );
int LAPACKE_zgetri_work( int matrix_order, int n,
                                double _Complex* a, int lda,
                                const int* ipiv,
                                double _Complex* work, int lwork );

int LAPACKE_sgetrs_work( int matrix_order, char trans, int n,
                                int nrhs, const float* a, int lda,
                                const int* ipiv, float* b,
                                int ldb );
int LAPACKE_dgetrs_work( int matrix_order, char trans, int n,
                                int nrhs, const double* a,
                                int lda, const int* ipiv,
                                double* b, int ldb );
int LAPACKE_cgetrs_work( int matrix_order, char trans, int n,
                                int nrhs, const float _Complex* a,
                                int lda, const int* ipiv,
                                float _Complex* b, int ldb );
int LAPACKE_zgetrs_work( int matrix_order, char trans, int n,
                                int nrhs, const double _Complex* a,
                                int lda, const int* ipiv,
                                double _Complex* b, int ldb );

int LAPACKE_sggbak_work( int matrix_order, char job, char side,
                                int n, int ilo, int ihi,
                                const float* lscale, const float* rscale,
                                int m, float* v, int ldv );
int LAPACKE_dggbak_work( int matrix_order, char job, char side,
                                int n, int ilo, int ihi,
                                const double* lscale, const double* rscale,
                                int m, double* v, int ldv );
int LAPACKE_cggbak_work( int matrix_order, char job, char side,
                                int n, int ilo, int ihi,
                                const float* lscale, const float* rscale,
                                int m, float _Complex* v,
                                int ldv );
int LAPACKE_zggbak_work( int matrix_order, char job, char side,
                                int n, int ilo, int ihi,
                                const double* lscale, const double* rscale,
                                int m, double _Complex* v,
                                int ldv );

int LAPACKE_sggbal_work( int matrix_order, char job, int n,
                                float* a, int lda, float* b,
                                int ldb, int* ilo,
                                int* ihi, float* lscale, float* rscale,
                                float* work );
int LAPACKE_dggbal_work( int matrix_order, char job, int n,
                                double* a, int lda, double* b,
                                int ldb, int* ilo,
                                int* ihi, double* lscale, double* rscale,
                                double* work );
int LAPACKE_cggbal_work( int matrix_order, char job, int n,
                                float _Complex* a, int lda,
                                float _Complex* b, int ldb,
                                int* ilo, int* ihi, float* lscale,
                                float* rscale, float* work );
int LAPACKE_zggbal_work( int matrix_order, char job, int n,
                                double _Complex* a, int lda,
                                double _Complex* b, int ldb,
                                int* ilo, int* ihi,
                                double* lscale, double* rscale, double* work );

int LAPACKE_sgges_work( int matrix_order, char jobvsl, char jobvsr,
                               char sort, LAPACK_S_SELECT3 selctg, int n,
                               float* a, int lda, float* b,
                               int ldb, int* sdim, float* alphar,
                               float* alphai, float* beta, float* vsl,
                               int ldvsl, float* vsr, int ldvsr,
                               float* work, int lwork,
                               int* bwork );
int LAPACKE_dgges_work( int matrix_order, char jobvsl, char jobvsr,
                               char sort, LAPACK_D_SELECT3 selctg, int n,
                               double* a, int lda, double* b,
                               int ldb, int* sdim, double* alphar,
                               double* alphai, double* beta, double* vsl,
                               int ldvsl, double* vsr, int ldvsr,
                               double* work, int lwork,
                               int* bwork );
int LAPACKE_cgges_work( int matrix_order, char jobvsl, char jobvsr,
                               char sort, LAPACK_C_SELECT2 selctg, int n,
                               float _Complex* a, int lda,
                               float _Complex* b, int ldb,
                               int* sdim, float _Complex* alpha,
                               float _Complex* beta,
                               float _Complex* vsl, int ldvsl,
                               float _Complex* vsr, int ldvsr,
                               float _Complex* work, int lwork,
                               float* rwork, int* bwork );
int LAPACKE_zgges_work( int matrix_order, char jobvsl, char jobvsr,
                               char sort, LAPACK_Z_SELECT2 selctg, int n,
                               double _Complex* a, int lda,
                               double _Complex* b, int ldb,
                               int* sdim, double _Complex* alpha,
                               double _Complex* beta,
                               double _Complex* vsl, int ldvsl,
                               double _Complex* vsr, int ldvsr,
                               double _Complex* work, int lwork,
                               double* rwork, int* bwork );

int LAPACKE_sggesx_work( int matrix_order, char jobvsl, char jobvsr,
                                char sort, LAPACK_S_SELECT3 selctg, char sense,
                                int n, float* a, int lda,
                                float* b, int ldb, int* sdim,
                                float* alphar, float* alphai, float* beta,
                                float* vsl, int ldvsl, float* vsr,
                                int ldvsr, float* rconde, float* rcondv,
                                float* work, int lwork,
                                int* iwork, int liwork,
                                int* bwork );
int LAPACKE_dggesx_work( int matrix_order, char jobvsl, char jobvsr,
                                char sort, LAPACK_D_SELECT3 selctg, char sense,
                                int n, double* a, int lda,
                                double* b, int ldb, int* sdim,
                                double* alphar, double* alphai, double* beta,
                                double* vsl, int ldvsl, double* vsr,
                                int ldvsr, double* rconde,
                                double* rcondv, double* work, int lwork,
                                int* iwork, int liwork,
                                int* bwork );
int LAPACKE_cggesx_work( int matrix_order, char jobvsl, char jobvsr,
                                char sort, LAPACK_C_SELECT2 selctg, char sense,
                                int n, float _Complex* a,
                                int lda, float _Complex* b,
                                int ldb, int* sdim,
                                float _Complex* alpha,
                                float _Complex* beta,
                                float _Complex* vsl, int ldvsl,
                                float _Complex* vsr, int ldvsr,
                                float* rconde, float* rcondv,
                                float _Complex* work, int lwork,
                                float* rwork, int* iwork,
                                int liwork, int* bwork );
int LAPACKE_zggesx_work( int matrix_order, char jobvsl, char jobvsr,
                                char sort, LAPACK_Z_SELECT2 selctg, char sense,
                                int n, double _Complex* a,
                                int lda, double _Complex* b,
                                int ldb, int* sdim,
                                double _Complex* alpha,
                                double _Complex* beta,
                                double _Complex* vsl, int ldvsl,
                                double _Complex* vsr, int ldvsr,
                                double* rconde, double* rcondv,
                                double _Complex* work, int lwork,
                                double* rwork, int* iwork,
                                int liwork, int* bwork );

int LAPACKE_sggev_work( int matrix_order, char jobvl, char jobvr,
                               int n, float* a, int lda, float* b,
                               int ldb, float* alphar, float* alphai,
                               float* beta, float* vl, int ldvl,
                               float* vr, int ldvr, float* work,
                               int lwork );
int LAPACKE_dggev_work( int matrix_order, char jobvl, char jobvr,
                               int n, double* a, int lda,
                               double* b, int ldb, double* alphar,
                               double* alphai, double* beta, double* vl,
                               int ldvl, double* vr, int ldvr,
                               double* work, int lwork );
int LAPACKE_cggev_work( int matrix_order, char jobvl, char jobvr,
                               int n, float _Complex* a,
                               int lda, float _Complex* b,
                               int ldb, float _Complex* alpha,
                               float _Complex* beta,
                               float _Complex* vl, int ldvl,
                               float _Complex* vr, int ldvr,
                               float _Complex* work, int lwork,
                               float* rwork );
int LAPACKE_zggev_work( int matrix_order, char jobvl, char jobvr,
                               int n, double _Complex* a,
                               int lda, double _Complex* b,
                               int ldb, double _Complex* alpha,
                               double _Complex* beta,
                               double _Complex* vl, int ldvl,
                               double _Complex* vr, int ldvr,
                               double _Complex* work, int lwork,
                               double* rwork );

int LAPACKE_sggevx_work( int matrix_order, char balanc, char jobvl,
                                char jobvr, char sense, int n, float* a,
                                int lda, float* b, int ldb,
                                float* alphar, float* alphai, float* beta,
                                float* vl, int ldvl, float* vr,
                                int ldvr, int* ilo,
                                int* ihi, float* lscale, float* rscale,
                                float* abnrm, float* bbnrm, float* rconde,
                                float* rcondv, float* work, int lwork,
                                int* iwork, int* bwork );
int LAPACKE_dggevx_work( int matrix_order, char balanc, char jobvl,
                                char jobvr, char sense, int n, double* a,
                                int lda, double* b, int ldb,
                                double* alphar, double* alphai, double* beta,
                                double* vl, int ldvl, double* vr,
                                int ldvr, int* ilo,
                                int* ihi, double* lscale, double* rscale,
                                double* abnrm, double* bbnrm, double* rconde,
                                double* rcondv, double* work, int lwork,
                                int* iwork, int* bwork );
int LAPACKE_cggevx_work( int matrix_order, char balanc, char jobvl,
                                char jobvr, char sense, int n,
                                float _Complex* a, int lda,
                                float _Complex* b, int ldb,
                                float _Complex* alpha,
                                float _Complex* beta,
                                float _Complex* vl, int ldvl,
                                float _Complex* vr, int ldvr,
                                int* ilo, int* ihi, float* lscale,
                                float* rscale, float* abnrm, float* bbnrm,
                                float* rconde, float* rcondv,
                                float _Complex* work, int lwork,
                                float* rwork, int* iwork,
                                int* bwork );
int LAPACKE_zggevx_work( int matrix_order, char balanc, char jobvl,
                                char jobvr, char sense, int n,
                                double _Complex* a, int lda,
                                double _Complex* b, int ldb,
                                double _Complex* alpha,
                                double _Complex* beta,
                                double _Complex* vl, int ldvl,
                                double _Complex* vr, int ldvr,
                                int* ilo, int* ihi,
                                double* lscale, double* rscale, double* abnrm,
                                double* bbnrm, double* rconde, double* rcondv,
                                double _Complex* work, int lwork,
                                double* rwork, int* iwork,
                                int* bwork );

int LAPACKE_sggglm_work( int matrix_order, int n, int m,
                                int p, float* a, int lda,
                                float* b, int ldb, float* d, float* x,
                                float* y, float* work, int lwork );
int LAPACKE_dggglm_work( int matrix_order, int n, int m,
                                int p, double* a, int lda,
                                double* b, int ldb, double* d, double* x,
                                double* y, double* work, int lwork );
int LAPACKE_cggglm_work( int matrix_order, int n, int m,
                                int p, float _Complex* a,
                                int lda, float _Complex* b,
                                int ldb, float _Complex* d,
                                float _Complex* x,
                                float _Complex* y,
                                float _Complex* work, int lwork );
int LAPACKE_zggglm_work( int matrix_order, int n, int m,
                                int p, double _Complex* a,
                                int lda, double _Complex* b,
                                int ldb, double _Complex* d,
                                double _Complex* x,
                                double _Complex* y,
                                double _Complex* work, int lwork );

int LAPACKE_sgghrd_work( int matrix_order, char compq, char compz,
                                int n, int ilo, int ihi,
                                float* a, int lda, float* b,
                                int ldb, float* q, int ldq,
                                float* z, int ldz );
int LAPACKE_dgghrd_work( int matrix_order, char compq, char compz,
                                int n, int ilo, int ihi,
                                double* a, int lda, double* b,
                                int ldb, double* q, int ldq,
                                double* z, int ldz );
int LAPACKE_cgghrd_work( int matrix_order, char compq, char compz,
                                int n, int ilo, int ihi,
                                float _Complex* a, int lda,
                                float _Complex* b, int ldb,
                                float _Complex* q, int ldq,
                                float _Complex* z, int ldz );
int LAPACKE_zgghrd_work( int matrix_order, char compq, char compz,
                                int n, int ilo, int ihi,
                                double _Complex* a, int lda,
                                double _Complex* b, int ldb,
                                double _Complex* q, int ldq,
                                double _Complex* z, int ldz );

int LAPACKE_sgglse_work( int matrix_order, int m, int n,
                                int p, float* a, int lda,
                                float* b, int ldb, float* c, float* d,
                                float* x, float* work, int lwork );
int LAPACKE_dgglse_work( int matrix_order, int m, int n,
                                int p, double* a, int lda,
                                double* b, int ldb, double* c, double* d,
                                double* x, double* work, int lwork );
int LAPACKE_cgglse_work( int matrix_order, int m, int n,
                                int p, float _Complex* a,
                                int lda, float _Complex* b,
                                int ldb, float _Complex* c,
                                float _Complex* d,
                                float _Complex* x,
                                float _Complex* work, int lwork );
int LAPACKE_zgglse_work( int matrix_order, int m, int n,
                                int p, double _Complex* a,
                                int lda, double _Complex* b,
                                int ldb, double _Complex* c,
                                double _Complex* d,
                                double _Complex* x,
                                double _Complex* work, int lwork );

int LAPACKE_sggqrf_work( int matrix_order, int n, int m,
                                int p, float* a, int lda,
                                float* taua, float* b, int ldb,
                                float* taub, float* work, int lwork );
int LAPACKE_dggqrf_work( int matrix_order, int n, int m,
                                int p, double* a, int lda,
                                double* taua, double* b, int ldb,
                                double* taub, double* work, int lwork );
int LAPACKE_cggqrf_work( int matrix_order, int n, int m,
                                int p, float _Complex* a,
                                int lda, float _Complex* taua,
                                float _Complex* b, int ldb,
                                float _Complex* taub,
                                float _Complex* work, int lwork );
int LAPACKE_zggqrf_work( int matrix_order, int n, int m,
                                int p, double _Complex* a,
                                int lda, double _Complex* taua,
                                double _Complex* b, int ldb,
                                double _Complex* taub,
                                double _Complex* work, int lwork );

int LAPACKE_sggrqf_work( int matrix_order, int m, int p,
                                int n, float* a, int lda,
                                float* taua, float* b, int ldb,
                                float* taub, float* work, int lwork );
int LAPACKE_dggrqf_work( int matrix_order, int m, int p,
                                int n, double* a, int lda,
                                double* taua, double* b, int ldb,
                                double* taub, double* work, int lwork );
int LAPACKE_cggrqf_work( int matrix_order, int m, int p,
                                int n, float _Complex* a,
                                int lda, float _Complex* taua,
                                float _Complex* b, int ldb,
                                float _Complex* taub,
                                float _Complex* work, int lwork );
int LAPACKE_zggrqf_work( int matrix_order, int m, int p,
                                int n, double _Complex* a,
                                int lda, double _Complex* taua,
                                double _Complex* b, int ldb,
                                double _Complex* taub,
                                double _Complex* work, int lwork );

int LAPACKE_sggsvd_work( int matrix_order, char jobu, char jobv,
                                char jobq, int m, int n,
                                int p, int* k, int* l,
                                float* a, int lda, float* b,
                                int ldb, float* alpha, float* beta,
                                float* u, int ldu, float* v,
                                int ldv, float* q, int ldq,
                                float* work, int* iwork );
int LAPACKE_dggsvd_work( int matrix_order, char jobu, char jobv,
                                char jobq, int m, int n,
                                int p, int* k, int* l,
                                double* a, int lda, double* b,
                                int ldb, double* alpha, double* beta,
                                double* u, int ldu, double* v,
                                int ldv, double* q, int ldq,
                                double* work, int* iwork );
int LAPACKE_cggsvd_work( int matrix_order, char jobu, char jobv,
                                char jobq, int m, int n,
                                int p, int* k, int* l,
                                float _Complex* a, int lda,
                                float _Complex* b, int ldb,
                                float* alpha, float* beta,
                                float _Complex* u, int ldu,
                                float _Complex* v, int ldv,
                                float _Complex* q, int ldq,
                                float _Complex* work, float* rwork,
                                int* iwork );
int LAPACKE_zggsvd_work( int matrix_order, char jobu, char jobv,
                                char jobq, int m, int n,
                                int p, int* k, int* l,
                                double _Complex* a, int lda,
                                double _Complex* b, int ldb,
                                double* alpha, double* beta,
                                double _Complex* u, int ldu,
                                double _Complex* v, int ldv,
                                double _Complex* q, int ldq,
                                double _Complex* work, double* rwork,
                                int* iwork );

int LAPACKE_sggsvp_work( int matrix_order, char jobu, char jobv,
                                char jobq, int m, int p,
                                int n, float* a, int lda,
                                float* b, int ldb, float tola,
                                float tolb, int* k, int* l,
                                float* u, int ldu, float* v,
                                int ldv, float* q, int ldq,
                                int* iwork, float* tau, float* work );
int LAPACKE_dggsvp_work( int matrix_order, char jobu, char jobv,
                                char jobq, int m, int p,
                                int n, double* a, int lda,
                                double* b, int ldb, double tola,
                                double tolb, int* k, int* l,
                                double* u, int ldu, double* v,
                                int ldv, double* q, int ldq,
                                int* iwork, double* tau, double* work );
int LAPACKE_cggsvp_work( int matrix_order, char jobu, char jobv,
                                char jobq, int m, int p,
                                int n, float _Complex* a,
                                int lda, float _Complex* b,
                                int ldb, float tola, float tolb,
                                int* k, int* l,
                                float _Complex* u, int ldu,
                                float _Complex* v, int ldv,
                                float _Complex* q, int ldq,
                                int* iwork, float* rwork,
                                float _Complex* tau,
                                float _Complex* work );
int LAPACKE_zggsvp_work( int matrix_order, char jobu, char jobv,
                                char jobq, int m, int p,
                                int n, double _Complex* a,
                                int lda, double _Complex* b,
                                int ldb, double tola, double tolb,
                                int* k, int* l,
                                double _Complex* u, int ldu,
                                double _Complex* v, int ldv,
                                double _Complex* q, int ldq,
                                int* iwork, double* rwork,
                                double _Complex* tau,
                                double _Complex* work );

int LAPACKE_sgtcon_work( char norm, int n, const float* dl,
                                const float* d, const float* du,
                                const float* du2, const int* ipiv,
                                float anorm, float* rcond, float* work,
                                int* iwork );
int LAPACKE_dgtcon_work( char norm, int n, const double* dl,
                                const double* d, const double* du,
                                const double* du2, const int* ipiv,
                                double anorm, double* rcond, double* work,
                                int* iwork );
int LAPACKE_cgtcon_work( char norm, int n,
                                const float _Complex* dl,
                                const float _Complex* d,
                                const float _Complex* du,
                                const float _Complex* du2,
                                const int* ipiv, float anorm,
                                float* rcond, float _Complex* work );
int LAPACKE_zgtcon_work( char norm, int n,
                                const double _Complex* dl,
                                const double _Complex* d,
                                const double _Complex* du,
                                const double _Complex* du2,
                                const int* ipiv, double anorm,
                                double* rcond, double _Complex* work );

int LAPACKE_sgtrfs_work( int matrix_order, char trans, int n,
                                int nrhs, const float* dl,
                                const float* d, const float* du,
                                const float* dlf, const float* df,
                                const float* duf, const float* du2,
                                const int* ipiv, const float* b,
                                int ldb, float* x, int ldx,
                                float* ferr, float* berr, float* work,
                                int* iwork );
int LAPACKE_dgtrfs_work( int matrix_order, char trans, int n,
                                int nrhs, const double* dl,
                                const double* d, const double* du,
                                const double* dlf, const double* df,
                                const double* duf, const double* du2,
                                const int* ipiv, const double* b,
                                int ldb, double* x, int ldx,
                                double* ferr, double* berr, double* work,
                                int* iwork );
int LAPACKE_cgtrfs_work( int matrix_order, char trans, int n,
                                int nrhs, const float _Complex* dl,
                                const float _Complex* d,
                                const float _Complex* du,
                                const float _Complex* dlf,
                                const float _Complex* df,
                                const float _Complex* duf,
                                const float _Complex* du2,
                                const int* ipiv,
                                const float _Complex* b, int ldb,
                                float _Complex* x, int ldx,
                                float* ferr, float* berr,
                                float _Complex* work, float* rwork );
int LAPACKE_zgtrfs_work( int matrix_order, char trans, int n,
                                int nrhs,
                                const double _Complex* dl,
                                const double _Complex* d,
                                const double _Complex* du,
                                const double _Complex* dlf,
                                const double _Complex* df,
                                const double _Complex* duf,
                                const double _Complex* du2,
                                const int* ipiv,
                                const double _Complex* b, int ldb,
                                double _Complex* x, int ldx,
                                double* ferr, double* berr,
                                double _Complex* work, double* rwork );

int LAPACKE_sgtsv_work( int matrix_order, int n, int nrhs,
                               float* dl, float* d, float* du, float* b,
                               int ldb );
int LAPACKE_dgtsv_work( int matrix_order, int n, int nrhs,
                               double* dl, double* d, double* du, double* b,
                               int ldb );
int LAPACKE_cgtsv_work( int matrix_order, int n, int nrhs,
                               float _Complex* dl,
                               float _Complex* d,
                               float _Complex* du,
                               float _Complex* b, int ldb );
int LAPACKE_zgtsv_work( int matrix_order, int n, int nrhs,
                               double _Complex* dl,
                               double _Complex* d,
                               double _Complex* du,
                               double _Complex* b, int ldb );

int LAPACKE_sgtsvx_work( int matrix_order, char fact, char trans,
                                int n, int nrhs, const float* dl,
                                const float* d, const float* du, float* dlf,
                                float* df, float* duf, float* du2,
                                int* ipiv, const float* b,
                                int ldb, float* x, int ldx,
                                float* rcond, float* ferr, float* berr,
                                float* work, int* iwork );
int LAPACKE_dgtsvx_work( int matrix_order, char fact, char trans,
                                int n, int nrhs, const double* dl,
                                const double* d, const double* du, double* dlf,
                                double* df, double* duf, double* du2,
                                int* ipiv, const double* b,
                                int ldb, double* x, int ldx,
                                double* rcond, double* ferr, double* berr,
                                double* work, int* iwork );
int LAPACKE_cgtsvx_work( int matrix_order, char fact, char trans,
                                int n, int nrhs,
                                const float _Complex* dl,
                                const float _Complex* d,
                                const float _Complex* du,
                                float _Complex* dlf,
                                float _Complex* df,
                                float _Complex* duf,
                                float _Complex* du2, int* ipiv,
                                const float _Complex* b, int ldb,
                                float _Complex* x, int ldx,
                                float* rcond, float* ferr, float* berr,
                                float _Complex* work, float* rwork );
int LAPACKE_zgtsvx_work( int matrix_order, char fact, char trans,
                                int n, int nrhs,
                                const double _Complex* dl,
                                const double _Complex* d,
                                const double _Complex* du,
                                double _Complex* dlf,
                                double _Complex* df,
                                double _Complex* duf,
                                double _Complex* du2, int* ipiv,
                                const double _Complex* b, int ldb,
                                double _Complex* x, int ldx,
                                double* rcond, double* ferr, double* berr,
                                double _Complex* work, double* rwork );

int LAPACKE_sgttrf_work( int n, float* dl, float* d, float* du,
                                float* du2, int* ipiv );
int LAPACKE_dgttrf_work( int n, double* dl, double* d, double* du,
                                double* du2, int* ipiv );
int LAPACKE_cgttrf_work( int n, float _Complex* dl,
                                float _Complex* d,
                                float _Complex* du,
                                float _Complex* du2, int* ipiv );
int LAPACKE_zgttrf_work( int n, double _Complex* dl,
                                double _Complex* d,
                                double _Complex* du,
                                double _Complex* du2, int* ipiv );

int LAPACKE_sgttrs_work( int matrix_order, char trans, int n,
                                int nrhs, const float* dl,
                                const float* d, const float* du,
                                const float* du2, const int* ipiv,
                                float* b, int ldb );
int LAPACKE_dgttrs_work( int matrix_order, char trans, int n,
                                int nrhs, const double* dl,
                                const double* d, const double* du,
                                const double* du2, const int* ipiv,
                                double* b, int ldb );
int LAPACKE_cgttrs_work( int matrix_order, char trans, int n,
                                int nrhs, const float _Complex* dl,
                                const float _Complex* d,
                                const float _Complex* du,
                                const float _Complex* du2,
                                const int* ipiv, float _Complex* b,
                                int ldb );
int LAPACKE_zgttrs_work( int matrix_order, char trans, int n,
                                int nrhs,
                                const double _Complex* dl,
                                const double _Complex* d,
                                const double _Complex* du,
                                const double _Complex* du2,
                                const int* ipiv,
                                double _Complex* b, int ldb );

int LAPACKE_chbev_work( int matrix_order, char jobz, char uplo,
                               int n, int kd,
                               float _Complex* ab, int ldab,
                               float* w, float _Complex* z,
                               int ldz, float _Complex* work,
                               float* rwork );
int LAPACKE_zhbev_work( int matrix_order, char jobz, char uplo,
                               int n, int kd,
                               double _Complex* ab, int ldab,
                               double* w, double _Complex* z,
                               int ldz, double _Complex* work,
                               double* rwork );

int LAPACKE_chbevd_work( int matrix_order, char jobz, char uplo,
                                int n, int kd,
                                float _Complex* ab, int ldab,
                                float* w, float _Complex* z,
                                int ldz, float _Complex* work,
                                int lwork, float* rwork,
                                int lrwork, int* iwork,
                                int liwork );
int LAPACKE_zhbevd_work( int matrix_order, char jobz, char uplo,
                                int n, int kd,
                                double _Complex* ab, int ldab,
                                double* w, double _Complex* z,
                                int ldz, double _Complex* work,
                                int lwork, double* rwork,
                                int lrwork, int* iwork,
                                int liwork );

int LAPACKE_chbevx_work( int matrix_order, char jobz, char range,
                                char uplo, int n, int kd,
                                float _Complex* ab, int ldab,
                                float _Complex* q, int ldq,
                                float vl, float vu, int il,
                                int iu, float abstol, int* m,
                                float* w, float _Complex* z,
                                int ldz, float _Complex* work,
                                float* rwork, int* iwork,
                                int* ifail );
int LAPACKE_zhbevx_work( int matrix_order, char jobz, char range,
                                char uplo, int n, int kd,
                                double _Complex* ab, int ldab,
                                double _Complex* q, int ldq,
                                double vl, double vu, int il,
                                int iu, double abstol, int* m,
                                double* w, double _Complex* z,
                                int ldz, double _Complex* work,
                                double* rwork, int* iwork,
                                int* ifail );

int LAPACKE_chbgst_work( int matrix_order, char vect, char uplo,
                                int n, int ka, int kb,
                                float _Complex* ab, int ldab,
                                const float _Complex* bb, int ldbb,
                                float _Complex* x, int ldx,
                                float _Complex* work, float* rwork );
int LAPACKE_zhbgst_work( int matrix_order, char vect, char uplo,
                                int n, int ka, int kb,
                                double _Complex* ab, int ldab,
                                const double _Complex* bb,
                                int ldbb, double _Complex* x,
                                int ldx, double _Complex* work,
                                double* rwork );

int LAPACKE_chbgv_work( int matrix_order, char jobz, char uplo,
                               int n, int ka, int kb,
                               float _Complex* ab, int ldab,
                               float _Complex* bb, int ldbb,
                               float* w, float _Complex* z,
                               int ldz, float _Complex* work,
                               float* rwork );
int LAPACKE_zhbgv_work( int matrix_order, char jobz, char uplo,
                               int n, int ka, int kb,
                               double _Complex* ab, int ldab,
                               double _Complex* bb, int ldbb,
                               double* w, double _Complex* z,
                               int ldz, double _Complex* work,
                               double* rwork );

int LAPACKE_chbgvd_work( int matrix_order, char jobz, char uplo,
                                int n, int ka, int kb,
                                float _Complex* ab, int ldab,
                                float _Complex* bb, int ldbb,
                                float* w, float _Complex* z,
                                int ldz, float _Complex* work,
                                int lwork, float* rwork,
                                int lrwork, int* iwork,
                                int liwork );
int LAPACKE_zhbgvd_work( int matrix_order, char jobz, char uplo,
                                int n, int ka, int kb,
                                double _Complex* ab, int ldab,
                                double _Complex* bb, int ldbb,
                                double* w, double _Complex* z,
                                int ldz, double _Complex* work,
                                int lwork, double* rwork,
                                int lrwork, int* iwork,
                                int liwork );

int LAPACKE_chbgvx_work( int matrix_order, char jobz, char range,
                                char uplo, int n, int ka,
                                int kb, float _Complex* ab,
                                int ldab, float _Complex* bb,
                                int ldbb, float _Complex* q,
                                int ldq, float vl, float vu,
                                int il, int iu, float abstol,
                                int* m, float* w,
                                float _Complex* z, int ldz,
                                float _Complex* work, float* rwork,
                                int* iwork, int* ifail );
int LAPACKE_zhbgvx_work( int matrix_order, char jobz, char range,
                                char uplo, int n, int ka,
                                int kb, double _Complex* ab,
                                int ldab, double _Complex* bb,
                                int ldbb, double _Complex* q,
                                int ldq, double vl, double vu,
                                int il, int iu, double abstol,
                                int* m, double* w,
                                double _Complex* z, int ldz,
                                double _Complex* work, double* rwork,
                                int* iwork, int* ifail );

int LAPACKE_chbtrd_work( int matrix_order, char vect, char uplo,
                                int n, int kd,
                                float _Complex* ab, int ldab,
                                float* d, float* e, float _Complex* q,
                                int ldq, float _Complex* work );
int LAPACKE_zhbtrd_work( int matrix_order, char vect, char uplo,
                                int n, int kd,
                                double _Complex* ab, int ldab,
                                double* d, double* e, double _Complex* q,
                                int ldq, double _Complex* work );

int LAPACKE_checon_work( int matrix_order, char uplo, int n,
                                const float _Complex* a, int lda,
                                const int* ipiv, float anorm,
                                float* rcond, float _Complex* work );
int LAPACKE_zhecon_work( int matrix_order, char uplo, int n,
                                const double _Complex* a, int lda,
                                const int* ipiv, double anorm,
                                double* rcond, double _Complex* work );

int LAPACKE_cheequb_work( int matrix_order, char uplo, int n,
                                 const float _Complex* a, int lda,
                                 float* s, float* scond, float* amax,
                                 float _Complex* work );
int LAPACKE_zheequb_work( int matrix_order, char uplo, int n,
                                 const double _Complex* a, int lda,
                                 double* s, double* scond, double* amax,
                                 double _Complex* work );

int LAPACKE_cheev_work( int matrix_order, char jobz, char uplo,
                               int n, float _Complex* a,
                               int lda, float* w,
                               float _Complex* work, int lwork,
                               float* rwork );
int LAPACKE_zheev_work( int matrix_order, char jobz, char uplo,
                               int n, double _Complex* a,
                               int lda, double* w,
                               double _Complex* work, int lwork,
                               double* rwork );

int LAPACKE_cheevd_work( int matrix_order, char jobz, char uplo,
                                int n, float _Complex* a,
                                int lda, float* w,
                                float _Complex* work, int lwork,
                                float* rwork, int lrwork,
                                int* iwork, int liwork );
int LAPACKE_zheevd_work( int matrix_order, char jobz, char uplo,
                                int n, double _Complex* a,
                                int lda, double* w,
                                double _Complex* work, int lwork,
                                double* rwork, int lrwork,
                                int* iwork, int liwork );

int LAPACKE_cheevr_work( int matrix_order, char jobz, char range,
                                char uplo, int n,
                                float _Complex* a, int lda,
                                float vl, float vu, int il,
                                int iu, float abstol, int* m,
                                float* w, float _Complex* z,
                                int ldz, int* isuppz,
                                float _Complex* work, int lwork,
                                float* rwork, int lrwork,
                                int* iwork, int liwork );
int LAPACKE_zheevr_work( int matrix_order, char jobz, char range,
                                char uplo, int n,
                                double _Complex* a, int lda,
                                double vl, double vu, int il,
                                int iu, double abstol, int* m,
                                double* w, double _Complex* z,
                                int ldz, int* isuppz,
                                double _Complex* work, int lwork,
                                double* rwork, int lrwork,
                                int* iwork, int liwork );

int LAPACKE_cheevx_work( int matrix_order, char jobz, char range,
                                char uplo, int n,
                                float _Complex* a, int lda,
                                float vl, float vu, int il,
                                int iu, float abstol, int* m,
                                float* w, float _Complex* z,
                                int ldz, float _Complex* work,
                                int lwork, float* rwork,
                                int* iwork, int* ifail );
int LAPACKE_zheevx_work( int matrix_order, char jobz, char range,
                                char uplo, int n,
                                double _Complex* a, int lda,
                                double vl, double vu, int il,
                                int iu, double abstol, int* m,
                                double* w, double _Complex* z,
                                int ldz, double _Complex* work,
                                int lwork, double* rwork,
                                int* iwork, int* ifail );

int LAPACKE_chegst_work( int matrix_order, int itype, char uplo,
                                int n, float _Complex* a,
                                int lda, const float _Complex* b,
                                int ldb );
int LAPACKE_zhegst_work( int matrix_order, int itype, char uplo,
                                int n, double _Complex* a,
                                int lda, const double _Complex* b,
                                int ldb );

int LAPACKE_chegv_work( int matrix_order, int itype, char jobz,
                               char uplo, int n, float _Complex* a,
                               int lda, float _Complex* b,
                               int ldb, float* w,
                               float _Complex* work, int lwork,
                               float* rwork );
int LAPACKE_zhegv_work( int matrix_order, int itype, char jobz,
                               char uplo, int n,
                               double _Complex* a, int lda,
                               double _Complex* b, int ldb,
                               double* w, double _Complex* work,
                               int lwork, double* rwork );

int LAPACKE_chegvd_work( int matrix_order, int itype, char jobz,
                                char uplo, int n,
                                float _Complex* a, int lda,
                                float _Complex* b, int ldb,
                                float* w, float _Complex* work,
                                int lwork, float* rwork,
                                int lrwork, int* iwork,
                                int liwork );
int LAPACKE_zhegvd_work( int matrix_order, int itype, char jobz,
                                char uplo, int n,
                                double _Complex* a, int lda,
                                double _Complex* b, int ldb,
                                double* w, double _Complex* work,
                                int lwork, double* rwork,
                                int lrwork, int* iwork,
                                int liwork );

int LAPACKE_chegvx_work( int matrix_order, int itype, char jobz,
                                char range, char uplo, int n,
                                float _Complex* a, int lda,
                                float _Complex* b, int ldb,
                                float vl, float vu, int il,
                                int iu, float abstol, int* m,
                                float* w, float _Complex* z,
                                int ldz, float _Complex* work,
                                int lwork, float* rwork,
                                int* iwork, int* ifail );
int LAPACKE_zhegvx_work( int matrix_order, int itype, char jobz,
                                char range, char uplo, int n,
                                double _Complex* a, int lda,
                                double _Complex* b, int ldb,
                                double vl, double vu, int il,
                                int iu, double abstol, int* m,
                                double* w, double _Complex* z,
                                int ldz, double _Complex* work,
                                int lwork, double* rwork,
                                int* iwork, int* ifail );

int LAPACKE_cherfs_work( int matrix_order, char uplo, int n,
                                int nrhs, const float _Complex* a,
                                int lda, const float _Complex* af,
                                int ldaf, const int* ipiv,
                                const float _Complex* b, int ldb,
                                float _Complex* x, int ldx,
                                float* ferr, float* berr,
                                float _Complex* work, float* rwork );
int LAPACKE_zherfs_work( int matrix_order, char uplo, int n,
                                int nrhs, const double _Complex* a,
                                int lda, const double _Complex* af,
                                int ldaf, const int* ipiv,
                                const double _Complex* b, int ldb,
                                double _Complex* x, int ldx,
                                double* ferr, double* berr,
                                double _Complex* work, double* rwork );

int LAPACKE_cherfsx_work( int matrix_order, char uplo, char equed,
                                 int n, int nrhs,
                                 const float _Complex* a, int lda,
                                 const float _Complex* af,
                                 int ldaf, const int* ipiv,
                                 const float* s, const float _Complex* b,
                                 int ldb, float _Complex* x,
                                 int ldx, float* rcond, float* berr,
                                 int n_err_bnds, float* err_bnds_norm,
                                 float* err_bnds_comp, int nparams,
                                 float* params, float _Complex* work,
                                 float* rwork );
int LAPACKE_zherfsx_work( int matrix_order, char uplo, char equed,
                                 int n, int nrhs,
                                 const double _Complex* a, int lda,
                                 const double _Complex* af,
                                 int ldaf, const int* ipiv,
                                 const double* s,
                                 const double _Complex* b, int ldb,
                                 double _Complex* x, int ldx,
                                 double* rcond, double* berr,
                                 int n_err_bnds, double* err_bnds_norm,
                                 double* err_bnds_comp, int nparams,
                                 double* params, double _Complex* work,
                                 double* rwork );

int LAPACKE_chesv_work( int matrix_order, char uplo, int n,
                               int nrhs, float _Complex* a,
                               int lda, int* ipiv,
                               float _Complex* b, int ldb,
                               float _Complex* work, int lwork );
int LAPACKE_zhesv_work( int matrix_order, char uplo, int n,
                               int nrhs, double _Complex* a,
                               int lda, int* ipiv,
                               double _Complex* b, int ldb,
                               double _Complex* work, int lwork );

int LAPACKE_chesvx_work( int matrix_order, char fact, char uplo,
                                int n, int nrhs,
                                const float _Complex* a, int lda,
                                float _Complex* af, int ldaf,
                                int* ipiv, const float _Complex* b,
                                int ldb, float _Complex* x,
                                int ldx, float* rcond, float* ferr,
                                float* berr, float _Complex* work,
                                int lwork, float* rwork );
int LAPACKE_zhesvx_work( int matrix_order, char fact, char uplo,
                                int n, int nrhs,
                                const double _Complex* a, int lda,
                                double _Complex* af, int ldaf,
                                int* ipiv,
                                const double _Complex* b, int ldb,
                                double _Complex* x, int ldx,
                                double* rcond, double* ferr, double* berr,
                                double _Complex* work, int lwork,
                                double* rwork );

int LAPACKE_chesvxx_work( int matrix_order, char fact, char uplo,
                                 int n, int nrhs,
                                 float _Complex* a, int lda,
                                 float _Complex* af, int ldaf,
                                 int* ipiv, char* equed, float* s,
                                 float _Complex* b, int ldb,
                                 float _Complex* x, int ldx,
                                 float* rcond, float* rpvgrw, float* berr,
                                 int n_err_bnds, float* err_bnds_norm,
                                 float* err_bnds_comp, int nparams,
                                 float* params, float _Complex* work,
                                 float* rwork );
int LAPACKE_zhesvxx_work( int matrix_order, char fact, char uplo,
                                 int n, int nrhs,
                                 double _Complex* a, int lda,
                                 double _Complex* af, int ldaf,
                                 int* ipiv, char* equed, double* s,
                                 double _Complex* b, int ldb,
                                 double _Complex* x, int ldx,
                                 double* rcond, double* rpvgrw, double* berr,
                                 int n_err_bnds, double* err_bnds_norm,
                                 double* err_bnds_comp, int nparams,
                                 double* params, double _Complex* work,
                                 double* rwork );

int LAPACKE_chetrd_work( int matrix_order, char uplo, int n,
                                float _Complex* a, int lda,
                                float* d, float* e, float _Complex* tau,
                                float _Complex* work, int lwork );
int LAPACKE_zhetrd_work( int matrix_order, char uplo, int n,
                                double _Complex* a, int lda,
                                double* d, double* e,
                                double _Complex* tau,
                                double _Complex* work, int lwork );

int LAPACKE_chetrf_work( int matrix_order, char uplo, int n,
                                float _Complex* a, int lda,
                                int* ipiv, float _Complex* work,
                                int lwork );
int LAPACKE_zhetrf_work( int matrix_order, char uplo, int n,
                                double _Complex* a, int lda,
                                int* ipiv, double _Complex* work,
                                int lwork );

int LAPACKE_chetri_work( int matrix_order, char uplo, int n,
                                float _Complex* a, int lda,
                                const int* ipiv,
                                float _Complex* work );
int LAPACKE_zhetri_work( int matrix_order, char uplo, int n,
                                double _Complex* a, int lda,
                                const int* ipiv,
                                double _Complex* work );

int LAPACKE_chetrs_work( int matrix_order, char uplo, int n,
                                int nrhs, const float _Complex* a,
                                int lda, const int* ipiv,
                                float _Complex* b, int ldb );
int LAPACKE_zhetrs_work( int matrix_order, char uplo, int n,
                                int nrhs, const double _Complex* a,
                                int lda, const int* ipiv,
                                double _Complex* b, int ldb );

int LAPACKE_chfrk_work( int matrix_order, char transr, char uplo,
                               char trans, int n, int k,
                               float alpha, const float _Complex* a,
                               int lda, float beta,
                               float _Complex* c );
int LAPACKE_zhfrk_work( int matrix_order, char transr, char uplo,
                               char trans, int n, int k,
                               double alpha, const double _Complex* a,
                               int lda, double beta,
                               double _Complex* c );

int LAPACKE_shgeqz_work( int matrix_order, char job, char compq,
                                char compz, int n, int ilo,
                                int ihi, float* h, int ldh,
                                float* t, int ldt, float* alphar,
                                float* alphai, float* beta, float* q,
                                int ldq, float* z, int ldz,
                                float* work, int lwork );
int LAPACKE_dhgeqz_work( int matrix_order, char job, char compq,
                                char compz, int n, int ilo,
                                int ihi, double* h, int ldh,
                                double* t, int ldt, double* alphar,
                                double* alphai, double* beta, double* q,
                                int ldq, double* z, int ldz,
                                double* work, int lwork );
int LAPACKE_chgeqz_work( int matrix_order, char job, char compq,
                                char compz, int n, int ilo,
                                int ihi, float _Complex* h,
                                int ldh, float _Complex* t,
                                int ldt, float _Complex* alpha,
                                float _Complex* beta,
                                float _Complex* q, int ldq,
                                float _Complex* z, int ldz,
                                float _Complex* work, int lwork,
                                float* rwork );
int LAPACKE_zhgeqz_work( int matrix_order, char job, char compq,
                                char compz, int n, int ilo,
                                int ihi, double _Complex* h,
                                int ldh, double _Complex* t,
                                int ldt, double _Complex* alpha,
                                double _Complex* beta,
                                double _Complex* q, int ldq,
                                double _Complex* z, int ldz,
                                double _Complex* work, int lwork,
                                double* rwork );

int LAPACKE_chpcon_work( int matrix_order, char uplo, int n,
                                const float _Complex* ap,
                                const int* ipiv, float anorm,
                                float* rcond, float _Complex* work );
int LAPACKE_zhpcon_work( int matrix_order, char uplo, int n,
                                const double _Complex* ap,
                                const int* ipiv, double anorm,
                                double* rcond, double _Complex* work );

int LAPACKE_chpev_work( int matrix_order, char jobz, char uplo,
                               int n, float _Complex* ap, float* w,
                               float _Complex* z, int ldz,
                               float _Complex* work, float* rwork );
int LAPACKE_zhpev_work( int matrix_order, char jobz, char uplo,
                               int n, double _Complex* ap,
                               double* w, double _Complex* z,
                               int ldz, double _Complex* work,
                               double* rwork );

int LAPACKE_chpevd_work( int matrix_order, char jobz, char uplo,
                                int n, float _Complex* ap,
                                float* w, float _Complex* z,
                                int ldz, float _Complex* work,
                                int lwork, float* rwork,
                                int lrwork, int* iwork,
                                int liwork );
int LAPACKE_zhpevd_work( int matrix_order, char jobz, char uplo,
                                int n, double _Complex* ap,
                                double* w, double _Complex* z,
                                int ldz, double _Complex* work,
                                int lwork, double* rwork,
                                int lrwork, int* iwork,
                                int liwork );

int LAPACKE_chpevx_work( int matrix_order, char jobz, char range,
                                char uplo, int n,
                                float _Complex* ap, float vl, float vu,
                                int il, int iu, float abstol,
                                int* m, float* w,
                                float _Complex* z, int ldz,
                                float _Complex* work, float* rwork,
                                int* iwork, int* ifail );
int LAPACKE_zhpevx_work( int matrix_order, char jobz, char range,
                                char uplo, int n,
                                double _Complex* ap, double vl, double vu,
                                int il, int iu, double abstol,
                                int* m, double* w,
                                double _Complex* z, int ldz,
                                double _Complex* work, double* rwork,
                                int* iwork, int* ifail );

int LAPACKE_chpgst_work( int matrix_order, int itype, char uplo,
                                int n, float _Complex* ap,
                                const float _Complex* bp );
int LAPACKE_zhpgst_work( int matrix_order, int itype, char uplo,
                                int n, double _Complex* ap,
                                const double _Complex* bp );

int LAPACKE_chpgv_work( int matrix_order, int itype, char jobz,
                               char uplo, int n,
                               float _Complex* ap,
                               float _Complex* bp, float* w,
                               float _Complex* z, int ldz,
                               float _Complex* work, float* rwork );
int LAPACKE_zhpgv_work( int matrix_order, int itype, char jobz,
                               char uplo, int n,
                               double _Complex* ap,
                               double _Complex* bp, double* w,
                               double _Complex* z, int ldz,
                               double _Complex* work, double* rwork );

int LAPACKE_chpgvd_work( int matrix_order, int itype, char jobz,
                                char uplo, int n,
                                float _Complex* ap,
                                float _Complex* bp, float* w,
                                float _Complex* z, int ldz,
                                float _Complex* work, int lwork,
                                float* rwork, int lrwork,
                                int* iwork, int liwork );
int LAPACKE_zhpgvd_work( int matrix_order, int itype, char jobz,
                                char uplo, int n,
                                double _Complex* ap,
                                double _Complex* bp, double* w,
                                double _Complex* z, int ldz,
                                double _Complex* work, int lwork,
                                double* rwork, int lrwork,
                                int* iwork, int liwork );

int LAPACKE_chpgvx_work( int matrix_order, int itype, char jobz,
                                char range, char uplo, int n,
                                float _Complex* ap,
                                float _Complex* bp, float vl, float vu,
                                int il, int iu, float abstol,
                                int* m, float* w,
                                float _Complex* z, int ldz,
                                float _Complex* work, float* rwork,
                                int* iwork, int* ifail );
int LAPACKE_zhpgvx_work( int matrix_order, int itype, char jobz,
                                char range, char uplo, int n,
                                double _Complex* ap,
                                double _Complex* bp, double vl, double vu,
                                int il, int iu, double abstol,
                                int* m, double* w,
                                double _Complex* z, int ldz,
                                double _Complex* work, double* rwork,
                                int* iwork, int* ifail );

int LAPACKE_chprfs_work( int matrix_order, char uplo, int n,
                                int nrhs, const float _Complex* ap,
                                const float _Complex* afp,
                                const int* ipiv,
                                const float _Complex* b, int ldb,
                                float _Complex* x, int ldx,
                                float* ferr, float* berr,
                                float _Complex* work, float* rwork );
int LAPACKE_zhprfs_work( int matrix_order, char uplo, int n,
                                int nrhs,
                                const double _Complex* ap,
                                const double _Complex* afp,
                                const int* ipiv,
                                const double _Complex* b, int ldb,
                                double _Complex* x, int ldx,
                                double* ferr, double* berr,
                                double _Complex* work, double* rwork );

int LAPACKE_chpsv_work( int matrix_order, char uplo, int n,
                               int nrhs, float _Complex* ap,
                               int* ipiv, float _Complex* b,
                               int ldb );
int LAPACKE_zhpsv_work( int matrix_order, char uplo, int n,
                               int nrhs, double _Complex* ap,
                               int* ipiv, double _Complex* b,
                               int ldb );

int LAPACKE_chpsvx_work( int matrix_order, char fact, char uplo,
                                int n, int nrhs,
                                const float _Complex* ap,
                                float _Complex* afp, int* ipiv,
                                const float _Complex* b, int ldb,
                                float _Complex* x, int ldx,
                                float* rcond, float* ferr, float* berr,
                                float _Complex* work, float* rwork );
int LAPACKE_zhpsvx_work( int matrix_order, char fact, char uplo,
                                int n, int nrhs,
                                const double _Complex* ap,
                                double _Complex* afp, int* ipiv,
                                const double _Complex* b, int ldb,
                                double _Complex* x, int ldx,
                                double* rcond, double* ferr, double* berr,
                                double _Complex* work, double* rwork );

int LAPACKE_chptrd_work( int matrix_order, char uplo, int n,
                                float _Complex* ap, float* d, float* e,
                                float _Complex* tau );
int LAPACKE_zhptrd_work( int matrix_order, char uplo, int n,
                                double _Complex* ap, double* d, double* e,
                                double _Complex* tau );

int LAPACKE_chptrf_work( int matrix_order, char uplo, int n,
                                float _Complex* ap, int* ipiv );
int LAPACKE_zhptrf_work( int matrix_order, char uplo, int n,
                                double _Complex* ap, int* ipiv );

int LAPACKE_chptri_work( int matrix_order, char uplo, int n,
                                float _Complex* ap,
                                const int* ipiv,
                                float _Complex* work );
int LAPACKE_zhptri_work( int matrix_order, char uplo, int n,
                                double _Complex* ap,
                                const int* ipiv,
                                double _Complex* work );

int LAPACKE_chptrs_work( int matrix_order, char uplo, int n,
                                int nrhs, const float _Complex* ap,
                                const int* ipiv, float _Complex* b,
                                int ldb );
int LAPACKE_zhptrs_work( int matrix_order, char uplo, int n,
                                int nrhs,
                                const double _Complex* ap,
                                const int* ipiv,
                                double _Complex* b, int ldb );

int LAPACKE_shsein_work( int matrix_order, char job, char eigsrc,
                                char initv, int* select,
                                int n, const float* h, int ldh,
                                float* wr, const float* wi, float* vl,
                                int ldvl, float* vr, int ldvr,
                                int mm, int* m, float* work,
                                int* ifaill, int* ifailr );
int LAPACKE_dhsein_work( int matrix_order, char job, char eigsrc,
                                char initv, int* select,
                                int n, const double* h, int ldh,
                                double* wr, const double* wi, double* vl,
                                int ldvl, double* vr, int ldvr,
                                int mm, int* m, double* work,
                                int* ifaill, int* ifailr );
int LAPACKE_chsein_work( int matrix_order, char job, char eigsrc,
                                char initv, const int* select,
                                int n, const float _Complex* h,
                                int ldh, float _Complex* w,
                                float _Complex* vl, int ldvl,
                                float _Complex* vr, int ldvr,
                                int mm, int* m,
                                float _Complex* work, float* rwork,
                                int* ifaill, int* ifailr );
int LAPACKE_zhsein_work( int matrix_order, char job, char eigsrc,
                                char initv, const int* select,
                                int n, const double _Complex* h,
                                int ldh, double _Complex* w,
                                double _Complex* vl, int ldvl,
                                double _Complex* vr, int ldvr,
                                int mm, int* m,
                                double _Complex* work, double* rwork,
                                int* ifaill, int* ifailr );

int LAPACKE_shseqr_work( int matrix_order, char job, char compz,
                                int n, int ilo, int ihi,
                                float* h, int ldh, float* wr, float* wi,
                                float* z, int ldz, float* work,
                                int lwork );
int LAPACKE_dhseqr_work( int matrix_order, char job, char compz,
                                int n, int ilo, int ihi,
                                double* h, int ldh, double* wr,
                                double* wi, double* z, int ldz,
                                double* work, int lwork );
int LAPACKE_chseqr_work( int matrix_order, char job, char compz,
                                int n, int ilo, int ihi,
                                float _Complex* h, int ldh,
                                float _Complex* w,
                                float _Complex* z, int ldz,
                                float _Complex* work, int lwork );
int LAPACKE_zhseqr_work( int matrix_order, char job, char compz,
                                int n, int ilo, int ihi,
                                double _Complex* h, int ldh,
                                double _Complex* w,
                                double _Complex* z, int ldz,
                                double _Complex* work, int lwork );

int LAPACKE_clacgv_work( int n, float _Complex* x,
                                int incx );
int LAPACKE_zlacgv_work( int n, double _Complex* x,
                                int incx );

int LAPACKE_slacn2_work( int n, float* v, float* x,
                                int* isgn, float* est, int* kase,
                                int* isave );
int LAPACKE_dlacn2_work( int n, double* v, double* x,
                                int* isgn, double* est, int* kase,
                                int* isave );
int LAPACKE_clacn2_work( int n, float _Complex* v,
                                float _Complex* x,
                                float* est, int* kase,
                                int* isave );
int LAPACKE_zlacn2_work( int n, double _Complex* v,
                                double _Complex* x,
                                double* est, int* kase,
                                int* isave );

int LAPACKE_slacpy_work( int matrix_order, char uplo, int m,
                                int n, const float* a, int lda,
                                float* b, int ldb );
int LAPACKE_dlacpy_work( int matrix_order, char uplo, int m,
                                int n, const double* a, int lda,
                                double* b, int ldb );
int LAPACKE_clacpy_work( int matrix_order, char uplo, int m,
                                int n, const float _Complex* a,
                                int lda, float _Complex* b,
                                int ldb );
int LAPACKE_zlacpy_work( int matrix_order, char uplo, int m,
                                int n, const double _Complex* a,
                                int lda, double _Complex* b,
                                int ldb );

int LAPACKE_clacp2_work( int matrix_order, char uplo, int m,
                                int n, const float* a, int lda,
                                float _Complex* b, int ldb );
int LAPACKE_zlacp2_work( int matrix_order, char uplo, int m,
                                int n, const double* a, int lda,
                                double _Complex* b, int ldb );

int LAPACKE_zlag2c_work( int matrix_order, int m, int n,
                                const double _Complex* a, int lda,
                                float _Complex* sa, int ldsa );

int LAPACKE_slag2d_work( int matrix_order, int m, int n,
                                const float* sa, int ldsa, double* a,
                                int lda );

int LAPACKE_dlag2s_work( int matrix_order, int m, int n,
                                const double* a, int lda, float* sa,
                                int ldsa );

int LAPACKE_clag2z_work( int matrix_order, int m, int n,
                                const float _Complex* sa, int ldsa,
                                double _Complex* a, int lda );

int LAPACKE_slagge_work( int matrix_order, int m, int n,
                                int kl, int ku, const float* d,
                                float* a, int lda, int* iseed,
                                float* work );
int LAPACKE_dlagge_work( int matrix_order, int m, int n,
                                int kl, int ku, const double* d,
                                double* a, int lda, int* iseed,
                                double* work );
int LAPACKE_clagge_work( int matrix_order, int m, int n,
                                int kl, int ku, const float* d,
                                float _Complex* a, int lda,
                                int* iseed, float _Complex* work );
int LAPACKE_zlagge_work( int matrix_order, int m, int n,
                                int kl, int ku, const double* d,
                                double _Complex* a, int lda,
                                int* iseed,
                                double _Complex* work );

int LAPACKE_claghe_work( int matrix_order, int n, int k,
                                const float* d, float _Complex* a,
                                int lda, int* iseed,
                                float _Complex* work );
int LAPACKE_zlaghe_work( int matrix_order, int n, int k,
                                const double* d, double _Complex* a,
                                int lda, int* iseed,
                                double _Complex* work );

int LAPACKE_slagsy_work( int matrix_order, int n, int k,
                                const float* d, float* a, int lda,
                                int* iseed, float* work );
int LAPACKE_dlagsy_work( int matrix_order, int n, int k,
                                const double* d, double* a, int lda,
                                int* iseed, double* work );
int LAPACKE_clagsy_work( int matrix_order, int n, int k,
                                const float* d, float _Complex* a,
                                int lda, int* iseed,
                                float _Complex* work );
int LAPACKE_zlagsy_work( int matrix_order, int n, int k,
                                const double* d, double _Complex* a,
                                int lda, int* iseed,
                                double _Complex* work );

int LAPACKE_slapmr_work( int matrix_order, int forwrd,
                                int m, int n, float* x,
                                int ldx, int* k );
int LAPACKE_dlapmr_work( int matrix_order, int forwrd,
                                int m, int n, double* x,
                                int ldx, int* k );
int LAPACKE_clapmr_work( int matrix_order, int forwrd,
                                int m, int n,
                                float _Complex* x, int ldx,
                                int* k );
int LAPACKE_zlapmr_work( int matrix_order, int forwrd,
                                int m, int n,
                                double _Complex* x, int ldx,
                                int* k );

int LAPACKE_slartgp_work( float f, float g, float* cs, float* sn,
                                 float* r );
int LAPACKE_dlartgp_work( double f, double g, double* cs, double* sn,
                                 double* r );

int LAPACKE_slartgs_work( float x, float y, float sigma, float* cs,
                                 float* sn );
int LAPACKE_dlartgs_work( double x, double y, double sigma, double* cs,
                                 double* sn );

float LAPACKE_slapy2_work( float x, float y );
double LAPACKE_dlapy2_work( double x, double y );

float LAPACKE_slapy3_work( float x, float y, float z );
double LAPACKE_dlapy3_work( double x, double y, double z );

float LAPACKE_slamch_work( char cmach );
double LAPACKE_dlamch_work( char cmach );

float LAPACKE_slange_work( int matrix_order, char norm, int m,
                                int n, const float* a, int lda,
                                float* work );
double LAPACKE_dlange_work( int matrix_order, char norm, int m,
                                int n, const double* a, int lda,
                                double* work );
float LAPACKE_clange_work( int matrix_order, char norm, int m,
                                int n, const float _Complex* a,
                                int lda, float* work );
double LAPACKE_zlange_work( int matrix_order, char norm, int m,
                                int n, const double _Complex* a,
                                int lda, double* work );

float LAPACKE_clanhe_work( int matrix_order, char norm, char uplo,
                                int n, const float _Complex* a,
                                int lda, float* work );
double LAPACKE_zlanhe_work( int matrix_order, char norm, char uplo,
                                int n, const double _Complex* a,
                                int lda, double* work );

float LAPACKE_slansy_work( int matrix_order, char norm, char uplo,
                                int n, const float* a, int lda,
                                float* work );
double LAPACKE_dlansy_work( int matrix_order, char norm, char uplo,
                                int n, const double* a, int lda,
                                double* work );
float LAPACKE_clansy_work( int matrix_order, char norm, char uplo,
                                int n, const float _Complex* a,
                                int lda, float* work );
double LAPACKE_zlansy_work( int matrix_order, char norm, char uplo,
                                int n, const double _Complex* a,
                                int lda, double* work );

float LAPACKE_slantr_work( int matrix_order, char norm, char uplo,
                                char diag, int m, int n, const float* a,
                                int lda, float* work );
double LAPACKE_dlantr_work( int matrix_order, char norm, char uplo,
                                char diag, int m, int n,
                                const double* a, int lda, double* work );
float LAPACKE_clantr_work( int matrix_order, char norm, char uplo,
                                char diag, int m, int n,
                                const float _Complex* a, int lda,
                                float* work );
double LAPACKE_zlantr_work( int matrix_order, char norm, char uplo,
                                char diag, int m, int n,
                                const double _Complex* a, int lda,
                                double* work );

int LAPACKE_slarfb_work( int matrix_order, char side, char trans,
                                char direct, char storev, int m,
                                int n, int k, const float* v,
                                int ldv, const float* t, int ldt,
                                float* c, int ldc, float* work,
                                int ldwork );
int LAPACKE_dlarfb_work( int matrix_order, char side, char trans,
                                char direct, char storev, int m,
                                int n, int k, const double* v,
                                int ldv, const double* t, int ldt,
                                double* c, int ldc, double* work,
                                int ldwork );
int LAPACKE_clarfb_work( int matrix_order, char side, char trans,
                                char direct, char storev, int m,
                                int n, int k,
                                const float _Complex* v, int ldv,
                                const float _Complex* t, int ldt,
                                float _Complex* c, int ldc,
                                float _Complex* work, int ldwork );
int LAPACKE_zlarfb_work( int matrix_order, char side, char trans,
                                char direct, char storev, int m,
                                int n, int k,
                                const double _Complex* v, int ldv,
                                const double _Complex* t, int ldt,
                                double _Complex* c, int ldc,
                                double _Complex* work,
                                int ldwork );

int LAPACKE_slarfg_work( int n, float* alpha, float* x,
                                int incx, float* tau );
int LAPACKE_dlarfg_work( int n, double* alpha, double* x,
                                int incx, double* tau );
int LAPACKE_clarfg_work( int n, float _Complex* alpha,
                                float _Complex* x, int incx,
                                float _Complex* tau );
int LAPACKE_zlarfg_work( int n, double _Complex* alpha,
                                double _Complex* x, int incx,
                                double _Complex* tau );

int LAPACKE_slarft_work( int matrix_order, char direct, char storev,
                                int n, int k, const float* v,
                                int ldv, const float* tau, float* t,
                                int ldt );
int LAPACKE_dlarft_work( int matrix_order, char direct, char storev,
                                int n, int k, const double* v,
                                int ldv, const double* tau, double* t,
                                int ldt );
int LAPACKE_clarft_work( int matrix_order, char direct, char storev,
                                int n, int k,
                                const float _Complex* v, int ldv,
                                const float _Complex* tau,
                                float _Complex* t, int ldt );
int LAPACKE_zlarft_work( int matrix_order, char direct, char storev,
                                int n, int k,
                                const double _Complex* v, int ldv,
                                const double _Complex* tau,
                                double _Complex* t, int ldt );

int LAPACKE_slarfx_work( int matrix_order, char side, int m,
                                int n, const float* v, float tau,
                                float* c, int ldc, float* work );
int LAPACKE_dlarfx_work( int matrix_order, char side, int m,
                                int n, const double* v, double tau,
                                double* c, int ldc, double* work );
int LAPACKE_clarfx_work( int matrix_order, char side, int m,
                                int n, const float _Complex* v,
                                float _Complex tau,
                                float _Complex* c, int ldc,
                                float _Complex* work );
int LAPACKE_zlarfx_work( int matrix_order, char side, int m,
                                int n, const double _Complex* v,
                                double _Complex tau,
                                double _Complex* c, int ldc,
                                double _Complex* work );

int LAPACKE_slarnv_work( int idist, int* iseed,
                                int n, float* x );
int LAPACKE_dlarnv_work( int idist, int* iseed,
                                int n, double* x );
int LAPACKE_clarnv_work( int idist, int* iseed,
                                int n, float _Complex* x );
int LAPACKE_zlarnv_work( int idist, int* iseed,
                                int n, double _Complex* x );

int LAPACKE_slaset_work( int matrix_order, char uplo, int m,
                                int n, float alpha, float beta, float* a,
                                int lda );
int LAPACKE_dlaset_work( int matrix_order, char uplo, int m,
                                int n, double alpha, double beta,
                                double* a, int lda );
int LAPACKE_claset_work( int matrix_order, char uplo, int m,
                                int n, float _Complex alpha,
                                float _Complex beta,
                                float _Complex* a, int lda );
int LAPACKE_zlaset_work( int matrix_order, char uplo, int m,
                                int n, double _Complex alpha,
                                double _Complex beta,
                                double _Complex* a, int lda );

int LAPACKE_slasrt_work( char id, int n, float* d );
int LAPACKE_dlasrt_work( char id, int n, double* d );

int LAPACKE_slaswp_work( int matrix_order, int n, float* a,
                                int lda, int k1, int k2,
                                const int* ipiv, int incx );
int LAPACKE_dlaswp_work( int matrix_order, int n, double* a,
                                int lda, int k1, int k2,
                                const int* ipiv, int incx );
int LAPACKE_claswp_work( int matrix_order, int n,
                                float _Complex* a, int lda,
                                int k1, int k2,
                                const int* ipiv, int incx );
int LAPACKE_zlaswp_work( int matrix_order, int n,
                                double _Complex* a, int lda,
                                int k1, int k2,
                                const int* ipiv, int incx );

int LAPACKE_slatms_work( int matrix_order, int m, int n,
                                char dist, int* iseed, char sym,
                                float* d, int mode, float cond,
                                float dmax, int kl, int ku,
                                char pack, float* a, int lda,
                                float* work );
int LAPACKE_dlatms_work( int matrix_order, int m, int n,
                                char dist, int* iseed, char sym,
                                double* d, int mode, double cond,
                                double dmax, int kl, int ku,
                                char pack, double* a, int lda,
                                double* work );
int LAPACKE_clatms_work( int matrix_order, int m, int n,
                                char dist, int* iseed, char sym,
                                float* d, int mode, float cond,
                                float dmax, int kl, int ku,
                                char pack, float _Complex* a,
                                int lda, float _Complex* work );
int LAPACKE_zlatms_work( int matrix_order, int m, int n,
                                char dist, int* iseed, char sym,
                                double* d, int mode, double cond,
                                double dmax, int kl, int ku,
                                char pack, double _Complex* a,
                                int lda, double _Complex* work );

int LAPACKE_slauum_work( int matrix_order, char uplo, int n,
                                float* a, int lda );
int LAPACKE_dlauum_work( int matrix_order, char uplo, int n,
                                double* a, int lda );
int LAPACKE_clauum_work( int matrix_order, char uplo, int n,
                                float _Complex* a, int lda );
int LAPACKE_zlauum_work( int matrix_order, char uplo, int n,
                                double _Complex* a, int lda );

int LAPACKE_sopgtr_work( int matrix_order, char uplo, int n,
                                const float* ap, const float* tau, float* q,
                                int ldq, float* work );
int LAPACKE_dopgtr_work( int matrix_order, char uplo, int n,
                                const double* ap, const double* tau, double* q,
                                int ldq, double* work );

int LAPACKE_sopmtr_work( int matrix_order, char side, char uplo,
                                char trans, int m, int n,
                                const float* ap, const float* tau, float* c,
                                int ldc, float* work );
int LAPACKE_dopmtr_work( int matrix_order, char side, char uplo,
                                char trans, int m, int n,
                                const double* ap, const double* tau, double* c,
                                int ldc, double* work );

int LAPACKE_sorgbr_work( int matrix_order, char vect, int m,
                                int n, int k, float* a,
                                int lda, const float* tau, float* work,
                                int lwork );
int LAPACKE_dorgbr_work( int matrix_order, char vect, int m,
                                int n, int k, double* a,
                                int lda, const double* tau, double* work,
                                int lwork );

int LAPACKE_sorghr_work( int matrix_order, int n, int ilo,
                                int ihi, float* a, int lda,
                                const float* tau, float* work,
                                int lwork );
int LAPACKE_dorghr_work( int matrix_order, int n, int ilo,
                                int ihi, double* a, int lda,
                                const double* tau, double* work,
                                int lwork );

int LAPACKE_sorglq_work( int matrix_order, int m, int n,
                                int k, float* a, int lda,
                                const float* tau, float* work,
                                int lwork );
int LAPACKE_dorglq_work( int matrix_order, int m, int n,
                                int k, double* a, int lda,
                                const double* tau, double* work,
                                int lwork );

int LAPACKE_sorgql_work( int matrix_order, int m, int n,
                                int k, float* a, int lda,
                                const float* tau, float* work,
                                int lwork );
int LAPACKE_dorgql_work( int matrix_order, int m, int n,
                                int k, double* a, int lda,
                                const double* tau, double* work,
                                int lwork );

int LAPACKE_sorgqr_work( int matrix_order, int m, int n,
                                int k, float* a, int lda,
                                const float* tau, float* work,
                                int lwork );
int LAPACKE_dorgqr_work( int matrix_order, int m, int n,
                                int k, double* a, int lda,
                                const double* tau, double* work,
                                int lwork );

int LAPACKE_sorgrq_work( int matrix_order, int m, int n,
                                int k, float* a, int lda,
                                const float* tau, float* work,
                                int lwork );
int LAPACKE_dorgrq_work( int matrix_order, int m, int n,
                                int k, double* a, int lda,
                                const double* tau, double* work,
                                int lwork );

int LAPACKE_sorgtr_work( int matrix_order, char uplo, int n,
                                float* a, int lda, const float* tau,
                                float* work, int lwork );
int LAPACKE_dorgtr_work( int matrix_order, char uplo, int n,
                                double* a, int lda, const double* tau,
                                double* work, int lwork );

int LAPACKE_sormbr_work( int matrix_order, char vect, char side,
                                char trans, int m, int n,
                                int k, const float* a, int lda,
                                const float* tau, float* c, int ldc,
                                float* work, int lwork );
int LAPACKE_dormbr_work( int matrix_order, char vect, char side,
                                char trans, int m, int n,
                                int k, const double* a, int lda,
                                const double* tau, double* c, int ldc,
                                double* work, int lwork );

int LAPACKE_sormhr_work( int matrix_order, char side, char trans,
                                int m, int n, int ilo,
                                int ihi, const float* a, int lda,
                                const float* tau, float* c, int ldc,
                                float* work, int lwork );
int LAPACKE_dormhr_work( int matrix_order, char side, char trans,
                                int m, int n, int ilo,
                                int ihi, const double* a, int lda,
                                const double* tau, double* c, int ldc,
                                double* work, int lwork );

int LAPACKE_sormlq_work( int matrix_order, char side, char trans,
                                int m, int n, int k,
                                const float* a, int lda,
                                const float* tau, float* c, int ldc,
                                float* work, int lwork );
int LAPACKE_dormlq_work( int matrix_order, char side, char trans,
                                int m, int n, int k,
                                const double* a, int lda,
                                const double* tau, double* c, int ldc,
                                double* work, int lwork );

int LAPACKE_sormql_work( int matrix_order, char side, char trans,
                                int m, int n, int k,
                                const float* a, int lda,
                                const float* tau, float* c, int ldc,
                                float* work, int lwork );
int LAPACKE_dormql_work( int matrix_order, char side, char trans,
                                int m, int n, int k,
                                const double* a, int lda,
                                const double* tau, double* c, int ldc,
                                double* work, int lwork );

int LAPACKE_sormqr_work( int matrix_order, char side, char trans,
                                int m, int n, int k,
                                const float* a, int lda,
                                const float* tau, float* c, int ldc,
                                float* work, int lwork );
int LAPACKE_dormqr_work( int matrix_order, char side, char trans,
                                int m, int n, int k,
                                const double* a, int lda,
                                const double* tau, double* c, int ldc,
                                double* work, int lwork );

int LAPACKE_sormrq_work( int matrix_order, char side, char trans,
                                int m, int n, int k,
                                const float* a, int lda,
                                const float* tau, float* c, int ldc,
                                float* work, int lwork );
int LAPACKE_dormrq_work( int matrix_order, char side, char trans,
                                int m, int n, int k,
                                const double* a, int lda,
                                const double* tau, double* c, int ldc,
                                double* work, int lwork );

int LAPACKE_sormrz_work( int matrix_order, char side, char trans,
                                int m, int n, int k,
                                int l, const float* a, int lda,
                                const float* tau, float* c, int ldc,
                                float* work, int lwork );
int LAPACKE_dormrz_work( int matrix_order, char side, char trans,
                                int m, int n, int k,
                                int l, const double* a, int lda,
                                const double* tau, double* c, int ldc,
                                double* work, int lwork );

int LAPACKE_sormtr_work( int matrix_order, char side, char uplo,
                                char trans, int m, int n,
                                const float* a, int lda,
                                const float* tau, float* c, int ldc,
                                float* work, int lwork );
int LAPACKE_dormtr_work( int matrix_order, char side, char uplo,
                                char trans, int m, int n,
                                const double* a, int lda,
                                const double* tau, double* c, int ldc,
                                double* work, int lwork );

int LAPACKE_spbcon_work( int matrix_order, char uplo, int n,
                                int kd, const float* ab, int ldab,
                                float anorm, float* rcond, float* work,
                                int* iwork );
int LAPACKE_dpbcon_work( int matrix_order, char uplo, int n,
                                int kd, const double* ab,
                                int ldab, double anorm, double* rcond,
                                double* work, int* iwork );
int LAPACKE_cpbcon_work( int matrix_order, char uplo, int n,
                                int kd, const float _Complex* ab,
                                int ldab, float anorm, float* rcond,
                                float _Complex* work, float* rwork );
int LAPACKE_zpbcon_work( int matrix_order, char uplo, int n,
                                int kd, const double _Complex* ab,
                                int ldab, double anorm, double* rcond,
                                double _Complex* work, double* rwork );

int LAPACKE_spbequ_work( int matrix_order, char uplo, int n,
                                int kd, const float* ab, int ldab,
                                float* s, float* scond, float* amax );
int LAPACKE_dpbequ_work( int matrix_order, char uplo, int n,
                                int kd, const double* ab,
                                int ldab, double* s, double* scond,
                                double* amax );
int LAPACKE_cpbequ_work( int matrix_order, char uplo, int n,
                                int kd, const float _Complex* ab,
                                int ldab, float* s, float* scond,
                                float* amax );
int LAPACKE_zpbequ_work( int matrix_order, char uplo, int n,
                                int kd, const double _Complex* ab,
                                int ldab, double* s, double* scond,
                                double* amax );

int LAPACKE_spbrfs_work( int matrix_order, char uplo, int n,
                                int kd, int nrhs, const float* ab,
                                int ldab, const float* afb,
                                int ldafb, const float* b,
                                int ldb, float* x, int ldx,
                                float* ferr, float* berr, float* work,
                                int* iwork );
int LAPACKE_dpbrfs_work( int matrix_order, char uplo, int n,
                                int kd, int nrhs,
                                const double* ab, int ldab,
                                const double* afb, int ldafb,
                                const double* b, int ldb, double* x,
                                int ldx, double* ferr, double* berr,
                                double* work, int* iwork );
int LAPACKE_cpbrfs_work( int matrix_order, char uplo, int n,
                                int kd, int nrhs,
                                const float _Complex* ab, int ldab,
                                const float _Complex* afb,
                                int ldafb, const float _Complex* b,
                                int ldb, float _Complex* x,
                                int ldx, float* ferr, float* berr,
                                float _Complex* work, float* rwork );
int LAPACKE_zpbrfs_work( int matrix_order, char uplo, int n,
                                int kd, int nrhs,
                                const double _Complex* ab,
                                int ldab,
                                const double _Complex* afb,
                                int ldafb,
                                const double _Complex* b, int ldb,
                                double _Complex* x, int ldx,
                                double* ferr, double* berr,
                                double _Complex* work, double* rwork );

int LAPACKE_spbstf_work( int matrix_order, char uplo, int n,
                                int kb, float* bb, int ldbb );
int LAPACKE_dpbstf_work( int matrix_order, char uplo, int n,
                                int kb, double* bb, int ldbb );
int LAPACKE_cpbstf_work( int matrix_order, char uplo, int n,
                                int kb, float _Complex* bb,
                                int ldbb );
int LAPACKE_zpbstf_work( int matrix_order, char uplo, int n,
                                int kb, double _Complex* bb,
                                int ldbb );

int LAPACKE_spbsv_work( int matrix_order, char uplo, int n,
                               int kd, int nrhs, float* ab,
                               int ldab, float* b, int ldb );
int LAPACKE_dpbsv_work( int matrix_order, char uplo, int n,
                               int kd, int nrhs, double* ab,
                               int ldab, double* b, int ldb );
int LAPACKE_cpbsv_work( int matrix_order, char uplo, int n,
                               int kd, int nrhs,
                               float _Complex* ab, int ldab,
                               float _Complex* b, int ldb );
int LAPACKE_zpbsv_work( int matrix_order, char uplo, int n,
                               int kd, int nrhs,
                               double _Complex* ab, int ldab,
                               double _Complex* b, int ldb );

int LAPACKE_spbsvx_work( int matrix_order, char fact, char uplo,
                                int n, int kd, int nrhs,
                                float* ab, int ldab, float* afb,
                                int ldafb, char* equed, float* s,
                                float* b, int ldb, float* x,
                                int ldx, float* rcond, float* ferr,
                                float* berr, float* work, int* iwork );
int LAPACKE_dpbsvx_work( int matrix_order, char fact, char uplo,
                                int n, int kd, int nrhs,
                                double* ab, int ldab, double* afb,
                                int ldafb, char* equed, double* s,
                                double* b, int ldb, double* x,
                                int ldx, double* rcond, double* ferr,
                                double* berr, double* work, int* iwork );
int LAPACKE_cpbsvx_work( int matrix_order, char fact, char uplo,
                                int n, int kd, int nrhs,
                                float _Complex* ab, int ldab,
                                float _Complex* afb, int ldafb,
                                char* equed, float* s, float _Complex* b,
                                int ldb, float _Complex* x,
                                int ldx, float* rcond, float* ferr,
                                float* berr, float _Complex* work,
                                float* rwork );
int LAPACKE_zpbsvx_work( int matrix_order, char fact, char uplo,
                                int n, int kd, int nrhs,
                                double _Complex* ab, int ldab,
                                double _Complex* afb, int ldafb,
                                char* equed, double* s,
                                double _Complex* b, int ldb,
                                double _Complex* x, int ldx,
                                double* rcond, double* ferr, double* berr,
                                double _Complex* work, double* rwork );

int LAPACKE_spbtrf_work( int matrix_order, char uplo, int n,
                                int kd, float* ab, int ldab );
int LAPACKE_dpbtrf_work( int matrix_order, char uplo, int n,
                                int kd, double* ab, int ldab );
int LAPACKE_cpbtrf_work( int matrix_order, char uplo, int n,
                                int kd, float _Complex* ab,
                                int ldab );
int LAPACKE_zpbtrf_work( int matrix_order, char uplo, int n,
                                int kd, double _Complex* ab,
                                int ldab );

int LAPACKE_spbtrs_work( int matrix_order, char uplo, int n,
                                int kd, int nrhs, const float* ab,
                                int ldab, float* b, int ldb );
int LAPACKE_dpbtrs_work( int matrix_order, char uplo, int n,
                                int kd, int nrhs,
                                const double* ab, int ldab, double* b,
                                int ldb );
int LAPACKE_cpbtrs_work( int matrix_order, char uplo, int n,
                                int kd, int nrhs,
                                const float _Complex* ab, int ldab,
                                float _Complex* b, int ldb );
int LAPACKE_zpbtrs_work( int matrix_order, char uplo, int n,
                                int kd, int nrhs,
                                const double _Complex* ab,
                                int ldab, double _Complex* b,
                                int ldb );

int LAPACKE_spftrf_work( int matrix_order, char transr, char uplo,
                                int n, float* a );
int LAPACKE_dpftrf_work( int matrix_order, char transr, char uplo,
                                int n, double* a );
int LAPACKE_cpftrf_work( int matrix_order, char transr, char uplo,
                                int n, float _Complex* a );
int LAPACKE_zpftrf_work( int matrix_order, char transr, char uplo,
                                int n, double _Complex* a );

int LAPACKE_spftri_work( int matrix_order, char transr, char uplo,
                                int n, float* a );
int LAPACKE_dpftri_work( int matrix_order, char transr, char uplo,
                                int n, double* a );
int LAPACKE_cpftri_work( int matrix_order, char transr, char uplo,
                                int n, float _Complex* a );
int LAPACKE_zpftri_work( int matrix_order, char transr, char uplo,
                                int n, double _Complex* a );

int LAPACKE_spftrs_work( int matrix_order, char transr, char uplo,
                                int n, int nrhs, const float* a,
                                float* b, int ldb );
int LAPACKE_dpftrs_work( int matrix_order, char transr, char uplo,
                                int n, int nrhs, const double* a,
                                double* b, int ldb );
int LAPACKE_cpftrs_work( int matrix_order, char transr, char uplo,
                                int n, int nrhs,
                                const float _Complex* a,
                                float _Complex* b, int ldb );
int LAPACKE_zpftrs_work( int matrix_order, char transr, char uplo,
                                int n, int nrhs,
                                const double _Complex* a,
                                double _Complex* b, int ldb );

int LAPACKE_spocon_work( int matrix_order, char uplo, int n,
                                const float* a, int lda, float anorm,
                                float* rcond, float* work, int* iwork );
int LAPACKE_dpocon_work( int matrix_order, char uplo, int n,
                                const double* a, int lda, double anorm,
                                double* rcond, double* work,
                                int* iwork );
int LAPACKE_cpocon_work( int matrix_order, char uplo, int n,
                                const float _Complex* a, int lda,
                                float anorm, float* rcond,
                                float _Complex* work, float* rwork );
int LAPACKE_zpocon_work( int matrix_order, char uplo, int n,
                                const double _Complex* a, int lda,
                                double anorm, double* rcond,
                                double _Complex* work, double* rwork );

int LAPACKE_spoequ_work( int matrix_order, int n, const float* a,
                                int lda, float* s, float* scond,
                                float* amax );
int LAPACKE_dpoequ_work( int matrix_order, int n, const double* a,
                                int lda, double* s, double* scond,
                                double* amax );
int LAPACKE_cpoequ_work( int matrix_order, int n,
                                const float _Complex* a, int lda,
                                float* s, float* scond, float* amax );
int LAPACKE_zpoequ_work( int matrix_order, int n,
                                const double _Complex* a, int lda,
                                double* s, double* scond, double* amax );

int LAPACKE_spoequb_work( int matrix_order, int n, const float* a,
                                 int lda, float* s, float* scond,
                                 float* amax );
int LAPACKE_dpoequb_work( int matrix_order, int n,
                                 const double* a, int lda, double* s,
                                 double* scond, double* amax );
int LAPACKE_cpoequb_work( int matrix_order, int n,
                                 const float _Complex* a, int lda,
                                 float* s, float* scond, float* amax );
int LAPACKE_zpoequb_work( int matrix_order, int n,
                                 const double _Complex* a, int lda,
                                 double* s, double* scond, double* amax );

int LAPACKE_sporfs_work( int matrix_order, char uplo, int n,
                                int nrhs, const float* a, int lda,
                                const float* af, int ldaf,
                                const float* b, int ldb, float* x,
                                int ldx, float* ferr, float* berr,
                                float* work, int* iwork );
int LAPACKE_dporfs_work( int matrix_order, char uplo, int n,
                                int nrhs, const double* a,
                                int lda, const double* af,
                                int ldaf, const double* b,
                                int ldb, double* x, int ldx,
                                double* ferr, double* berr, double* work,
                                int* iwork );
int LAPACKE_cporfs_work( int matrix_order, char uplo, int n,
                                int nrhs, const float _Complex* a,
                                int lda, const float _Complex* af,
                                int ldaf, const float _Complex* b,
                                int ldb, float _Complex* x,
                                int ldx, float* ferr, float* berr,
                                float _Complex* work, float* rwork );
int LAPACKE_zporfs_work( int matrix_order, char uplo, int n,
                                int nrhs, const double _Complex* a,
                                int lda, const double _Complex* af,
                                int ldaf, const double _Complex* b,
                                int ldb, double _Complex* x,
                                int ldx, double* ferr, double* berr,
                                double _Complex* work, double* rwork );

int LAPACKE_sporfsx_work( int matrix_order, char uplo, char equed,
                                 int n, int nrhs, const float* a,
                                 int lda, const float* af,
                                 int ldaf, const float* s,
                                 const float* b, int ldb, float* x,
                                 int ldx, float* rcond, float* berr,
                                 int n_err_bnds, float* err_bnds_norm,
                                 float* err_bnds_comp, int nparams,
                                 float* params, float* work,
                                 int* iwork );
int LAPACKE_dporfsx_work( int matrix_order, char uplo, char equed,
                                 int n, int nrhs, const double* a,
                                 int lda, const double* af,
                                 int ldaf, const double* s,
                                 const double* b, int ldb, double* x,
                                 int ldx, double* rcond, double* berr,
                                 int n_err_bnds, double* err_bnds_norm,
                                 double* err_bnds_comp, int nparams,
                                 double* params, double* work,
                                 int* iwork );
int LAPACKE_cporfsx_work( int matrix_order, char uplo, char equed,
                                 int n, int nrhs,
                                 const float _Complex* a, int lda,
                                 const float _Complex* af,
                                 int ldaf, const float* s,
                                 const float _Complex* b, int ldb,
                                 float _Complex* x, int ldx,
                                 float* rcond, float* berr,
                                 int n_err_bnds, float* err_bnds_norm,
                                 float* err_bnds_comp, int nparams,
                                 float* params, float _Complex* work,
                                 float* rwork );
int LAPACKE_zporfsx_work( int matrix_order, char uplo, char equed,
                                 int n, int nrhs,
                                 const double _Complex* a, int lda,
                                 const double _Complex* af,
                                 int ldaf, const double* s,
                                 const double _Complex* b, int ldb,
                                 double _Complex* x, int ldx,
                                 double* rcond, double* berr,
                                 int n_err_bnds, double* err_bnds_norm,
                                 double* err_bnds_comp, int nparams,
                                 double* params, double _Complex* work,
                                 double* rwork );

int LAPACKE_sposv_work( int matrix_order, char uplo, int n,
                               int nrhs, float* a, int lda,
                               float* b, int ldb );
int LAPACKE_dposv_work( int matrix_order, char uplo, int n,
                               int nrhs, double* a, int lda,
                               double* b, int ldb );
int LAPACKE_cposv_work( int matrix_order, char uplo, int n,
                               int nrhs, float _Complex* a,
                               int lda, float _Complex* b,
                               int ldb );
int LAPACKE_zposv_work( int matrix_order, char uplo, int n,
                               int nrhs, double _Complex* a,
                               int lda, double _Complex* b,
                               int ldb );
int LAPACKE_dsposv_work( int matrix_order, char uplo, int n,
                                int nrhs, double* a, int lda,
                                double* b, int ldb, double* x,
                                int ldx, double* work, float* swork,
                                int* iter );
int LAPACKE_zcposv_work( int matrix_order, char uplo, int n,
                                int nrhs, double _Complex* a,
                                int lda, double _Complex* b,
                                int ldb, double _Complex* x,
                                int ldx, double _Complex* work,
                                float _Complex* swork, double* rwork,
                                int* iter );

int LAPACKE_sposvx_work( int matrix_order, char fact, char uplo,
                                int n, int nrhs, float* a,
                                int lda, float* af, int ldaf,
                                char* equed, float* s, float* b, int ldb,
                                float* x, int ldx, float* rcond,
                                float* ferr, float* berr, float* work,
                                int* iwork );
int LAPACKE_dposvx_work( int matrix_order, char fact, char uplo,
                                int n, int nrhs, double* a,
                                int lda, double* af, int ldaf,
                                char* equed, double* s, double* b,
                                int ldb, double* x, int ldx,
                                double* rcond, double* ferr, double* berr,
                                double* work, int* iwork );
int LAPACKE_cposvx_work( int matrix_order, char fact, char uplo,
                                int n, int nrhs,
                                float _Complex* a, int lda,
                                float _Complex* af, int ldaf,
                                char* equed, float* s, float _Complex* b,
                                int ldb, float _Complex* x,
                                int ldx, float* rcond, float* ferr,
                                float* berr, float _Complex* work,
                                float* rwork );
int LAPACKE_zposvx_work( int matrix_order, char fact, char uplo,
                                int n, int nrhs,
                                double _Complex* a, int lda,
                                double _Complex* af, int ldaf,
                                char* equed, double* s,
                                double _Complex* b, int ldb,
                                double _Complex* x, int ldx,
                                double* rcond, double* ferr, double* berr,
                                double _Complex* work, double* rwork );

int LAPACKE_sposvxx_work( int matrix_order, char fact, char uplo,
                                 int n, int nrhs, float* a,
                                 int lda, float* af, int ldaf,
                                 char* equed, float* s, float* b,
                                 int ldb, float* x, int ldx,
                                 float* rcond, float* rpvgrw, float* berr,
                                 int n_err_bnds, float* err_bnds_norm,
                                 float* err_bnds_comp, int nparams,
                                 float* params, float* work,
                                 int* iwork );
int LAPACKE_dposvxx_work( int matrix_order, char fact, char uplo,
                                 int n, int nrhs, double* a,
                                 int lda, double* af, int ldaf,
                                 char* equed, double* s, double* b,
                                 int ldb, double* x, int ldx,
                                 double* rcond, double* rpvgrw, double* berr,
                                 int n_err_bnds, double* err_bnds_norm,
                                 double* err_bnds_comp, int nparams,
                                 double* params, double* work,
                                 int* iwork );
int LAPACKE_cposvxx_work( int matrix_order, char fact, char uplo,
                                 int n, int nrhs,
                                 float _Complex* a, int lda,
                                 float _Complex* af, int ldaf,
                                 char* equed, float* s, float _Complex* b,
                                 int ldb, float _Complex* x,
                                 int ldx, float* rcond, float* rpvgrw,
                                 float* berr, int n_err_bnds,
                                 float* err_bnds_norm, float* err_bnds_comp,
                                 int nparams, float* params,
                                 float _Complex* work, float* rwork );
int LAPACKE_zposvxx_work( int matrix_order, char fact, char uplo,
                                 int n, int nrhs,
                                 double _Complex* a, int lda,
                                 double _Complex* af, int ldaf,
                                 char* equed, double* s,
                                 double _Complex* b, int ldb,
                                 double _Complex* x, int ldx,
                                 double* rcond, double* rpvgrw, double* berr,
                                 int n_err_bnds, double* err_bnds_norm,
                                 double* err_bnds_comp, int nparams,
                                 double* params, double _Complex* work,
                                 double* rwork );

int LAPACKE_spotrf_work( int matrix_order, char uplo, int n,
                                float* a, int lda );
int LAPACKE_dpotrf_work( int matrix_order, char uplo, int n,
                                double* a, int lda );
int LAPACKE_cpotrf_work( int matrix_order, char uplo, int n,
                                float _Complex* a, int lda );
int LAPACKE_zpotrf_work( int matrix_order, char uplo, int n,
                                double _Complex* a, int lda );

int LAPACKE_spotri_work( int matrix_order, char uplo, int n,
                                float* a, int lda );
int LAPACKE_dpotri_work( int matrix_order, char uplo, int n,
                                double* a, int lda );
int LAPACKE_cpotri_work( int matrix_order, char uplo, int n,
                                float _Complex* a, int lda );
int LAPACKE_zpotri_work( int matrix_order, char uplo, int n,
                                double _Complex* a, int lda );

int LAPACKE_spotrs_work( int matrix_order, char uplo, int n,
                                int nrhs, const float* a, int lda,
                                float* b, int ldb );
int LAPACKE_dpotrs_work( int matrix_order, char uplo, int n,
                                int nrhs, const double* a,
                                int lda, double* b, int ldb );
int LAPACKE_cpotrs_work( int matrix_order, char uplo, int n,
                                int nrhs, const float _Complex* a,
                                int lda, float _Complex* b,
                                int ldb );
int LAPACKE_zpotrs_work( int matrix_order, char uplo, int n,
                                int nrhs, const double _Complex* a,
                                int lda, double _Complex* b,
                                int ldb );

int LAPACKE_sppcon_work( int matrix_order, char uplo, int n,
                                const float* ap, float anorm, float* rcond,
                                float* work, int* iwork );
int LAPACKE_dppcon_work( int matrix_order, char uplo, int n,
                                const double* ap, double anorm, double* rcond,
                                double* work, int* iwork );
int LAPACKE_cppcon_work( int matrix_order, char uplo, int n,
                                const float _Complex* ap, float anorm,
                                float* rcond, float _Complex* work,
                                float* rwork );
int LAPACKE_zppcon_work( int matrix_order, char uplo, int n,
                                const double _Complex* ap, double anorm,
                                double* rcond, double _Complex* work,
                                double* rwork );

int LAPACKE_sppequ_work( int matrix_order, char uplo, int n,
                                const float* ap, float* s, float* scond,
                                float* amax );
int LAPACKE_dppequ_work( int matrix_order, char uplo, int n,
                                const double* ap, double* s, double* scond,
                                double* amax );
int LAPACKE_cppequ_work( int matrix_order, char uplo, int n,
                                const float _Complex* ap, float* s,
                                float* scond, float* amax );
int LAPACKE_zppequ_work( int matrix_order, char uplo, int n,
                                const double _Complex* ap, double* s,
                                double* scond, double* amax );

int LAPACKE_spprfs_work( int matrix_order, char uplo, int n,
                                int nrhs, const float* ap,
                                const float* afp, const float* b,
                                int ldb, float* x, int ldx,
                                float* ferr, float* berr, float* work,
                                int* iwork );
int LAPACKE_dpprfs_work( int matrix_order, char uplo, int n,
                                int nrhs, const double* ap,
                                const double* afp, const double* b,
                                int ldb, double* x, int ldx,
                                double* ferr, double* berr, double* work,
                                int* iwork );
int LAPACKE_cpprfs_work( int matrix_order, char uplo, int n,
                                int nrhs, const float _Complex* ap,
                                const float _Complex* afp,
                                const float _Complex* b, int ldb,
                                float _Complex* x, int ldx,
                                float* ferr, float* berr,
                                float _Complex* work, float* rwork );
int LAPACKE_zpprfs_work( int matrix_order, char uplo, int n,
                                int nrhs,
                                const double _Complex* ap,
                                const double _Complex* afp,
                                const double _Complex* b, int ldb,
                                double _Complex* x, int ldx,
                                double* ferr, double* berr,
                                double _Complex* work, double* rwork );

int LAPACKE_sppsv_work( int matrix_order, char uplo, int n,
                               int nrhs, float* ap, float* b,
                               int ldb );
int LAPACKE_dppsv_work( int matrix_order, char uplo, int n,
                               int nrhs, double* ap, double* b,
                               int ldb );
int LAPACKE_cppsv_work( int matrix_order, char uplo, int n,
                               int nrhs, float _Complex* ap,
                               float _Complex* b, int ldb );
int LAPACKE_zppsv_work( int matrix_order, char uplo, int n,
                               int nrhs, double _Complex* ap,
                               double _Complex* b, int ldb );

int LAPACKE_sppsvx_work( int matrix_order, char fact, char uplo,
                                int n, int nrhs, float* ap,
                                float* afp, char* equed, float* s, float* b,
                                int ldb, float* x, int ldx,
                                float* rcond, float* ferr, float* berr,
                                float* work, int* iwork );
int LAPACKE_dppsvx_work( int matrix_order, char fact, char uplo,
                                int n, int nrhs, double* ap,
                                double* afp, char* equed, double* s, double* b,
                                int ldb, double* x, int ldx,
                                double* rcond, double* ferr, double* berr,
                                double* work, int* iwork );
int LAPACKE_cppsvx_work( int matrix_order, char fact, char uplo,
                                int n, int nrhs,
                                float _Complex* ap,
                                float _Complex* afp, char* equed,
                                float* s, float _Complex* b,
                                int ldb, float _Complex* x,
                                int ldx, float* rcond, float* ferr,
                                float* berr, float _Complex* work,
                                float* rwork );
int LAPACKE_zppsvx_work( int matrix_order, char fact, char uplo,
                                int n, int nrhs,
                                double _Complex* ap,
                                double _Complex* afp, char* equed,
                                double* s, double _Complex* b,
                                int ldb, double _Complex* x,
                                int ldx, double* rcond, double* ferr,
                                double* berr, double _Complex* work,
                                double* rwork );

int LAPACKE_spptrf_work( int matrix_order, char uplo, int n,
                                float* ap );
int LAPACKE_dpptrf_work( int matrix_order, char uplo, int n,
                                double* ap );
int LAPACKE_cpptrf_work( int matrix_order, char uplo, int n,
                                float _Complex* ap );
int LAPACKE_zpptrf_work( int matrix_order, char uplo, int n,
                                double _Complex* ap );

int LAPACKE_spptri_work( int matrix_order, char uplo, int n,
                                float* ap );
int LAPACKE_dpptri_work( int matrix_order, char uplo, int n,
                                double* ap );
int LAPACKE_cpptri_work( int matrix_order, char uplo, int n,
                                float _Complex* ap );
int LAPACKE_zpptri_work( int matrix_order, char uplo, int n,
                                double _Complex* ap );

int LAPACKE_spptrs_work( int matrix_order, char uplo, int n,
                                int nrhs, const float* ap, float* b,
                                int ldb );
int LAPACKE_dpptrs_work( int matrix_order, char uplo, int n,
                                int nrhs, const double* ap, double* b,
                                int ldb );
int LAPACKE_cpptrs_work( int matrix_order, char uplo, int n,
                                int nrhs, const float _Complex* ap,
                                float _Complex* b, int ldb );
int LAPACKE_zpptrs_work( int matrix_order, char uplo, int n,
                                int nrhs,
                                const double _Complex* ap,
                                double _Complex* b, int ldb );

int LAPACKE_spstrf_work( int matrix_order, char uplo, int n,
                                float* a, int lda, int* piv,
                                int* rank, float tol, float* work );
int LAPACKE_dpstrf_work( int matrix_order, char uplo, int n,
                                double* a, int lda, int* piv,
                                int* rank, double tol, double* work );
int LAPACKE_cpstrf_work( int matrix_order, char uplo, int n,
                                float _Complex* a, int lda,
                                int* piv, int* rank, float tol,
                                float* work );
int LAPACKE_zpstrf_work( int matrix_order, char uplo, int n,
                                double _Complex* a, int lda,
                                int* piv, int* rank, double tol,
                                double* work );

int LAPACKE_sptcon_work( int n, const float* d, const float* e,
                                float anorm, float* rcond, float* work );
int LAPACKE_dptcon_work( int n, const double* d, const double* e,
                                double anorm, double* rcond, double* work );
int LAPACKE_cptcon_work( int n, const float* d,
                                const float _Complex* e, float anorm,
                                float* rcond, float* work );
int LAPACKE_zptcon_work( int n, const double* d,
                                const double _Complex* e, double anorm,
                                double* rcond, double* work );

int LAPACKE_spteqr_work( int matrix_order, char compz, int n,
                                float* d, float* e, float* z, int ldz,
                                float* work );
int LAPACKE_dpteqr_work( int matrix_order, char compz, int n,
                                double* d, double* e, double* z, int ldz,
                                double* work );
int LAPACKE_cpteqr_work( int matrix_order, char compz, int n,
                                float* d, float* e, float _Complex* z,
                                int ldz, float* work );
int LAPACKE_zpteqr_work( int matrix_order, char compz, int n,
                                double* d, double* e, double _Complex* z,
                                int ldz, double* work );

int LAPACKE_sptrfs_work( int matrix_order, int n, int nrhs,
                                const float* d, const float* e, const float* df,
                                const float* ef, const float* b, int ldb,
                                float* x, int ldx, float* ferr,
                                float* berr, float* work );
int LAPACKE_dptrfs_work( int matrix_order, int n, int nrhs,
                                const double* d, const double* e,
                                const double* df, const double* ef,
                                const double* b, int ldb, double* x,
                                int ldx, double* ferr, double* berr,
                                double* work );
int LAPACKE_cptrfs_work( int matrix_order, char uplo, int n,
                                int nrhs, const float* d,
                                const float _Complex* e, const float* df,
                                const float _Complex* ef,
                                const float _Complex* b, int ldb,
                                float _Complex* x, int ldx,
                                float* ferr, float* berr,
                                float _Complex* work, float* rwork );
int LAPACKE_zptrfs_work( int matrix_order, char uplo, int n,
                                int nrhs, const double* d,
                                const double _Complex* e,
                                const double* df,
                                const double _Complex* ef,
                                const double _Complex* b, int ldb,
                                double _Complex* x, int ldx,
                                double* ferr, double* berr,
                                double _Complex* work, double* rwork );

int LAPACKE_sptsv_work( int matrix_order, int n, int nrhs,
                               float* d, float* e, float* b, int ldb );
int LAPACKE_dptsv_work( int matrix_order, int n, int nrhs,
                               double* d, double* e, double* b,
                               int ldb );
int LAPACKE_cptsv_work( int matrix_order, int n, int nrhs,
                               float* d, float _Complex* e,
                               float _Complex* b, int ldb );
int LAPACKE_zptsv_work( int matrix_order, int n, int nrhs,
                               double* d, double _Complex* e,
                               double _Complex* b, int ldb );

int LAPACKE_sptsvx_work( int matrix_order, char fact, int n,
                                int nrhs, const float* d, const float* e,
                                float* df, float* ef, const float* b,
                                int ldb, float* x, int ldx,
                                float* rcond, float* ferr, float* berr,
                                float* work );
int LAPACKE_dptsvx_work( int matrix_order, char fact, int n,
                                int nrhs, const double* d,
                                const double* e, double* df, double* ef,
                                const double* b, int ldb, double* x,
                                int ldx, double* rcond, double* ferr,
                                double* berr, double* work );
int LAPACKE_cptsvx_work( int matrix_order, char fact, int n,
                                int nrhs, const float* d,
                                const float _Complex* e, float* df,
                                float _Complex* ef,
                                const float _Complex* b, int ldb,
                                float _Complex* x, int ldx,
                                float* rcond, float* ferr, float* berr,
                                float _Complex* work, float* rwork );
int LAPACKE_zptsvx_work( int matrix_order, char fact, int n,
                                int nrhs, const double* d,
                                const double _Complex* e, double* df,
                                double _Complex* ef,
                                const double _Complex* b, int ldb,
                                double _Complex* x, int ldx,
                                double* rcond, double* ferr, double* berr,
                                double _Complex* work, double* rwork );

int LAPACKE_spttrf_work( int n, float* d, float* e );
int LAPACKE_dpttrf_work( int n, double* d, double* e );
int LAPACKE_cpttrf_work( int n, float* d,
                                float _Complex* e );
int LAPACKE_zpttrf_work( int n, double* d,
                                double _Complex* e );

int LAPACKE_spttrs_work( int matrix_order, int n, int nrhs,
                                const float* d, const float* e, float* b,
                                int ldb );
int LAPACKE_dpttrs_work( int matrix_order, int n, int nrhs,
                                const double* d, const double* e, double* b,
                                int ldb );
int LAPACKE_cpttrs_work( int matrix_order, char uplo, int n,
                                int nrhs, const float* d,
                                const float _Complex* e,
                                float _Complex* b, int ldb );
int LAPACKE_zpttrs_work( int matrix_order, char uplo, int n,
                                int nrhs, const double* d,
                                const double _Complex* e,
                                double _Complex* b, int ldb );

int LAPACKE_ssbev_work( int matrix_order, char jobz, char uplo,
                               int n, int kd, float* ab,
                               int ldab, float* w, float* z,
                               int ldz, float* work );
int LAPACKE_dsbev_work( int matrix_order, char jobz, char uplo,
                               int n, int kd, double* ab,
                               int ldab, double* w, double* z,
                               int ldz, double* work );

int LAPACKE_ssbevd_work( int matrix_order, char jobz, char uplo,
                                int n, int kd, float* ab,
                                int ldab, float* w, float* z,
                                int ldz, float* work, int lwork,
                                int* iwork, int liwork );
int LAPACKE_dsbevd_work( int matrix_order, char jobz, char uplo,
                                int n, int kd, double* ab,
                                int ldab, double* w, double* z,
                                int ldz, double* work, int lwork,
                                int* iwork, int liwork );

int LAPACKE_ssbevx_work( int matrix_order, char jobz, char range,
                                char uplo, int n, int kd,
                                float* ab, int ldab, float* q,
                                int ldq, float vl, float vu,
                                int il, int iu, float abstol,
                                int* m, float* w, float* z,
                                int ldz, float* work, int* iwork,
                                int* ifail );
int LAPACKE_dsbevx_work( int matrix_order, char jobz, char range,
                                char uplo, int n, int kd,
                                double* ab, int ldab, double* q,
                                int ldq, double vl, double vu,
                                int il, int iu, double abstol,
                                int* m, double* w, double* z,
                                int ldz, double* work, int* iwork,
                                int* ifail );

int LAPACKE_ssbgst_work( int matrix_order, char vect, char uplo,
                                int n, int ka, int kb,
                                float* ab, int ldab, const float* bb,
                                int ldbb, float* x, int ldx,
                                float* work );
int LAPACKE_dsbgst_work( int matrix_order, char vect, char uplo,
                                int n, int ka, int kb,
                                double* ab, int ldab, const double* bb,
                                int ldbb, double* x, int ldx,
                                double* work );

int LAPACKE_ssbgv_work( int matrix_order, char jobz, char uplo,
                               int n, int ka, int kb,
                               float* ab, int ldab, float* bb,
                               int ldbb, float* w, float* z,
                               int ldz, float* work );
int LAPACKE_dsbgv_work( int matrix_order, char jobz, char uplo,
                               int n, int ka, int kb,
                               double* ab, int ldab, double* bb,
                               int ldbb, double* w, double* z,
                               int ldz, double* work );

int LAPACKE_ssbgvd_work( int matrix_order, char jobz, char uplo,
                                int n, int ka, int kb,
                                float* ab, int ldab, float* bb,
                                int ldbb, float* w, float* z,
                                int ldz, float* work, int lwork,
                                int* iwork, int liwork );
int LAPACKE_dsbgvd_work( int matrix_order, char jobz, char uplo,
                                int n, int ka, int kb,
                                double* ab, int ldab, double* bb,
                                int ldbb, double* w, double* z,
                                int ldz, double* work, int lwork,
                                int* iwork, int liwork );

int LAPACKE_ssbgvx_work( int matrix_order, char jobz, char range,
                                char uplo, int n, int ka,
                                int kb, float* ab, int ldab,
                                float* bb, int ldbb, float* q,
                                int ldq, float vl, float vu,
                                int il, int iu, float abstol,
                                int* m, float* w, float* z,
                                int ldz, float* work, int* iwork,
                                int* ifail );
int LAPACKE_dsbgvx_work( int matrix_order, char jobz, char range,
                                char uplo, int n, int ka,
                                int kb, double* ab, int ldab,
                                double* bb, int ldbb, double* q,
                                int ldq, double vl, double vu,
                                int il, int iu, double abstol,
                                int* m, double* w, double* z,
                                int ldz, double* work, int* iwork,
                                int* ifail );

int LAPACKE_ssbtrd_work( int matrix_order, char vect, char uplo,
                                int n, int kd, float* ab,
                                int ldab, float* d, float* e, float* q,
                                int ldq, float* work );
int LAPACKE_dsbtrd_work( int matrix_order, char vect, char uplo,
                                int n, int kd, double* ab,
                                int ldab, double* d, double* e,
                                double* q, int ldq, double* work );

int LAPACKE_ssfrk_work( int matrix_order, char transr, char uplo,
                               char trans, int n, int k,
                               float alpha, const float* a, int lda,
                               float beta, float* c );
int LAPACKE_dsfrk_work( int matrix_order, char transr, char uplo,
                               char trans, int n, int k,
                               double alpha, const double* a, int lda,
                               double beta, double* c );

int LAPACKE_sspcon_work( int matrix_order, char uplo, int n,
                                const float* ap, const int* ipiv,
                                float anorm, float* rcond, float* work,
                                int* iwork );
int LAPACKE_dspcon_work( int matrix_order, char uplo, int n,
                                const double* ap, const int* ipiv,
                                double anorm, double* rcond, double* work,
                                int* iwork );
int LAPACKE_cspcon_work( int matrix_order, char uplo, int n,
                                const float _Complex* ap,
                                const int* ipiv, float anorm,
                                float* rcond, float _Complex* work );
int LAPACKE_zspcon_work( int matrix_order, char uplo, int n,
                                const double _Complex* ap,
                                const int* ipiv, double anorm,
                                double* rcond, double _Complex* work );

int LAPACKE_sspev_work( int matrix_order, char jobz, char uplo,
                               int n, float* ap, float* w, float* z,
                               int ldz, float* work );
int LAPACKE_dspev_work( int matrix_order, char jobz, char uplo,
                               int n, double* ap, double* w, double* z,
                               int ldz, double* work );

int LAPACKE_sspevd_work( int matrix_order, char jobz, char uplo,
                                int n, float* ap, float* w, float* z,
                                int ldz, float* work, int lwork,
                                int* iwork, int liwork );
int LAPACKE_dspevd_work( int matrix_order, char jobz, char uplo,
                                int n, double* ap, double* w, double* z,
                                int ldz, double* work, int lwork,
                                int* iwork, int liwork );

int LAPACKE_sspevx_work( int matrix_order, char jobz, char range,
                                char uplo, int n, float* ap, float vl,
                                float vu, int il, int iu,
                                float abstol, int* m, float* w, float* z,
                                int ldz, float* work, int* iwork,
                                int* ifail );
int LAPACKE_dspevx_work( int matrix_order, char jobz, char range,
                                char uplo, int n, double* ap, double vl,
                                double vu, int il, int iu,
                                double abstol, int* m, double* w,
                                double* z, int ldz, double* work,
                                int* iwork, int* ifail );

int LAPACKE_sspgst_work( int matrix_order, int itype, char uplo,
                                int n, float* ap, const float* bp );
int LAPACKE_dspgst_work( int matrix_order, int itype, char uplo,
                                int n, double* ap, const double* bp );

int LAPACKE_sspgv_work( int matrix_order, int itype, char jobz,
                               char uplo, int n, float* ap, float* bp,
                               float* w, float* z, int ldz,
                               float* work );
int LAPACKE_dspgv_work( int matrix_order, int itype, char jobz,
                               char uplo, int n, double* ap, double* bp,
                               double* w, double* z, int ldz,
                               double* work );

int LAPACKE_sspgvd_work( int matrix_order, int itype, char jobz,
                                char uplo, int n, float* ap, float* bp,
                                float* w, float* z, int ldz, float* work,
                                int lwork, int* iwork,
                                int liwork );
int LAPACKE_dspgvd_work( int matrix_order, int itype, char jobz,
                                char uplo, int n, double* ap, double* bp,
                                double* w, double* z, int ldz,
                                double* work, int lwork,
                                int* iwork, int liwork );

int LAPACKE_sspgvx_work( int matrix_order, int itype, char jobz,
                                char range, char uplo, int n, float* ap,
                                float* bp, float vl, float vu, int il,
                                int iu, float abstol, int* m,
                                float* w, float* z, int ldz, float* work,
                                int* iwork, int* ifail );
int LAPACKE_dspgvx_work( int matrix_order, int itype, char jobz,
                                char range, char uplo, int n, double* ap,
                                double* bp, double vl, double vu, int il,
                                int iu, double abstol, int* m,
                                double* w, double* z, int ldz,
                                double* work, int* iwork,
                                int* ifail );

int LAPACKE_ssprfs_work( int matrix_order, char uplo, int n,
                                int nrhs, const float* ap,
                                const float* afp, const int* ipiv,
                                const float* b, int ldb, float* x,
                                int ldx, float* ferr, float* berr,
                                float* work, int* iwork );
int LAPACKE_dsprfs_work( int matrix_order, char uplo, int n,
                                int nrhs, const double* ap,
                                const double* afp, const int* ipiv,
                                const double* b, int ldb, double* x,
                                int ldx, double* ferr, double* berr,
                                double* work, int* iwork );
int LAPACKE_csprfs_work( int matrix_order, char uplo, int n,
                                int nrhs, const float _Complex* ap,
                                const float _Complex* afp,
                                const int* ipiv,
                                const float _Complex* b, int ldb,
                                float _Complex* x, int ldx,
                                float* ferr, float* berr,
                                float _Complex* work, float* rwork );
int LAPACKE_zsprfs_work( int matrix_order, char uplo, int n,
                                int nrhs,
                                const double _Complex* ap,
                                const double _Complex* afp,
                                const int* ipiv,
                                const double _Complex* b, int ldb,
                                double _Complex* x, int ldx,
                                double* ferr, double* berr,
                                double _Complex* work, double* rwork );

int LAPACKE_sspsv_work( int matrix_order, char uplo, int n,
                               int nrhs, float* ap, int* ipiv,
                               float* b, int ldb );
int LAPACKE_dspsv_work( int matrix_order, char uplo, int n,
                               int nrhs, double* ap, int* ipiv,
                               double* b, int ldb );
int LAPACKE_cspsv_work( int matrix_order, char uplo, int n,
                               int nrhs, float _Complex* ap,
                               int* ipiv, float _Complex* b,
                               int ldb );
int LAPACKE_zspsv_work( int matrix_order, char uplo, int n,
                               int nrhs, double _Complex* ap,
                               int* ipiv, double _Complex* b,
                               int ldb );

int LAPACKE_sspsvx_work( int matrix_order, char fact, char uplo,
                                int n, int nrhs, const float* ap,
                                float* afp, int* ipiv, const float* b,
                                int ldb, float* x, int ldx,
                                float* rcond, float* ferr, float* berr,
                                float* work, int* iwork );
int LAPACKE_dspsvx_work( int matrix_order, char fact, char uplo,
                                int n, int nrhs, const double* ap,
                                double* afp, int* ipiv, const double* b,
                                int ldb, double* x, int ldx,
                                double* rcond, double* ferr, double* berr,
                                double* work, int* iwork );
int LAPACKE_cspsvx_work( int matrix_order, char fact, char uplo,
                                int n, int nrhs,
                                const float _Complex* ap,
                                float _Complex* afp, int* ipiv,
                                const float _Complex* b, int ldb,
                                float _Complex* x, int ldx,
                                float* rcond, float* ferr, float* berr,
                                float _Complex* work, float* rwork );
int LAPACKE_zspsvx_work( int matrix_order, char fact, char uplo,
                                int n, int nrhs,
                                const double _Complex* ap,
                                double _Complex* afp, int* ipiv,
                                const double _Complex* b, int ldb,
                                double _Complex* x, int ldx,
                                double* rcond, double* ferr, double* berr,
                                double _Complex* work, double* rwork );

int LAPACKE_ssptrd_work( int matrix_order, char uplo, int n,
                                float* ap, float* d, float* e, float* tau );
int LAPACKE_dsptrd_work( int matrix_order, char uplo, int n,
                                double* ap, double* d, double* e, double* tau );

int LAPACKE_ssptrf_work( int matrix_order, char uplo, int n,
                                float* ap, int* ipiv );
int LAPACKE_dsptrf_work( int matrix_order, char uplo, int n,
                                double* ap, int* ipiv );
int LAPACKE_csptrf_work( int matrix_order, char uplo, int n,
                                float _Complex* ap, int* ipiv );
int LAPACKE_zsptrf_work( int matrix_order, char uplo, int n,
                                double _Complex* ap, int* ipiv );

int LAPACKE_ssptri_work( int matrix_order, char uplo, int n,
                                float* ap, const int* ipiv,
                                float* work );
int LAPACKE_dsptri_work( int matrix_order, char uplo, int n,
                                double* ap, const int* ipiv,
                                double* work );
int LAPACKE_csptri_work( int matrix_order, char uplo, int n,
                                float _Complex* ap,
                                const int* ipiv,
                                float _Complex* work );
int LAPACKE_zsptri_work( int matrix_order, char uplo, int n,
                                double _Complex* ap,
                                const int* ipiv,
                                double _Complex* work );

int LAPACKE_ssptrs_work( int matrix_order, char uplo, int n,
                                int nrhs, const float* ap,
                                const int* ipiv, float* b,
                                int ldb );
int LAPACKE_dsptrs_work( int matrix_order, char uplo, int n,
                                int nrhs, const double* ap,
                                const int* ipiv, double* b,
                                int ldb );
int LAPACKE_csptrs_work( int matrix_order, char uplo, int n,
                                int nrhs, const float _Complex* ap,
                                const int* ipiv, float _Complex* b,
                                int ldb );
int LAPACKE_zsptrs_work( int matrix_order, char uplo, int n,
                                int nrhs,
                                const double _Complex* ap,
                                const int* ipiv,
                                double _Complex* b, int ldb );

int LAPACKE_sstebz_work( char range, char order, int n, float vl,
                                float vu, int il, int iu,
                                float abstol, const float* d, const float* e,
                                int* m, int* nsplit, float* w,
                                int* iblock, int* isplit,
                                float* work, int* iwork );
int LAPACKE_dstebz_work( char range, char order, int n, double vl,
                                double vu, int il, int iu,
                                double abstol, const double* d, const double* e,
                                int* m, int* nsplit, double* w,
                                int* iblock, int* isplit,
                                double* work, int* iwork );

int LAPACKE_sstedc_work( int matrix_order, char compz, int n,
                                float* d, float* e, float* z, int ldz,
                                float* work, int lwork,
                                int* iwork, int liwork );
int LAPACKE_dstedc_work( int matrix_order, char compz, int n,
                                double* d, double* e, double* z, int ldz,
                                double* work, int lwork,
                                int* iwork, int liwork );
int LAPACKE_cstedc_work( int matrix_order, char compz, int n,
                                float* d, float* e, float _Complex* z,
                                int ldz, float _Complex* work,
                                int lwork, float* rwork,
                                int lrwork, int* iwork,
                                int liwork );
int LAPACKE_zstedc_work( int matrix_order, char compz, int n,
                                double* d, double* e, double _Complex* z,
                                int ldz, double _Complex* work,
                                int lwork, double* rwork,
                                int lrwork, int* iwork,
                                int liwork );

int LAPACKE_sstegr_work( int matrix_order, char jobz, char range,
                                int n, float* d, float* e, float vl,
                                float vu, int il, int iu,
                                float abstol, int* m, float* w, float* z,
                                int ldz, int* isuppz, float* work,
                                int lwork, int* iwork,
                                int liwork );
int LAPACKE_dstegr_work( int matrix_order, char jobz, char range,
                                int n, double* d, double* e, double vl,
                                double vu, int il, int iu,
                                double abstol, int* m, double* w,
                                double* z, int ldz, int* isuppz,
                                double* work, int lwork,
                                int* iwork, int liwork );
int LAPACKE_cstegr_work( int matrix_order, char jobz, char range,
                                int n, float* d, float* e, float vl,
                                float vu, int il, int iu,
                                float abstol, int* m, float* w,
                                float _Complex* z, int ldz,
                                int* isuppz, float* work,
                                int lwork, int* iwork,
                                int liwork );
int LAPACKE_zstegr_work( int matrix_order, char jobz, char range,
                                int n, double* d, double* e, double vl,
                                double vu, int il, int iu,
                                double abstol, int* m, double* w,
                                double _Complex* z, int ldz,
                                int* isuppz, double* work,
                                int lwork, int* iwork,
                                int liwork );

int LAPACKE_sstein_work( int matrix_order, int n, const float* d,
                                const float* e, int m, const float* w,
                                const int* iblock,
                                const int* isplit, float* z,
                                int ldz, float* work, int* iwork,
                                int* ifailv );
int LAPACKE_dstein_work( int matrix_order, int n, const double* d,
                                const double* e, int m, const double* w,
                                const int* iblock,
                                const int* isplit, double* z,
                                int ldz, double* work, int* iwork,
                                int* ifailv );
int LAPACKE_cstein_work( int matrix_order, int n, const float* d,
                                const float* e, int m, const float* w,
                                const int* iblock,
                                const int* isplit,
                                float _Complex* z, int ldz,
                                float* work, int* iwork,
                                int* ifailv );
int LAPACKE_zstein_work( int matrix_order, int n, const double* d,
                                const double* e, int m, const double* w,
                                const int* iblock,
                                const int* isplit,
                                double _Complex* z, int ldz,
                                double* work, int* iwork,
                                int* ifailv );

int LAPACKE_sstemr_work( int matrix_order, char jobz, char range,
                                int n, float* d, float* e, float vl,
                                float vu, int il, int iu,
                                int* m, float* w, float* z,
                                int ldz, int nzc,
                                int* isuppz, int* tryrac,
                                float* work, int lwork,
                                int* iwork, int liwork );
int LAPACKE_dstemr_work( int matrix_order, char jobz, char range,
                                int n, double* d, double* e, double vl,
                                double vu, int il, int iu,
                                int* m, double* w, double* z,
                                int ldz, int nzc,
                                int* isuppz, int* tryrac,
                                double* work, int lwork,
                                int* iwork, int liwork );
int LAPACKE_cstemr_work( int matrix_order, char jobz, char range,
                                int n, float* d, float* e, float vl,
                                float vu, int il, int iu,
                                int* m, float* w,
                                float _Complex* z, int ldz,
                                int nzc, int* isuppz,
                                int* tryrac, float* work,
                                int lwork, int* iwork,
                                int liwork );
int LAPACKE_zstemr_work( int matrix_order, char jobz, char range,
                                int n, double* d, double* e, double vl,
                                double vu, int il, int iu,
                                int* m, double* w,
                                double _Complex* z, int ldz,
                                int nzc, int* isuppz,
                                int* tryrac, double* work,
                                int lwork, int* iwork,
                                int liwork );

int LAPACKE_ssteqr_work( int matrix_order, char compz, int n,
                                float* d, float* e, float* z, int ldz,
                                float* work );
int LAPACKE_dsteqr_work( int matrix_order, char compz, int n,
                                double* d, double* e, double* z, int ldz,
                                double* work );
int LAPACKE_csteqr_work( int matrix_order, char compz, int n,
                                float* d, float* e, float _Complex* z,
                                int ldz, float* work );
int LAPACKE_zsteqr_work( int matrix_order, char compz, int n,
                                double* d, double* e, double _Complex* z,
                                int ldz, double* work );

int LAPACKE_ssterf_work( int n, float* d, float* e );
int LAPACKE_dsterf_work( int n, double* d, double* e );

int LAPACKE_sstev_work( int matrix_order, char jobz, int n,
                               float* d, float* e, float* z, int ldz,
                               float* work );
int LAPACKE_dstev_work( int matrix_order, char jobz, int n,
                               double* d, double* e, double* z, int ldz,
                               double* work );

int LAPACKE_sstevd_work( int matrix_order, char jobz, int n,
                                float* d, float* e, float* z, int ldz,
                                float* work, int lwork,
                                int* iwork, int liwork );
int LAPACKE_dstevd_work( int matrix_order, char jobz, int n,
                                double* d, double* e, double* z, int ldz,
                                double* work, int lwork,
                                int* iwork, int liwork );

int LAPACKE_sstevr_work( int matrix_order, char jobz, char range,
                                int n, float* d, float* e, float vl,
                                float vu, int il, int iu,
                                float abstol, int* m, float* w, float* z,
                                int ldz, int* isuppz, float* work,
                                int lwork, int* iwork,
                                int liwork );
int LAPACKE_dstevr_work( int matrix_order, char jobz, char range,
                                int n, double* d, double* e, double vl,
                                double vu, int il, int iu,
                                double abstol, int* m, double* w,
                                double* z, int ldz, int* isuppz,
                                double* work, int lwork,
                                int* iwork, int liwork );

int LAPACKE_sstevx_work( int matrix_order, char jobz, char range,
                                int n, float* d, float* e, float vl,
                                float vu, int il, int iu,
                                float abstol, int* m, float* w, float* z,
                                int ldz, float* work, int* iwork,
                                int* ifail );
int LAPACKE_dstevx_work( int matrix_order, char jobz, char range,
                                int n, double* d, double* e, double vl,
                                double vu, int il, int iu,
                                double abstol, int* m, double* w,
                                double* z, int ldz, double* work,
                                int* iwork, int* ifail );

int LAPACKE_ssycon_work( int matrix_order, char uplo, int n,
                                const float* a, int lda,
                                const int* ipiv, float anorm,
                                float* rcond, float* work, int* iwork );
int LAPACKE_dsycon_work( int matrix_order, char uplo, int n,
                                const double* a, int lda,
                                const int* ipiv, double anorm,
                                double* rcond, double* work,
                                int* iwork );
int LAPACKE_csycon_work( int matrix_order, char uplo, int n,
                                const float _Complex* a, int lda,
                                const int* ipiv, float anorm,
                                float* rcond, float _Complex* work );
int LAPACKE_zsycon_work( int matrix_order, char uplo, int n,
                                const double _Complex* a, int lda,
                                const int* ipiv, double anorm,
                                double* rcond, double _Complex* work );

int LAPACKE_ssyequb_work( int matrix_order, char uplo, int n,
                                 const float* a, int lda, float* s,
                                 float* scond, float* amax, float* work );
int LAPACKE_dsyequb_work( int matrix_order, char uplo, int n,
                                 const double* a, int lda, double* s,
                                 double* scond, double* amax, double* work );
int LAPACKE_csyequb_work( int matrix_order, char uplo, int n,
                                 const float _Complex* a, int lda,
                                 float* s, float* scond, float* amax,
                                 float _Complex* work );
int LAPACKE_zsyequb_work( int matrix_order, char uplo, int n,
                                 const double _Complex* a, int lda,
                                 double* s, double* scond, double* amax,
                                 double _Complex* work );

int LAPACKE_ssyev_work( int matrix_order, char jobz, char uplo,
                               int n, float* a, int lda, float* w,
                               float* work, int lwork );
int LAPACKE_dsyev_work( int matrix_order, char jobz, char uplo,
                               int n, double* a, int lda,
                               double* w, double* work, int lwork );

int LAPACKE_ssyevd_work( int matrix_order, char jobz, char uplo,
                                int n, float* a, int lda,
                                float* w, float* work, int lwork,
                                int* iwork, int liwork );
int LAPACKE_dsyevd_work( int matrix_order, char jobz, char uplo,
                                int n, double* a, int lda,
                                double* w, double* work, int lwork,
                                int* iwork, int liwork );

int LAPACKE_ssyevr_work( int matrix_order, char jobz, char range,
                                char uplo, int n, float* a,
                                int lda, float vl, float vu,
                                int il, int iu, float abstol,
                                int* m, float* w, float* z,
                                int ldz, int* isuppz, float* work,
                                int lwork, int* iwork,
                                int liwork );
int LAPACKE_dsyevr_work( int matrix_order, char jobz, char range,
                                char uplo, int n, double* a,
                                int lda, double vl, double vu,
                                int il, int iu, double abstol,
                                int* m, double* w, double* z,
                                int ldz, int* isuppz,
                                double* work, int lwork,
                                int* iwork, int liwork );

int LAPACKE_ssyevx_work( int matrix_order, char jobz, char range,
                                char uplo, int n, float* a,
                                int lda, float vl, float vu,
                                int il, int iu, float abstol,
                                int* m, float* w, float* z,
                                int ldz, float* work, int lwork,
                                int* iwork, int* ifail );
int LAPACKE_dsyevx_work( int matrix_order, char jobz, char range,
                                char uplo, int n, double* a,
                                int lda, double vl, double vu,
                                int il, int iu, double abstol,
                                int* m, double* w, double* z,
                                int ldz, double* work, int lwork,
                                int* iwork, int* ifail );

int LAPACKE_ssygst_work( int matrix_order, int itype, char uplo,
                                int n, float* a, int lda,
                                const float* b, int ldb );
int LAPACKE_dsygst_work( int matrix_order, int itype, char uplo,
                                int n, double* a, int lda,
                                const double* b, int ldb );

int LAPACKE_ssygv_work( int matrix_order, int itype, char jobz,
                               char uplo, int n, float* a,
                               int lda, float* b, int ldb,
                               float* w, float* work, int lwork );
int LAPACKE_dsygv_work( int matrix_order, int itype, char jobz,
                               char uplo, int n, double* a,
                               int lda, double* b, int ldb,
                               double* w, double* work, int lwork );

int LAPACKE_ssygvd_work( int matrix_order, int itype, char jobz,
                                char uplo, int n, float* a,
                                int lda, float* b, int ldb,
                                float* w, float* work, int lwork,
                                int* iwork, int liwork );
int LAPACKE_dsygvd_work( int matrix_order, int itype, char jobz,
                                char uplo, int n, double* a,
                                int lda, double* b, int ldb,
                                double* w, double* work, int lwork,
                                int* iwork, int liwork );

int LAPACKE_ssygvx_work( int matrix_order, int itype, char jobz,
                                char range, char uplo, int n, float* a,
                                int lda, float* b, int ldb,
                                float vl, float vu, int il,
                                int iu, float abstol, int* m,
                                float* w, float* z, int ldz, float* work,
                                int lwork, int* iwork,
                                int* ifail );
int LAPACKE_dsygvx_work( int matrix_order, int itype, char jobz,
                                char range, char uplo, int n, double* a,
                                int lda, double* b, int ldb,
                                double vl, double vu, int il,
                                int iu, double abstol, int* m,
                                double* w, double* z, int ldz,
                                double* work, int lwork,
                                int* iwork, int* ifail );

int LAPACKE_ssyrfs_work( int matrix_order, char uplo, int n,
                                int nrhs, const float* a, int lda,
                                const float* af, int ldaf,
                                const int* ipiv, const float* b,
                                int ldb, float* x, int ldx,
                                float* ferr, float* berr, float* work,
                                int* iwork );
int LAPACKE_dsyrfs_work( int matrix_order, char uplo, int n,
                                int nrhs, const double* a,
                                int lda, const double* af,
                                int ldaf, const int* ipiv,
                                const double* b, int ldb, double* x,
                                int ldx, double* ferr, double* berr,
                                double* work, int* iwork );
int LAPACKE_csyrfs_work( int matrix_order, char uplo, int n,
                                int nrhs, const float _Complex* a,
                                int lda, const float _Complex* af,
                                int ldaf, const int* ipiv,
                                const float _Complex* b, int ldb,
                                float _Complex* x, int ldx,
                                float* ferr, float* berr,
                                float _Complex* work, float* rwork );
int LAPACKE_zsyrfs_work( int matrix_order, char uplo, int n,
                                int nrhs, const double _Complex* a,
                                int lda, const double _Complex* af,
                                int ldaf, const int* ipiv,
                                const double _Complex* b, int ldb,
                                double _Complex* x, int ldx,
                                double* ferr, double* berr,
                                double _Complex* work, double* rwork );

int LAPACKE_ssyrfsx_work( int matrix_order, char uplo, char equed,
                                 int n, int nrhs, const float* a,
                                 int lda, const float* af,
                                 int ldaf, const int* ipiv,
                                 const float* s, const float* b, int ldb,
                                 float* x, int ldx, float* rcond,
                                 float* berr, int n_err_bnds,
                                 float* err_bnds_norm, float* err_bnds_comp,
                                 int nparams, float* params, float* work,
                                 int* iwork );
int LAPACKE_dsyrfsx_work( int matrix_order, char uplo, char equed,
                                 int n, int nrhs, const double* a,
                                 int lda, const double* af,
                                 int ldaf, const int* ipiv,
                                 const double* s, const double* b,
                                 int ldb, double* x, int ldx,
                                 double* rcond, double* berr,
                                 int n_err_bnds, double* err_bnds_norm,
                                 double* err_bnds_comp, int nparams,
                                 double* params, double* work,
                                 int* iwork );
int LAPACKE_csyrfsx_work( int matrix_order, char uplo, char equed,
                                 int n, int nrhs,
                                 const float _Complex* a, int lda,
                                 const float _Complex* af,
                                 int ldaf, const int* ipiv,
                                 const float* s, const float _Complex* b,
                                 int ldb, float _Complex* x,
                                 int ldx, float* rcond, float* berr,
                                 int n_err_bnds, float* err_bnds_norm,
                                 float* err_bnds_comp, int nparams,
                                 float* params, float _Complex* work,
                                 float* rwork );
int LAPACKE_zsyrfsx_work( int matrix_order, char uplo, char equed,
                                 int n, int nrhs,
                                 const double _Complex* a, int lda,
                                 const double _Complex* af,
                                 int ldaf, const int* ipiv,
                                 const double* s,
                                 const double _Complex* b, int ldb,
                                 double _Complex* x, int ldx,
                                 double* rcond, double* berr,
                                 int n_err_bnds, double* err_bnds_norm,
                                 double* err_bnds_comp, int nparams,
                                 double* params, double _Complex* work,
                                 double* rwork );

int LAPACKE_ssysv_work( int matrix_order, char uplo, int n,
                               int nrhs, float* a, int lda,
                               int* ipiv, float* b, int ldb,
                               float* work, int lwork );
int LAPACKE_dsysv_work( int matrix_order, char uplo, int n,
                               int nrhs, double* a, int lda,
                               int* ipiv, double* b, int ldb,
                               double* work, int lwork );
int LAPACKE_csysv_work( int matrix_order, char uplo, int n,
                               int nrhs, float _Complex* a,
                               int lda, int* ipiv,
                               float _Complex* b, int ldb,
                               float _Complex* work, int lwork );
int LAPACKE_zsysv_work( int matrix_order, char uplo, int n,
                               int nrhs, double _Complex* a,
                               int lda, int* ipiv,
                               double _Complex* b, int ldb,
                               double _Complex* work, int lwork );

int LAPACKE_ssysv_rook_work( int matrix_order, char uplo, int n,
                                    int nrhs, float* a, int lda,
                                    int* ipiv, float* b, int ldb,
                                    float* work, int lwork );
int LAPACKE_dsysv_rook_work( int matrix_order, char uplo, int n,
                                    int nrhs, double* a, int lda,
                                    int* ipiv, double* b, int ldb,
                                    double* work, int lwork );
int LAPACKE_csysv_rook_work( int matrix_order, char uplo, int n,
                                    int nrhs, float _Complex* a,
                                    int lda, int* ipiv,
                                    float _Complex* b, int ldb,
                                    float _Complex* work,
                                    int lwork );
int LAPACKE_zsysv_rook_work( int matrix_order, char uplo, int n,
                                    int nrhs, double _Complex* a,
                                    int lda, int* ipiv,
                                    double _Complex* b, int ldb,
                                    double _Complex* work,
                                    int lwork );

int LAPACKE_ssysvx_work( int matrix_order, char fact, char uplo,
                                int n, int nrhs, const float* a,
                                int lda, float* af, int ldaf,
                                int* ipiv, const float* b,
                                int ldb, float* x, int ldx,
                                float* rcond, float* ferr, float* berr,
                                float* work, int lwork,
                                int* iwork );
int LAPACKE_dsysvx_work( int matrix_order, char fact, char uplo,
                                int n, int nrhs, const double* a,
                                int lda, double* af, int ldaf,
                                int* ipiv, const double* b,
                                int ldb, double* x, int ldx,
                                double* rcond, double* ferr, double* berr,
                                double* work, int lwork,
                                int* iwork );
int LAPACKE_csysvx_work( int matrix_order, char fact, char uplo,
                                int n, int nrhs,
                                const float _Complex* a, int lda,
                                float _Complex* af, int ldaf,
                                int* ipiv, const float _Complex* b,
                                int ldb, float _Complex* x,
                                int ldx, float* rcond, float* ferr,
                                float* berr, float _Complex* work,
                                int lwork, float* rwork );
int LAPACKE_zsysvx_work( int matrix_order, char fact, char uplo,
                                int n, int nrhs,
                                const double _Complex* a, int lda,
                                double _Complex* af, int ldaf,
                                int* ipiv,
                                const double _Complex* b, int ldb,
                                double _Complex* x, int ldx,
                                double* rcond, double* ferr, double* berr,
                                double _Complex* work, int lwork,
                                double* rwork );

int LAPACKE_ssysvxx_work( int matrix_order, char fact, char uplo,
                                 int n, int nrhs, float* a,
                                 int lda, float* af, int ldaf,
                                 int* ipiv, char* equed, float* s,
                                 float* b, int ldb, float* x,
                                 int ldx, float* rcond, float* rpvgrw,
                                 float* berr, int n_err_bnds,
                                 float* err_bnds_norm, float* err_bnds_comp,
                                 int nparams, float* params, float* work,
                                 int* iwork );
int LAPACKE_dsysvxx_work( int matrix_order, char fact, char uplo,
                                 int n, int nrhs, double* a,
                                 int lda, double* af, int ldaf,
                                 int* ipiv, char* equed, double* s,
                                 double* b, int ldb, double* x,
                                 int ldx, double* rcond, double* rpvgrw,
                                 double* berr, int n_err_bnds,
                                 double* err_bnds_norm, double* err_bnds_comp,
                                 int nparams, double* params,
                                 double* work, int* iwork );
int LAPACKE_csysvxx_work( int matrix_order, char fact, char uplo,
                                 int n, int nrhs,
                                 float _Complex* a, int lda,
                                 float _Complex* af, int ldaf,
                                 int* ipiv, char* equed, float* s,
                                 float _Complex* b, int ldb,
                                 float _Complex* x, int ldx,
                                 float* rcond, float* rpvgrw, float* berr,
                                 int n_err_bnds, float* err_bnds_norm,
                                 float* err_bnds_comp, int nparams,
                                 float* params, float _Complex* work,
                                 float* rwork );
int LAPACKE_zsysvxx_work( int matrix_order, char fact, char uplo,
                                 int n, int nrhs,
                                 double _Complex* a, int lda,
                                 double _Complex* af, int ldaf,
                                 int* ipiv, char* equed, double* s,
                                 double _Complex* b, int ldb,
                                 double _Complex* x, int ldx,
                                 double* rcond, double* rpvgrw, double* berr,
                                 int n_err_bnds, double* err_bnds_norm,
                                 double* err_bnds_comp, int nparams,
                                 double* params, double _Complex* work,
                                 double* rwork );

int LAPACKE_ssytrd_work( int matrix_order, char uplo, int n,
                                float* a, int lda, float* d, float* e,
                                float* tau, float* work, int lwork );
int LAPACKE_dsytrd_work( int matrix_order, char uplo, int n,
                                double* a, int lda, double* d, double* e,
                                double* tau, double* work, int lwork );

int LAPACKE_ssytrf_work( int matrix_order, char uplo, int n,
                                float* a, int lda, int* ipiv,
                                float* work, int lwork );
int LAPACKE_dsytrf_work( int matrix_order, char uplo, int n,
                                double* a, int lda, int* ipiv,
                                double* work, int lwork );
int LAPACKE_csytrf_work( int matrix_order, char uplo, int n,
                                float _Complex* a, int lda,
                                int* ipiv, float _Complex* work,
                                int lwork );
int LAPACKE_zsytrf_work( int matrix_order, char uplo, int n,
                                double _Complex* a, int lda,
                                int* ipiv, double _Complex* work,
                                int lwork );

int LAPACKE_ssytri_work( int matrix_order, char uplo, int n,
                                float* a, int lda,
                                const int* ipiv, float* work );
int LAPACKE_dsytri_work( int matrix_order, char uplo, int n,
                                double* a, int lda,
                                const int* ipiv, double* work );
int LAPACKE_csytri_work( int matrix_order, char uplo, int n,
                                float _Complex* a, int lda,
                                const int* ipiv,
                                float _Complex* work );
int LAPACKE_zsytri_work( int matrix_order, char uplo, int n,
                                double _Complex* a, int lda,
                                const int* ipiv,
                                double _Complex* work );

int LAPACKE_ssytrs_work( int matrix_order, char uplo, int n,
                                int nrhs, const float* a, int lda,
                                const int* ipiv, float* b,
                                int ldb );
int LAPACKE_dsytrs_work( int matrix_order, char uplo, int n,
                                int nrhs, const double* a,
                                int lda, const int* ipiv,
                                double* b, int ldb );
int LAPACKE_csytrs_work( int matrix_order, char uplo, int n,
                                int nrhs, const float _Complex* a,
                                int lda, const int* ipiv,
                                float _Complex* b, int ldb );
int LAPACKE_zsytrs_work( int matrix_order, char uplo, int n,
                                int nrhs, const double _Complex* a,
                                int lda, const int* ipiv,
                                double _Complex* b, int ldb );

int LAPACKE_stbcon_work( int matrix_order, char norm, char uplo,
                                char diag, int n, int kd,
                                const float* ab, int ldab, float* rcond,
                                float* work, int* iwork );
int LAPACKE_dtbcon_work( int matrix_order, char norm, char uplo,
                                char diag, int n, int kd,
                                const double* ab, int ldab,
                                double* rcond, double* work,
                                int* iwork );
int LAPACKE_ctbcon_work( int matrix_order, char norm, char uplo,
                                char diag, int n, int kd,
                                const float _Complex* ab, int ldab,
                                float* rcond, float _Complex* work,
                                float* rwork );
int LAPACKE_ztbcon_work( int matrix_order, char norm, char uplo,
                                char diag, int n, int kd,
                                const double _Complex* ab,
                                int ldab, double* rcond,
                                double _Complex* work, double* rwork );

int LAPACKE_stbrfs_work( int matrix_order, char uplo, char trans,
                                char diag, int n, int kd,
                                int nrhs, const float* ab,
                                int ldab, const float* b, int ldb,
                                const float* x, int ldx, float* ferr,
                                float* berr, float* work, int* iwork );
int LAPACKE_dtbrfs_work( int matrix_order, char uplo, char trans,
                                char diag, int n, int kd,
                                int nrhs, const double* ab,
                                int ldab, const double* b,
                                int ldb, const double* x, int ldx,
                                double* ferr, double* berr, double* work,
                                int* iwork );
int LAPACKE_ctbrfs_work( int matrix_order, char uplo, char trans,
                                char diag, int n, int kd,
                                int nrhs, const float _Complex* ab,
                                int ldab, const float _Complex* b,
                                int ldb, const float _Complex* x,
                                int ldx, float* ferr, float* berr,
                                float _Complex* work, float* rwork );
int LAPACKE_ztbrfs_work( int matrix_order, char uplo, char trans,
                                char diag, int n, int kd,
                                int nrhs,
                                const double _Complex* ab,
                                int ldab, const double _Complex* b,
                                int ldb, const double _Complex* x,
                                int ldx, double* ferr, double* berr,
                                double _Complex* work, double* rwork );

int LAPACKE_stbtrs_work( int matrix_order, char uplo, char trans,
                                char diag, int n, int kd,
                                int nrhs, const float* ab,
                                int ldab, float* b, int ldb );
int LAPACKE_dtbtrs_work( int matrix_order, char uplo, char trans,
                                char diag, int n, int kd,
                                int nrhs, const double* ab,
                                int ldab, double* b, int ldb );
int LAPACKE_ctbtrs_work( int matrix_order, char uplo, char trans,
                                char diag, int n, int kd,
                                int nrhs, const float _Complex* ab,
                                int ldab, float _Complex* b,
                                int ldb );
int LAPACKE_ztbtrs_work( int matrix_order, char uplo, char trans,
                                char diag, int n, int kd,
                                int nrhs,
                                const double _Complex* ab,
                                int ldab, double _Complex* b,
                                int ldb );

int LAPACKE_stfsm_work( int matrix_order, char transr, char side,
                               char uplo, char trans, char diag, int m,
                               int n, float alpha, const float* a,
                               float* b, int ldb );
int LAPACKE_dtfsm_work( int matrix_order, char transr, char side,
                               char uplo, char trans, char diag, int m,
                               int n, double alpha, const double* a,
                               double* b, int ldb );
int LAPACKE_ctfsm_work( int matrix_order, char transr, char side,
                               char uplo, char trans, char diag, int m,
                               int n, float _Complex alpha,
                               const float _Complex* a,
                               float _Complex* b, int ldb );
int LAPACKE_ztfsm_work( int matrix_order, char transr, char side,
                               char uplo, char trans, char diag, int m,
                               int n, double _Complex alpha,
                               const double _Complex* a,
                               double _Complex* b, int ldb );

int LAPACKE_stftri_work( int matrix_order, char transr, char uplo,
                                char diag, int n, float* a );
int LAPACKE_dtftri_work( int matrix_order, char transr, char uplo,
                                char diag, int n, double* a );
int LAPACKE_ctftri_work( int matrix_order, char transr, char uplo,
                                char diag, int n,
                                float _Complex* a );
int LAPACKE_ztftri_work( int matrix_order, char transr, char uplo,
                                char diag, int n,
                                double _Complex* a );

int LAPACKE_stfttp_work( int matrix_order, char transr, char uplo,
                                int n, const float* arf, float* ap );
int LAPACKE_dtfttp_work( int matrix_order, char transr, char uplo,
                                int n, const double* arf, double* ap );
int LAPACKE_ctfttp_work( int matrix_order, char transr, char uplo,
                                int n, const float _Complex* arf,
                                float _Complex* ap );
int LAPACKE_ztfttp_work( int matrix_order, char transr, char uplo,
                                int n, const double _Complex* arf,
                                double _Complex* ap );

int LAPACKE_stfttr_work( int matrix_order, char transr, char uplo,
                                int n, const float* arf, float* a,
                                int lda );
int LAPACKE_dtfttr_work( int matrix_order, char transr, char uplo,
                                int n, const double* arf, double* a,
                                int lda );
int LAPACKE_ctfttr_work( int matrix_order, char transr, char uplo,
                                int n, const float _Complex* arf,
                                float _Complex* a, int lda );
int LAPACKE_ztfttr_work( int matrix_order, char transr, char uplo,
                                int n, const double _Complex* arf,
                                double _Complex* a, int lda );

int LAPACKE_stgevc_work( int matrix_order, char side, char howmny,
                                const int* select, int n,
                                const float* s, int lds, const float* p,
                                int ldp, float* vl, int ldvl,
                                float* vr, int ldvr, int mm,
                                int* m, float* work );
int LAPACKE_dtgevc_work( int matrix_order, char side, char howmny,
                                const int* select, int n,
                                const double* s, int lds,
                                const double* p, int ldp, double* vl,
                                int ldvl, double* vr, int ldvr,
                                int mm, int* m, double* work );
int LAPACKE_ctgevc_work( int matrix_order, char side, char howmny,
                                const int* select, int n,
                                const float _Complex* s, int lds,
                                const float _Complex* p, int ldp,
                                float _Complex* vl, int ldvl,
                                float _Complex* vr, int ldvr,
                                int mm, int* m,
                                float _Complex* work, float* rwork );
int LAPACKE_ztgevc_work( int matrix_order, char side, char howmny,
                                const int* select, int n,
                                const double _Complex* s, int lds,
                                const double _Complex* p, int ldp,
                                double _Complex* vl, int ldvl,
                                double _Complex* vr, int ldvr,
                                int mm, int* m,
                                double _Complex* work, double* rwork );

int LAPACKE_stgexc_work( int matrix_order, int wantq,
                                int wantz, int n, float* a,
                                int lda, float* b, int ldb,
                                float* q, int ldq, float* z,
                                int ldz, int* ifst,
                                int* ilst, float* work,
                                int lwork );
int LAPACKE_dtgexc_work( int matrix_order, int wantq,
                                int wantz, int n, double* a,
                                int lda, double* b, int ldb,
                                double* q, int ldq, double* z,
                                int ldz, int* ifst,
                                int* ilst, double* work,
                                int lwork );
int LAPACKE_ctgexc_work( int matrix_order, int wantq,
                                int wantz, int n,
                                float _Complex* a, int lda,
                                float _Complex* b, int ldb,
                                float _Complex* q, int ldq,
                                float _Complex* z, int ldz,
                                int ifst, int ilst );
int LAPACKE_ztgexc_work( int matrix_order, int wantq,
                                int wantz, int n,
                                double _Complex* a, int lda,
                                double _Complex* b, int ldb,
                                double _Complex* q, int ldq,
                                double _Complex* z, int ldz,
                                int ifst, int ilst );

int LAPACKE_stgsen_work( int matrix_order, int ijob,
                                int wantq, int wantz,
                                const int* select, int n,
                                float* a, int lda, float* b,
                                int ldb, float* alphar, float* alphai,
                                float* beta, float* q, int ldq, float* z,
                                int ldz, int* m, float* pl,
                                float* pr, float* dif, float* work,
                                int lwork, int* iwork,
                                int liwork );
int LAPACKE_dtgsen_work( int matrix_order, int ijob,
                                int wantq, int wantz,
                                const int* select, int n,
                                double* a, int lda, double* b,
                                int ldb, double* alphar, double* alphai,
                                double* beta, double* q, int ldq,
                                double* z, int ldz, int* m,
                                double* pl, double* pr, double* dif,
                                double* work, int lwork,
                                int* iwork, int liwork );
int LAPACKE_ctgsen_work( int matrix_order, int ijob,
                                int wantq, int wantz,
                                const int* select, int n,
                                float _Complex* a, int lda,
                                float _Complex* b, int ldb,
                                float _Complex* alpha,
                                float _Complex* beta,
                                float _Complex* q, int ldq,
                                float _Complex* z, int ldz,
                                int* m, float* pl, float* pr, float* dif,
                                float _Complex* work, int lwork,
                                int* iwork, int liwork );
int LAPACKE_ztgsen_work( int matrix_order, int ijob,
                                int wantq, int wantz,
                                const int* select, int n,
                                double _Complex* a, int lda,
                                double _Complex* b, int ldb,
                                double _Complex* alpha,
                                double _Complex* beta,
                                double _Complex* q, int ldq,
                                double _Complex* z, int ldz,
                                int* m, double* pl, double* pr,
                                double* dif, double _Complex* work,
                                int lwork, int* iwork,
                                int liwork );

int LAPACKE_stgsja_work( int matrix_order, char jobu, char jobv,
                                char jobq, int m, int p,
                                int n, int k, int l,
                                float* a, int lda, float* b,
                                int ldb, float tola, float tolb,
                                float* alpha, float* beta, float* u,
                                int ldu, float* v, int ldv,
                                float* q, int ldq, float* work,
                                int* ncycle );
int LAPACKE_dtgsja_work( int matrix_order, char jobu, char jobv,
                                char jobq, int m, int p,
                                int n, int k, int l,
                                double* a, int lda, double* b,
                                int ldb, double tola, double tolb,
                                double* alpha, double* beta, double* u,
                                int ldu, double* v, int ldv,
                                double* q, int ldq, double* work,
                                int* ncycle );
int LAPACKE_ctgsja_work( int matrix_order, char jobu, char jobv,
                                char jobq, int m, int p,
                                int n, int k, int l,
                                float _Complex* a, int lda,
                                float _Complex* b, int ldb,
                                float tola, float tolb, float* alpha,
                                float* beta, float _Complex* u,
                                int ldu, float _Complex* v,
                                int ldv, float _Complex* q,
                                int ldq, float _Complex* work,
                                int* ncycle );
int LAPACKE_ztgsja_work( int matrix_order, char jobu, char jobv,
                                char jobq, int m, int p,
                                int n, int k, int l,
                                double _Complex* a, int lda,
                                double _Complex* b, int ldb,
                                double tola, double tolb, double* alpha,
                                double* beta, double _Complex* u,
                                int ldu, double _Complex* v,
                                int ldv, double _Complex* q,
                                int ldq, double _Complex* work,
                                int* ncycle );

int LAPACKE_stgsna_work( int matrix_order, char job, char howmny,
                                const int* select, int n,
                                const float* a, int lda, const float* b,
                                int ldb, const float* vl,
                                int ldvl, const float* vr,
                                int ldvr, float* s, float* dif,
                                int mm, int* m, float* work,
                                int lwork, int* iwork );
int LAPACKE_dtgsna_work( int matrix_order, char job, char howmny,
                                const int* select, int n,
                                const double* a, int lda,
                                const double* b, int ldb,
                                const double* vl, int ldvl,
                                const double* vr, int ldvr, double* s,
                                double* dif, int mm, int* m,
                                double* work, int lwork,
                                int* iwork );
int LAPACKE_ctgsna_work( int matrix_order, char job, char howmny,
                                const int* select, int n,
                                const float _Complex* a, int lda,
                                const float _Complex* b, int ldb,
                                const float _Complex* vl, int ldvl,
                                const float _Complex* vr, int ldvr,
                                float* s, float* dif, int mm,
                                int* m, float _Complex* work,
                                int lwork, int* iwork );
int LAPACKE_ztgsna_work( int matrix_order, char job, char howmny,
                                const int* select, int n,
                                const double _Complex* a, int lda,
                                const double _Complex* b, int ldb,
                                const double _Complex* vl,
                                int ldvl,
                                const double _Complex* vr,
                                int ldvr, double* s, double* dif,
                                int mm, int* m,
                                double _Complex* work, int lwork,
                                int* iwork );

int LAPACKE_stgsyl_work( int matrix_order, char trans, int ijob,
                                int m, int n, const float* a,
                                int lda, const float* b, int ldb,
                                float* c, int ldc, const float* d,
                                int ldd, const float* e, int lde,
                                float* f, int ldf, float* scale,
                                float* dif, float* work, int lwork,
                                int* iwork );
int LAPACKE_dtgsyl_work( int matrix_order, char trans, int ijob,
                                int m, int n, const double* a,
                                int lda, const double* b, int ldb,
                                double* c, int ldc, const double* d,
                                int ldd, const double* e, int lde,
                                double* f, int ldf, double* scale,
                                double* dif, double* work, int lwork,
                                int* iwork );
int LAPACKE_ctgsyl_work( int matrix_order, char trans, int ijob,
                                int m, int n,
                                const float _Complex* a, int lda,
                                const float _Complex* b, int ldb,
                                float _Complex* c, int ldc,
                                const float _Complex* d, int ldd,
                                const float _Complex* e, int lde,
                                float _Complex* f, int ldf,
                                float* scale, float* dif,
                                float _Complex* work, int lwork,
                                int* iwork );
int LAPACKE_ztgsyl_work( int matrix_order, char trans, int ijob,
                                int m, int n,
                                const double _Complex* a, int lda,
                                const double _Complex* b, int ldb,
                                double _Complex* c, int ldc,
                                const double _Complex* d, int ldd,
                                const double _Complex* e, int lde,
                                double _Complex* f, int ldf,
                                double* scale, double* dif,
                                double _Complex* work, int lwork,
                                int* iwork );

int LAPACKE_stpcon_work( int matrix_order, char norm, char uplo,
                                char diag, int n, const float* ap,
                                float* rcond, float* work, int* iwork );
int LAPACKE_dtpcon_work( int matrix_order, char norm, char uplo,
                                char diag, int n, const double* ap,
                                double* rcond, double* work,
                                int* iwork );
int LAPACKE_ctpcon_work( int matrix_order, char norm, char uplo,
                                char diag, int n,
                                const float _Complex* ap, float* rcond,
                                float _Complex* work, float* rwork );
int LAPACKE_ztpcon_work( int matrix_order, char norm, char uplo,
                                char diag, int n,
                                const double _Complex* ap, double* rcond,
                                double _Complex* work, double* rwork );

int LAPACKE_stprfs_work( int matrix_order, char uplo, char trans,
                                char diag, int n, int nrhs,
                                const float* ap, const float* b, int ldb,
                                const float* x, int ldx, float* ferr,
                                float* berr, float* work, int* iwork );
int LAPACKE_dtprfs_work( int matrix_order, char uplo, char trans,
                                char diag, int n, int nrhs,
                                const double* ap, const double* b,
                                int ldb, const double* x, int ldx,
                                double* ferr, double* berr, double* work,
                                int* iwork );
int LAPACKE_ctprfs_work( int matrix_order, char uplo, char trans,
                                char diag, int n, int nrhs,
                                const float _Complex* ap,
                                const float _Complex* b, int ldb,
                                const float _Complex* x, int ldx,
                                float* ferr, float* berr,
                                float _Complex* work, float* rwork );
int LAPACKE_ztprfs_work( int matrix_order, char uplo, char trans,
                                char diag, int n, int nrhs,
                                const double _Complex* ap,
                                const double _Complex* b, int ldb,
                                const double _Complex* x, int ldx,
                                double* ferr, double* berr,
                                double _Complex* work, double* rwork );

int LAPACKE_stptri_work( int matrix_order, char uplo, char diag,
                                int n, float* ap );
int LAPACKE_dtptri_work( int matrix_order, char uplo, char diag,
                                int n, double* ap );
int LAPACKE_ctptri_work( int matrix_order, char uplo, char diag,
                                int n, float _Complex* ap );
int LAPACKE_ztptri_work( int matrix_order, char uplo, char diag,
                                int n, double _Complex* ap );

int LAPACKE_stptrs_work( int matrix_order, char uplo, char trans,
                                char diag, int n, int nrhs,
                                const float* ap, float* b, int ldb );
int LAPACKE_dtptrs_work( int matrix_order, char uplo, char trans,
                                char diag, int n, int nrhs,
                                const double* ap, double* b, int ldb );
int LAPACKE_ctptrs_work( int matrix_order, char uplo, char trans,
                                char diag, int n, int nrhs,
                                const float _Complex* ap,
                                float _Complex* b, int ldb );
int LAPACKE_ztptrs_work( int matrix_order, char uplo, char trans,
                                char diag, int n, int nrhs,
                                const double _Complex* ap,
                                double _Complex* b, int ldb );

int LAPACKE_stpttf_work( int matrix_order, char transr, char uplo,
                                int n, const float* ap, float* arf );
int LAPACKE_dtpttf_work( int matrix_order, char transr, char uplo,
                                int n, const double* ap, double* arf );
int LAPACKE_ctpttf_work( int matrix_order, char transr, char uplo,
                                int n, const float _Complex* ap,
                                float _Complex* arf );
int LAPACKE_ztpttf_work( int matrix_order, char transr, char uplo,
                                int n, const double _Complex* ap,
                                double _Complex* arf );

int LAPACKE_stpttr_work( int matrix_order, char uplo, int n,
                                const float* ap, float* a, int lda );
int LAPACKE_dtpttr_work( int matrix_order, char uplo, int n,
                                const double* ap, double* a, int lda );
int LAPACKE_ctpttr_work( int matrix_order, char uplo, int n,
                                const float _Complex* ap,
                                float _Complex* a, int lda );
int LAPACKE_ztpttr_work( int matrix_order, char uplo, int n,
                                const double _Complex* ap,
                                double _Complex* a, int lda );

int LAPACKE_strcon_work( int matrix_order, char norm, char uplo,
                                char diag, int n, const float* a,
                                int lda, float* rcond, float* work,
                                int* iwork );
int LAPACKE_dtrcon_work( int matrix_order, char norm, char uplo,
                                char diag, int n, const double* a,
                                int lda, double* rcond, double* work,
                                int* iwork );
int LAPACKE_ctrcon_work( int matrix_order, char norm, char uplo,
                                char diag, int n,
                                const float _Complex* a, int lda,
                                float* rcond, float _Complex* work,
                                float* rwork );
int LAPACKE_ztrcon_work( int matrix_order, char norm, char uplo,
                                char diag, int n,
                                const double _Complex* a, int lda,
                                double* rcond, double _Complex* work,
                                double* rwork );

int LAPACKE_strevc_work( int matrix_order, char side, char howmny,
                                int* select, int n,
                                const float* t, int ldt, float* vl,
                                int ldvl, float* vr, int ldvr,
                                int mm, int* m, float* work );
int LAPACKE_dtrevc_work( int matrix_order, char side, char howmny,
                                int* select, int n,
                                const double* t, int ldt, double* vl,
                                int ldvl, double* vr, int ldvr,
                                int mm, int* m, double* work );
int LAPACKE_ctrevc_work( int matrix_order, char side, char howmny,
                                const int* select, int n,
                                float _Complex* t, int ldt,
                                float _Complex* vl, int ldvl,
                                float _Complex* vr, int ldvr,
                                int mm, int* m,
                                float _Complex* work, float* rwork );
int LAPACKE_ztrevc_work( int matrix_order, char side, char howmny,
                                const int* select, int n,
                                double _Complex* t, int ldt,
                                double _Complex* vl, int ldvl,
                                double _Complex* vr, int ldvr,
                                int mm, int* m,
                                double _Complex* work, double* rwork );

int LAPACKE_strexc_work( int matrix_order, char compq, int n,
                                float* t, int ldt, float* q,
                                int ldq, int* ifst,
                                int* ilst, float* work );
int LAPACKE_dtrexc_work( int matrix_order, char compq, int n,
                                double* t, int ldt, double* q,
                                int ldq, int* ifst,
                                int* ilst, double* work );
int LAPACKE_ctrexc_work( int matrix_order, char compq, int n,
                                float _Complex* t, int ldt,
                                float _Complex* q, int ldq,
                                int ifst, int ilst );
int LAPACKE_ztrexc_work( int matrix_order, char compq, int n,
                                double _Complex* t, int ldt,
                                double _Complex* q, int ldq,
                                int ifst, int ilst );

int LAPACKE_strrfs_work( int matrix_order, char uplo, char trans,
                                char diag, int n, int nrhs,
                                const float* a, int lda, const float* b,
                                int ldb, const float* x, int ldx,
                                float* ferr, float* berr, float* work,
                                int* iwork );
int LAPACKE_dtrrfs_work( int matrix_order, char uplo, char trans,
                                char diag, int n, int nrhs,
                                const double* a, int lda,
                                const double* b, int ldb,
                                const double* x, int ldx, double* ferr,
                                double* berr, double* work, int* iwork );
int LAPACKE_ctrrfs_work( int matrix_order, char uplo, char trans,
                                char diag, int n, int nrhs,
                                const float _Complex* a, int lda,
                                const float _Complex* b, int ldb,
                                const float _Complex* x, int ldx,
                                float* ferr, float* berr,
                                float _Complex* work, float* rwork );
int LAPACKE_ztrrfs_work( int matrix_order, char uplo, char trans,
                                char diag, int n, int nrhs,
                                const double _Complex* a, int lda,
                                const double _Complex* b, int ldb,
                                const double _Complex* x, int ldx,
                                double* ferr, double* berr,
                                double _Complex* work, double* rwork );

int LAPACKE_strsen_work( int matrix_order, char job, char compq,
                                const int* select, int n,
                                float* t, int ldt, float* q,
                                int ldq, float* wr, float* wi,
                                int* m, float* s, float* sep,
                                float* work, int lwork,
                                int* iwork, int liwork );
int LAPACKE_dtrsen_work( int matrix_order, char job, char compq,
                                const int* select, int n,
                                double* t, int ldt, double* q,
                                int ldq, double* wr, double* wi,
                                int* m, double* s, double* sep,
                                double* work, int lwork,
                                int* iwork, int liwork );
int LAPACKE_ctrsen_work( int matrix_order, char job, char compq,
                                const int* select, int n,
                                float _Complex* t, int ldt,
                                float _Complex* q, int ldq,
                                float _Complex* w, int* m,
                                float* s, float* sep,
                                float _Complex* work, int lwork );
int LAPACKE_ztrsen_work( int matrix_order, char job, char compq,
                                const int* select, int n,
                                double _Complex* t, int ldt,
                                double _Complex* q, int ldq,
                                double _Complex* w, int* m,
                                double* s, double* sep,
                                double _Complex* work, int lwork );

int LAPACKE_strsna_work( int matrix_order, char job, char howmny,
                                const int* select, int n,
                                const float* t, int ldt, const float* vl,
                                int ldvl, const float* vr,
                                int ldvr, float* s, float* sep,
                                int mm, int* m, float* work,
                                int ldwork, int* iwork );
int LAPACKE_dtrsna_work( int matrix_order, char job, char howmny,
                                const int* select, int n,
                                const double* t, int ldt,
                                const double* vl, int ldvl,
                                const double* vr, int ldvr, double* s,
                                double* sep, int mm, int* m,
                                double* work, int ldwork,
                                int* iwork );
int LAPACKE_ctrsna_work( int matrix_order, char job, char howmny,
                                const int* select, int n,
                                const float _Complex* t, int ldt,
                                const float _Complex* vl, int ldvl,
                                const float _Complex* vr, int ldvr,
                                float* s, float* sep, int mm,
                                int* m, float _Complex* work,
                                int ldwork, float* rwork );
int LAPACKE_ztrsna_work( int matrix_order, char job, char howmny,
                                const int* select, int n,
                                const double _Complex* t, int ldt,
                                const double _Complex* vl,
                                int ldvl,
                                const double _Complex* vr,
                                int ldvr, double* s, double* sep,
                                int mm, int* m,
                                double _Complex* work, int ldwork,
                                double* rwork );

int LAPACKE_strsyl_work( int matrix_order, char trana, char tranb,
                                int isgn, int m, int n,
                                const float* a, int lda, const float* b,
                                int ldb, float* c, int ldc,
                                float* scale );
int LAPACKE_dtrsyl_work( int matrix_order, char trana, char tranb,
                                int isgn, int m, int n,
                                const double* a, int lda,
                                const double* b, int ldb, double* c,
                                int ldc, double* scale );
int LAPACKE_ctrsyl_work( int matrix_order, char trana, char tranb,
                                int isgn, int m, int n,
                                const float _Complex* a, int lda,
                                const float _Complex* b, int ldb,
                                float _Complex* c, int ldc,
                                float* scale );
int LAPACKE_ztrsyl_work( int matrix_order, char trana, char tranb,
                                int isgn, int m, int n,
                                const double _Complex* a, int lda,
                                const double _Complex* b, int ldb,
                                double _Complex* c, int ldc,
                                double* scale );

int LAPACKE_strtri_work( int matrix_order, char uplo, char diag,
                                int n, float* a, int lda );
int LAPACKE_dtrtri_work( int matrix_order, char uplo, char diag,
                                int n, double* a, int lda );
int LAPACKE_ctrtri_work( int matrix_order, char uplo, char diag,
                                int n, float _Complex* a,
                                int lda );
int LAPACKE_ztrtri_work( int matrix_order, char uplo, char diag,
                                int n, double _Complex* a,
                                int lda );

int LAPACKE_strtrs_work( int matrix_order, char uplo, char trans,
                                char diag, int n, int nrhs,
                                const float* a, int lda, float* b,
                                int ldb );
int LAPACKE_dtrtrs_work( int matrix_order, char uplo, char trans,
                                char diag, int n, int nrhs,
                                const double* a, int lda, double* b,
                                int ldb );
int LAPACKE_ctrtrs_work( int matrix_order, char uplo, char trans,
                                char diag, int n, int nrhs,
                                const float _Complex* a, int lda,
                                float _Complex* b, int ldb );
int LAPACKE_ztrtrs_work( int matrix_order, char uplo, char trans,
                                char diag, int n, int nrhs,
                                const double _Complex* a, int lda,
                                double _Complex* b, int ldb );

int LAPACKE_strttf_work( int matrix_order, char transr, char uplo,
                                int n, const float* a, int lda,
                                float* arf );
int LAPACKE_dtrttf_work( int matrix_order, char transr, char uplo,
                                int n, const double* a, int lda,
                                double* arf );
int LAPACKE_ctrttf_work( int matrix_order, char transr, char uplo,
                                int n, const float _Complex* a,
                                int lda, float _Complex* arf );
int LAPACKE_ztrttf_work( int matrix_order, char transr, char uplo,
                                int n, const double _Complex* a,
                                int lda, double _Complex* arf );

int LAPACKE_strttp_work( int matrix_order, char uplo, int n,
                                const float* a, int lda, float* ap );
int LAPACKE_dtrttp_work( int matrix_order, char uplo, int n,
                                const double* a, int lda, double* ap );
int LAPACKE_ctrttp_work( int matrix_order, char uplo, int n,
                                const float _Complex* a, int lda,
                                float _Complex* ap );
int LAPACKE_ztrttp_work( int matrix_order, char uplo, int n,
                                const double _Complex* a, int lda,
                                double _Complex* ap );

int LAPACKE_stzrzf_work( int matrix_order, int m, int n,
                                float* a, int lda, float* tau,
                                float* work, int lwork );
int LAPACKE_dtzrzf_work( int matrix_order, int m, int n,
                                double* a, int lda, double* tau,
                                double* work, int lwork );
int LAPACKE_ctzrzf_work( int matrix_order, int m, int n,
                                float _Complex* a, int lda,
                                float _Complex* tau,
                                float _Complex* work, int lwork );
int LAPACKE_ztzrzf_work( int matrix_order, int m, int n,
                                double _Complex* a, int lda,
                                double _Complex* tau,
                                double _Complex* work, int lwork );

int LAPACKE_cungbr_work( int matrix_order, char vect, int m,
                                int n, int k,
                                float _Complex* a, int lda,
                                const float _Complex* tau,
                                float _Complex* work, int lwork );
int LAPACKE_zungbr_work( int matrix_order, char vect, int m,
                                int n, int k,
                                double _Complex* a, int lda,
                                const double _Complex* tau,
                                double _Complex* work, int lwork );

int LAPACKE_cunghr_work( int matrix_order, int n, int ilo,
                                int ihi, float _Complex* a,
                                int lda, const float _Complex* tau,
                                float _Complex* work, int lwork );
int LAPACKE_zunghr_work( int matrix_order, int n, int ilo,
                                int ihi, double _Complex* a,
                                int lda,
                                const double _Complex* tau,
                                double _Complex* work, int lwork );

int LAPACKE_cunglq_work( int matrix_order, int m, int n,
                                int k, float _Complex* a,
                                int lda, const float _Complex* tau,
                                float _Complex* work, int lwork );
int LAPACKE_zunglq_work( int matrix_order, int m, int n,
                                int k, double _Complex* a,
                                int lda,
                                const double _Complex* tau,
                                double _Complex* work, int lwork );

int LAPACKE_cungql_work( int matrix_order, int m, int n,
                                int k, float _Complex* a,
                                int lda, const float _Complex* tau,
                                float _Complex* work, int lwork );
int LAPACKE_zungql_work( int matrix_order, int m, int n,
                                int k, double _Complex* a,
                                int lda,
                                const double _Complex* tau,
                                double _Complex* work, int lwork );

int LAPACKE_cungqr_work( int matrix_order, int m, int n,
                                int k, float _Complex* a,
                                int lda, const float _Complex* tau,
                                float _Complex* work, int lwork );
int LAPACKE_zungqr_work( int matrix_order, int m, int n,
                                int k, double _Complex* a,
                                int lda,
                                const double _Complex* tau,
                                double _Complex* work, int lwork );

int LAPACKE_cungrq_work( int matrix_order, int m, int n,
                                int k, float _Complex* a,
                                int lda, const float _Complex* tau,
                                float _Complex* work, int lwork );
int LAPACKE_zungrq_work( int matrix_order, int m, int n,
                                int k, double _Complex* a,
                                int lda,
                                const double _Complex* tau,
                                double _Complex* work, int lwork );

int LAPACKE_cungtr_work( int matrix_order, char uplo, int n,
                                float _Complex* a, int lda,
                                const float _Complex* tau,
                                float _Complex* work, int lwork );
int LAPACKE_zungtr_work( int matrix_order, char uplo, int n,
                                double _Complex* a, int lda,
                                const double _Complex* tau,
                                double _Complex* work, int lwork );

int LAPACKE_cunmbr_work( int matrix_order, char vect, char side,
                                char trans, int m, int n,
                                int k, const float _Complex* a,
                                int lda, const float _Complex* tau,
                                float _Complex* c, int ldc,
                                float _Complex* work, int lwork );
int LAPACKE_zunmbr_work( int matrix_order, char vect, char side,
                                char trans, int m, int n,
                                int k, const double _Complex* a,
                                int lda,
                                const double _Complex* tau,
                                double _Complex* c, int ldc,
                                double _Complex* work, int lwork );

int LAPACKE_cunmhr_work( int matrix_order, char side, char trans,
                                int m, int n, int ilo,
                                int ihi, const float _Complex* a,
                                int lda, const float _Complex* tau,
                                float _Complex* c, int ldc,
                                float _Complex* work, int lwork );
int LAPACKE_zunmhr_work( int matrix_order, char side, char trans,
                                int m, int n, int ilo,
                                int ihi, const double _Complex* a,
                                int lda,
                                const double _Complex* tau,
                                double _Complex* c, int ldc,
                                double _Complex* work, int lwork );

int LAPACKE_cunmlq_work( int matrix_order, char side, char trans,
                                int m, int n, int k,
                                const float _Complex* a, int lda,
                                const float _Complex* tau,
                                float _Complex* c, int ldc,
                                float _Complex* work, int lwork );
int LAPACKE_zunmlq_work( int matrix_order, char side, char trans,
                                int m, int n, int k,
                                const double _Complex* a, int lda,
                                const double _Complex* tau,
                                double _Complex* c, int ldc,
                                double _Complex* work, int lwork );

int LAPACKE_cunmql_work( int matrix_order, char side, char trans,
                                int m, int n, int k,
                                const float _Complex* a, int lda,
                                const float _Complex* tau,
                                float _Complex* c, int ldc,
                                float _Complex* work, int lwork );
int LAPACKE_zunmql_work( int matrix_order, char side, char trans,
                                int m, int n, int k,
                                const double _Complex* a, int lda,
                                const double _Complex* tau,
                                double _Complex* c, int ldc,
                                double _Complex* work, int lwork );

int LAPACKE_cunmqr_work( int matrix_order, char side, char trans,
                                int m, int n, int k,
                                const float _Complex* a, int lda,
                                const float _Complex* tau,
                                float _Complex* c, int ldc,
                                float _Complex* work, int lwork );
int LAPACKE_zunmqr_work( int matrix_order, char side, char trans,
                                int m, int n, int k,
                                const double _Complex* a, int lda,
                                const double _Complex* tau,
                                double _Complex* c, int ldc,
                                double _Complex* work, int lwork );

int LAPACKE_cunmrq_work( int matrix_order, char side, char trans,
                                int m, int n, int k,
                                const float _Complex* a, int lda,
                                const float _Complex* tau,
                                float _Complex* c, int ldc,
                                float _Complex* work, int lwork );
int LAPACKE_zunmrq_work( int matrix_order, char side, char trans,
                                int m, int n, int k,
                                const double _Complex* a, int lda,
                                const double _Complex* tau,
                                double _Complex* c, int ldc,
                                double _Complex* work, int lwork );

int LAPACKE_cunmrz_work( int matrix_order, char side, char trans,
                                int m, int n, int k,
                                int l, const float _Complex* a,
                                int lda, const float _Complex* tau,
                                float _Complex* c, int ldc,
                                float _Complex* work, int lwork );
int LAPACKE_zunmrz_work( int matrix_order, char side, char trans,
                                int m, int n, int k,
                                int l, const double _Complex* a,
                                int lda,
                                const double _Complex* tau,
                                double _Complex* c, int ldc,
                                double _Complex* work, int lwork );

int LAPACKE_cunmtr_work( int matrix_order, char side, char uplo,
                                char trans, int m, int n,
                                const float _Complex* a, int lda,
                                const float _Complex* tau,
                                float _Complex* c, int ldc,
                                float _Complex* work, int lwork );
int LAPACKE_zunmtr_work( int matrix_order, char side, char uplo,
                                char trans, int m, int n,
                                const double _Complex* a, int lda,
                                const double _Complex* tau,
                                double _Complex* c, int ldc,
                                double _Complex* work, int lwork );

int LAPACKE_cupgtr_work( int matrix_order, char uplo, int n,
                                const float _Complex* ap,
                                const float _Complex* tau,
                                float _Complex* q, int ldq,
                                float _Complex* work );
int LAPACKE_zupgtr_work( int matrix_order, char uplo, int n,
                                const double _Complex* ap,
                                const double _Complex* tau,
                                double _Complex* q, int ldq,
                                double _Complex* work );

int LAPACKE_cupmtr_work( int matrix_order, char side, char uplo,
                                char trans, int m, int n,
                                const float _Complex* ap,
                                const float _Complex* tau,
                                float _Complex* c, int ldc,
                                float _Complex* work );
int LAPACKE_zupmtr_work( int matrix_order, char side, char uplo,
                                char trans, int m, int n,
                                const double _Complex* ap,
                                const double _Complex* tau,
                                double _Complex* c, int ldc,
                                double _Complex* work );

int LAPACKE_claghe( int matrix_order, int n, int k,
                           const float* d, float _Complex* a,
                           int lda, int* iseed );
int LAPACKE_zlaghe( int matrix_order, int n, int k,
                           const double* d, double _Complex* a,
                           int lda, int* iseed );

int LAPACKE_slagsy( int matrix_order, int n, int k,
                           const float* d, float* a, int lda,
                           int* iseed );
int LAPACKE_dlagsy( int matrix_order, int n, int k,
                           const double* d, double* a, int lda,
                           int* iseed );
int LAPACKE_clagsy( int matrix_order, int n, int k,
                           const float* d, float _Complex* a,
                           int lda, int* iseed );
int LAPACKE_zlagsy( int matrix_order, int n, int k,
                           const double* d, double _Complex* a,
                           int lda, int* iseed );

int LAPACKE_slapmr( int matrix_order, int forwrd,
                           int m, int n, float* x, int ldx,
                           int* k );
int LAPACKE_dlapmr( int matrix_order, int forwrd,
                           int m, int n, double* x,
                           int ldx, int* k );
int LAPACKE_clapmr( int matrix_order, int forwrd,
                           int m, int n, float _Complex* x,
                           int ldx, int* k );
int LAPACKE_zlapmr( int matrix_order, int forwrd,
                           int m, int n, double _Complex* x,
                           int ldx, int* k );


float LAPACKE_slapy2( float x, float y );
double LAPACKE_dlapy2( double x, double y );

float LAPACKE_slapy3( float x, float y, float z );
double LAPACKE_dlapy3( double x, double y, double z );

int LAPACKE_slartgp( float f, float g, float* cs, float* sn, float* r );
int LAPACKE_dlartgp( double f, double g, double* cs, double* sn,
                            double* r );

int LAPACKE_slartgs( float x, float y, float sigma, float* cs,
                            float* sn );
int LAPACKE_dlartgs( double x, double y, double sigma, double* cs,
                            double* sn );



int LAPACKE_cbbcsd( int matrix_order, char jobu1, char jobu2,
                           char jobv1t, char jobv2t, char trans, int m,
                           int p, int q, float* theta, float* phi,
                           float _Complex* u1, int ldu1,
                           float _Complex* u2, int ldu2,
                           float _Complex* v1t, int ldv1t,
                           float _Complex* v2t, int ldv2t,
                           float* b11d, float* b11e, float* b12d, float* b12e,
                           float* b21d, float* b21e, float* b22d, float* b22e );
int LAPACKE_cbbcsd_work( int matrix_order, char jobu1, char jobu2,
                                char jobv1t, char jobv2t, char trans,
                                int m, int p, int q,
                                float* theta, float* phi,
                                float _Complex* u1, int ldu1,
                                float _Complex* u2, int ldu2,
                                float _Complex* v1t, int ldv1t,
                                float _Complex* v2t, int ldv2t,
                                float* b11d, float* b11e, float* b12d,
                                float* b12e, float* b21d, float* b21e,
                                float* b22d, float* b22e, float* rwork,
                                int lrwork );
int LAPACKE_cheswapr( int matrix_order, char uplo, int n,
                             float _Complex* a, int i1,
                             int i2 );
int LAPACKE_cheswapr_work( int matrix_order, char uplo, int n,
                                  float _Complex* a, int i1,
                                  int i2 );
int LAPACKE_chetri2( int matrix_order, char uplo, int n,
                            float _Complex* a, int lda,
                            const int* ipiv );
int LAPACKE_chetri2_work( int matrix_order, char uplo, int n,
                                 float _Complex* a, int lda,
                                 const int* ipiv,
                                 float _Complex* work, int lwork );
int LAPACKE_chetri2x( int matrix_order, char uplo, int n,
                             float _Complex* a, int lda,
                             const int* ipiv, int nb );
int LAPACKE_chetri2x_work( int matrix_order, char uplo, int n,
                                  float _Complex* a, int lda,
                                  const int* ipiv,
                                  float _Complex* work, int nb );
int LAPACKE_chetrs2( int matrix_order, char uplo, int n,
                            int nrhs, const float _Complex* a,
                            int lda, const int* ipiv,
                            float _Complex* b, int ldb );
int LAPACKE_chetrs2_work( int matrix_order, char uplo, int n,
                                 int nrhs, const float _Complex* a,
                                 int lda, const int* ipiv,
                                 float _Complex* b, int ldb,
                                 float _Complex* work );
int LAPACKE_csyconv( int matrix_order, char uplo, char way, int n,
                            float _Complex* a, int lda,
                            const int* ipiv );
int LAPACKE_csyconv_work( int matrix_order, char uplo, char way,
                                 int n, float _Complex* a,
                                 int lda, const int* ipiv,
                                 float _Complex* work );
int LAPACKE_csyswapr( int matrix_order, char uplo, int n,
                             float _Complex* a, int i1,
                             int i2 );
int LAPACKE_csyswapr_work( int matrix_order, char uplo, int n,
                                  float _Complex* a, int i1,
                                  int i2 );
int LAPACKE_csytri2( int matrix_order, char uplo, int n,
                            float _Complex* a, int lda,
                            const int* ipiv );
int LAPACKE_csytri2_work( int matrix_order, char uplo, int n,
                                 float _Complex* a, int lda,
                                 const int* ipiv,
                                 float _Complex* work, int lwork );
int LAPACKE_csytri2x( int matrix_order, char uplo, int n,
                             float _Complex* a, int lda,
                             const int* ipiv, int nb );
int LAPACKE_csytri2x_work( int matrix_order, char uplo, int n,
                                  float _Complex* a, int lda,
                                  const int* ipiv,
                                  float _Complex* work, int nb );
int LAPACKE_csytrs2( int matrix_order, char uplo, int n,
                            int nrhs, const float _Complex* a,
                            int lda, const int* ipiv,
                            float _Complex* b, int ldb );
int LAPACKE_csytrs2_work( int matrix_order, char uplo, int n,
                                 int nrhs, const float _Complex* a,
                                 int lda, const int* ipiv,
                                 float _Complex* b, int ldb,
                                 float _Complex* work );
int LAPACKE_cunbdb( int matrix_order, char trans, char signs,
                           int m, int p, int q,
                           float _Complex* x11, int ldx11,
                           float _Complex* x12, int ldx12,
                           float _Complex* x21, int ldx21,
                           float _Complex* x22, int ldx22,
                           float* theta, float* phi,
                           float _Complex* taup1,
                           float _Complex* taup2,
                           float _Complex* tauq1,
                           float _Complex* tauq2 );
int LAPACKE_cunbdb_work( int matrix_order, char trans, char signs,
                                int m, int p, int q,
                                float _Complex* x11, int ldx11,
                                float _Complex* x12, int ldx12,
                                float _Complex* x21, int ldx21,
                                float _Complex* x22, int ldx22,
                                float* theta, float* phi,
                                float _Complex* taup1,
                                float _Complex* taup2,
                                float _Complex* tauq1,
                                float _Complex* tauq2,
                                float _Complex* work, int lwork );
int LAPACKE_cuncsd( int matrix_order, char jobu1, char jobu2,
                           char jobv1t, char jobv2t, char trans, char signs,
                           int m, int p, int q,
                           float _Complex* x11, int ldx11,
                           float _Complex* x12, int ldx12,
                           float _Complex* x21, int ldx21,
                           float _Complex* x22, int ldx22,
                           float* theta, float _Complex* u1,
                           int ldu1, float _Complex* u2,
                           int ldu2, float _Complex* v1t,
                           int ldv1t, float _Complex* v2t,
                           int ldv2t );
int LAPACKE_cuncsd_work( int matrix_order, char jobu1, char jobu2,
                                char jobv1t, char jobv2t, char trans,
                                char signs, int m, int p,
                                int q, float _Complex* x11,
                                int ldx11, float _Complex* x12,
                                int ldx12, float _Complex* x21,
                                int ldx21, float _Complex* x22,
                                int ldx22, float* theta,
                                float _Complex* u1, int ldu1,
                                float _Complex* u2, int ldu2,
                                float _Complex* v1t, int ldv1t,
                                float _Complex* v2t, int ldv2t,
                                float _Complex* work, int lwork,
                                float* rwork, int lrwork,
                                int* iwork );
int LAPACKE_dbbcsd( int matrix_order, char jobu1, char jobu2,
                           char jobv1t, char jobv2t, char trans, int m,
                           int p, int q, double* theta,
                           double* phi, double* u1, int ldu1, double* u2,
                           int ldu2, double* v1t, int ldv1t,
                           double* v2t, int ldv2t, double* b11d,
                           double* b11e, double* b12d, double* b12e,
                           double* b21d, double* b21e, double* b22d,
                           double* b22e );
int LAPACKE_dbbcsd_work( int matrix_order, char jobu1, char jobu2,
                                char jobv1t, char jobv2t, char trans,
                                int m, int p, int q,
                                double* theta, double* phi, double* u1,
                                int ldu1, double* u2, int ldu2,
                                double* v1t, int ldv1t, double* v2t,
                                int ldv2t, double* b11d, double* b11e,
                                double* b12d, double* b12e, double* b21d,
                                double* b21e, double* b22d, double* b22e,
                                double* work, int lwork );
int LAPACKE_dorbdb( int matrix_order, char trans, char signs,
                           int m, int p, int q,
                           double* x11, int ldx11, double* x12,
                           int ldx12, double* x21, int ldx21,
                           double* x22, int ldx22, double* theta,
                           double* phi, double* taup1, double* taup2,
                           double* tauq1, double* tauq2 );
int LAPACKE_dorbdb_work( int matrix_order, char trans, char signs,
                                int m, int p, int q,
                                double* x11, int ldx11, double* x12,
                                int ldx12, double* x21, int ldx21,
                                double* x22, int ldx22, double* theta,
                                double* phi, double* taup1, double* taup2,
                                double* tauq1, double* tauq2, double* work,
                                int lwork );
int LAPACKE_dorcsd( int matrix_order, char jobu1, char jobu2,
                           char jobv1t, char jobv2t, char trans, char signs,
                           int m, int p, int q,
                           double* x11, int ldx11, double* x12,
                           int ldx12, double* x21, int ldx21,
                           double* x22, int ldx22, double* theta,
                           double* u1, int ldu1, double* u2,
                           int ldu2, double* v1t, int ldv1t,
                           double* v2t, int ldv2t );
int LAPACKE_dorcsd_work( int matrix_order, char jobu1, char jobu2,
                                char jobv1t, char jobv2t, char trans,
                                char signs, int m, int p,
                                int q, double* x11, int ldx11,
                                double* x12, int ldx12, double* x21,
                                int ldx21, double* x22, int ldx22,
                                double* theta, double* u1, int ldu1,
                                double* u2, int ldu2, double* v1t,
                                int ldv1t, double* v2t, int ldv2t,
                                double* work, int lwork,
                                int* iwork );
int LAPACKE_dsyconv( int matrix_order, char uplo, char way, int n,
                            double* a, int lda, const int* ipiv );
int LAPACKE_dsyconv_work( int matrix_order, char uplo, char way,
                                 int n, double* a, int lda,
                                 const int* ipiv, double* work );
int LAPACKE_dsyswapr( int matrix_order, char uplo, int n,
                             double* a, int i1, int i2 );
int LAPACKE_dsyswapr_work( int matrix_order, char uplo, int n,
                                  double* a, int i1, int i2 );
int LAPACKE_dsytri2( int matrix_order, char uplo, int n,
                            double* a, int lda, const int* ipiv );
int LAPACKE_dsytri2_work( int matrix_order, char uplo, int n,
                                 double* a, int lda,
                                 const int* ipiv,
                                 double _Complex* work, int lwork );
int LAPACKE_dsytri2x( int matrix_order, char uplo, int n,
                             double* a, int lda, const int* ipiv,
                             int nb );
int LAPACKE_dsytri2x_work( int matrix_order, char uplo, int n,
                                  double* a, int lda,
                                  const int* ipiv, double* work,
                                  int nb );
int LAPACKE_dsytrs2( int matrix_order, char uplo, int n,
                            int nrhs, const double* a, int lda,
                            const int* ipiv, double* b, int ldb );
int LAPACKE_dsytrs2_work( int matrix_order, char uplo, int n,
                                 int nrhs, const double* a,
                                 int lda, const int* ipiv,
                                 double* b, int ldb, double* work );
int LAPACKE_sbbcsd( int matrix_order, char jobu1, char jobu2,
                           char jobv1t, char jobv2t, char trans, int m,
                           int p, int q, float* theta, float* phi,
                           float* u1, int ldu1, float* u2,
                           int ldu2, float* v1t, int ldv1t,
                           float* v2t, int ldv2t, float* b11d,
                           float* b11e, float* b12d, float* b12e, float* b21d,
                           float* b21e, float* b22d, float* b22e );
int LAPACKE_sbbcsd_work( int matrix_order, char jobu1, char jobu2,
                                char jobv1t, char jobv2t, char trans,
                                int m, int p, int q,
                                float* theta, float* phi, float* u1,
                                int ldu1, float* u2, int ldu2,
                                float* v1t, int ldv1t, float* v2t,
                                int ldv2t, float* b11d, float* b11e,
                                float* b12d, float* b12e, float* b21d,
                                float* b21e, float* b22d, float* b22e,
                                float* work, int lwork );
int LAPACKE_sorbdb( int matrix_order, char trans, char signs,
                           int m, int p, int q, float* x11,
                           int ldx11, float* x12, int ldx12,
                           float* x21, int ldx21, float* x22,
                           int ldx22, float* theta, float* phi,
                           float* taup1, float* taup2, float* tauq1,
                           float* tauq2 );
int LAPACKE_sorbdb_work( int matrix_order, char trans, char signs,
                                int m, int p, int q,
                                float* x11, int ldx11, float* x12,
                                int ldx12, float* x21, int ldx21,
                                float* x22, int ldx22, float* theta,
                                float* phi, float* taup1, float* taup2,
                                float* tauq1, float* tauq2, float* work,
                                int lwork );
int LAPACKE_sorcsd( int matrix_order, char jobu1, char jobu2,
                           char jobv1t, char jobv2t, char trans, char signs,
                           int m, int p, int q, float* x11,
                           int ldx11, float* x12, int ldx12,
                           float* x21, int ldx21, float* x22,
                           int ldx22, float* theta, float* u1,
                           int ldu1, float* u2, int ldu2,
                           float* v1t, int ldv1t, float* v2t,
                           int ldv2t );
int LAPACKE_sorcsd_work( int matrix_order, char jobu1, char jobu2,
                                char jobv1t, char jobv2t, char trans,
                                char signs, int m, int p,
                                int q, float* x11, int ldx11,
                                float* x12, int ldx12, float* x21,
                                int ldx21, float* x22, int ldx22,
                                float* theta, float* u1, int ldu1,
                                float* u2, int ldu2, float* v1t,
                                int ldv1t, float* v2t, int ldv2t,
                                float* work, int lwork,
                                int* iwork );
int LAPACKE_ssyconv( int matrix_order, char uplo, char way, int n,
                            float* a, int lda, const int* ipiv );
int LAPACKE_ssyconv_work( int matrix_order, char uplo, char way,
                                 int n, float* a, int lda,
                                 const int* ipiv, float* work );
int LAPACKE_ssyswapr( int matrix_order, char uplo, int n,
                             float* a, int i1, int i2 );
int LAPACKE_ssyswapr_work( int matrix_order, char uplo, int n,
                                  float* a, int i1, int i2 );
int LAPACKE_ssytri2( int matrix_order, char uplo, int n, float* a,
                            int lda, const int* ipiv );
int LAPACKE_ssytri2_work( int matrix_order, char uplo, int n,
                                 float* a, int lda,
                                 const int* ipiv,
                                 float _Complex* work, int lwork );
int LAPACKE_ssytri2x( int matrix_order, char uplo, int n,
                             float* a, int lda, const int* ipiv,
                             int nb );
int LAPACKE_ssytri2x_work( int matrix_order, char uplo, int n,
                                  float* a, int lda,
                                  const int* ipiv, float* work,
                                  int nb );
int LAPACKE_ssytrs2( int matrix_order, char uplo, int n,
                            int nrhs, const float* a, int lda,
                            const int* ipiv, float* b, int ldb );
int LAPACKE_ssytrs2_work( int matrix_order, char uplo, int n,
                                 int nrhs, const float* a,
                                 int lda, const int* ipiv,
                                 float* b, int ldb, float* work );
int LAPACKE_zbbcsd( int matrix_order, char jobu1, char jobu2,
                           char jobv1t, char jobv2t, char trans, int m,
                           int p, int q, double* theta,
                           double* phi, double _Complex* u1,
                           int ldu1, double _Complex* u2,
                           int ldu2, double _Complex* v1t,
                           int ldv1t, double _Complex* v2t,
                           int ldv2t, double* b11d, double* b11e,
                           double* b12d, double* b12e, double* b21d,
                           double* b21e, double* b22d, double* b22e );
int LAPACKE_zbbcsd_work( int matrix_order, char jobu1, char jobu2,
                                char jobv1t, char jobv2t, char trans,
                                int m, int p, int q,
                                double* theta, double* phi,
                                double _Complex* u1, int ldu1,
                                double _Complex* u2, int ldu2,
                                double _Complex* v1t, int ldv1t,
                                double _Complex* v2t, int ldv2t,
                                double* b11d, double* b11e, double* b12d,
                                double* b12e, double* b21d, double* b21e,
                                double* b22d, double* b22e, double* rwork,
                                int lrwork );
int LAPACKE_zheswapr( int matrix_order, char uplo, int n,
                             double _Complex* a, int i1,
                             int i2 );
int LAPACKE_zheswapr_work( int matrix_order, char uplo, int n,
                                  double _Complex* a, int i1,
                                  int i2 );
int LAPACKE_zhetri2( int matrix_order, char uplo, int n,
                            double _Complex* a, int lda,
                            const int* ipiv );
int LAPACKE_zhetri2_work( int matrix_order, char uplo, int n,
                                 double _Complex* a, int lda,
                                 const int* ipiv,
                                 double _Complex* work, int lwork );
int LAPACKE_zhetri2x( int matrix_order, char uplo, int n,
                             double _Complex* a, int lda,
                             const int* ipiv, int nb );
int LAPACKE_zhetri2x_work( int matrix_order, char uplo, int n,
                                  double _Complex* a, int lda,
                                  const int* ipiv,
                                  double _Complex* work, int nb );
int LAPACKE_zhetrs2( int matrix_order, char uplo, int n,
                            int nrhs, const double _Complex* a,
                            int lda, const int* ipiv,
                            double _Complex* b, int ldb );
int LAPACKE_zhetrs2_work( int matrix_order, char uplo, int n,
                                 int nrhs, const double _Complex* a,
                                 int lda, const int* ipiv,
                                 double _Complex* b, int ldb,
                                 double _Complex* work );
int LAPACKE_zsyconv( int matrix_order, char uplo, char way, int n,
                            double _Complex* a, int lda,
                            const int* ipiv );
int LAPACKE_zsyconv_work( int matrix_order, char uplo, char way,
                                 int n, double _Complex* a,
                                 int lda, const int* ipiv,
                                 double _Complex* work );
int LAPACKE_zsyswapr( int matrix_order, char uplo, int n,
                             double _Complex* a, int i1,
                             int i2 );
int LAPACKE_zsyswapr_work( int matrix_order, char uplo, int n,
                                  double _Complex* a, int i1,
                                  int i2 );
int LAPACKE_zsytri2( int matrix_order, char uplo, int n,
                            double _Complex* a, int lda,
                            const int* ipiv );
int LAPACKE_zsytri2_work( int matrix_order, char uplo, int n,
                                 double _Complex* a, int lda,
                                 const int* ipiv,
                                 double _Complex* work, int lwork );
int LAPACKE_zsytri2x( int matrix_order, char uplo, int n,
                             double _Complex* a, int lda,
                             const int* ipiv, int nb );
int LAPACKE_zsytri2x_work( int matrix_order, char uplo, int n,
                                  double _Complex* a, int lda,
                                  const int* ipiv,
                                  double _Complex* work, int nb );
int LAPACKE_zsytrs2( int matrix_order, char uplo, int n,
                            int nrhs, const double _Complex* a,
                            int lda, const int* ipiv,
                            double _Complex* b, int ldb );
int LAPACKE_zsytrs2_work( int matrix_order, char uplo, int n,
                                 int nrhs, const double _Complex* a,
                                 int lda, const int* ipiv,
                                 double _Complex* b, int ldb,
                                 double _Complex* work );
int LAPACKE_zunbdb( int matrix_order, char trans, char signs,
                           int m, int p, int q,
                           double _Complex* x11, int ldx11,
                           double _Complex* x12, int ldx12,
                           double _Complex* x21, int ldx21,
                           double _Complex* x22, int ldx22,
                           double* theta, double* phi,
                           double _Complex* taup1,
                           double _Complex* taup2,
                           double _Complex* tauq1,
                           double _Complex* tauq2 );
int LAPACKE_zunbdb_work( int matrix_order, char trans, char signs,
                                int m, int p, int q,
                                double _Complex* x11, int ldx11,
                                double _Complex* x12, int ldx12,
                                double _Complex* x21, int ldx21,
                                double _Complex* x22, int ldx22,
                                double* theta, double* phi,
                                double _Complex* taup1,
                                double _Complex* taup2,
                                double _Complex* tauq1,
                                double _Complex* tauq2,
                                double _Complex* work, int lwork );
int LAPACKE_zuncsd( int matrix_order, char jobu1, char jobu2,
                           char jobv1t, char jobv2t, char trans, char signs,
                           int m, int p, int q,
                           double _Complex* x11, int ldx11,
                           double _Complex* x12, int ldx12,
                           double _Complex* x21, int ldx21,
                           double _Complex* x22, int ldx22,
                           double* theta, double _Complex* u1,
                           int ldu1, double _Complex* u2,
                           int ldu2, double _Complex* v1t,
                           int ldv1t, double _Complex* v2t,
                           int ldv2t );
int LAPACKE_zuncsd_work( int matrix_order, char jobu1, char jobu2,
                                char jobv1t, char jobv2t, char trans,
                                char signs, int m, int p,
                                int q, double _Complex* x11,
                                int ldx11, double _Complex* x12,
                                int ldx12, double _Complex* x21,
                                int ldx21, double _Complex* x22,
                                int ldx22, double* theta,
                                double _Complex* u1, int ldu1,
                                double _Complex* u2, int ldu2,
                                double _Complex* v1t, int ldv1t,
                                double _Complex* v2t, int ldv2t,
                                double _Complex* work, int lwork,
                                double* rwork, int lrwork,
                                int* iwork );

int LAPACKE_sgemqrt( int matrix_order, char side, char trans,
                            int m, int n, int k,
                            int nb, const float* v, int ldv,
                            const float* t, int ldt, float* c,
                            int ldc );
int LAPACKE_dgemqrt( int matrix_order, char side, char trans,
                            int m, int n, int k,
                            int nb, const double* v, int ldv,
                            const double* t, int ldt, double* c,
                            int ldc );
int LAPACKE_cgemqrt( int matrix_order, char side, char trans,
                            int m, int n, int k,
                            int nb, const float _Complex* v,
                            int ldv, const float _Complex* t,
                            int ldt, float _Complex* c,
                            int ldc );
int LAPACKE_zgemqrt( int matrix_order, char side, char trans,
                            int m, int n, int k,
                            int nb, const double _Complex* v,
                            int ldv, const double _Complex* t,
                            int ldt, double _Complex* c,
                            int ldc );

int LAPACKE_sgeqrt( int matrix_order, int m, int n,
                           int nb, float* a, int lda, float* t,
                           int ldt );
int LAPACKE_dgeqrt( int matrix_order, int m, int n,
                           int nb, double* a, int lda, double* t,
                           int ldt );
int LAPACKE_cgeqrt( int matrix_order, int m, int n,
                           int nb, float _Complex* a,
                           int lda, float _Complex* t,
                           int ldt );
int LAPACKE_zgeqrt( int matrix_order, int m, int n,
                           int nb, double _Complex* a,
                           int lda, double _Complex* t,
                           int ldt );

int LAPACKE_sgeqrt2( int matrix_order, int m, int n,
                            float* a, int lda, float* t,
                            int ldt );
int LAPACKE_dgeqrt2( int matrix_order, int m, int n,
                            double* a, int lda, double* t,
                            int ldt );
int LAPACKE_cgeqrt2( int matrix_order, int m, int n,
                            float _Complex* a, int lda,
                            float _Complex* t, int ldt );
int LAPACKE_zgeqrt2( int matrix_order, int m, int n,
                            double _Complex* a, int lda,
                            double _Complex* t, int ldt );

int LAPACKE_sgeqrt3( int matrix_order, int m, int n,
                            float* a, int lda, float* t,
                            int ldt );
int LAPACKE_dgeqrt3( int matrix_order, int m, int n,
                            double* a, int lda, double* t,
                            int ldt );
int LAPACKE_cgeqrt3( int matrix_order, int m, int n,
                            float _Complex* a, int lda,
                            float _Complex* t, int ldt );
int LAPACKE_zgeqrt3( int matrix_order, int m, int n,
                            double _Complex* a, int lda,
                            double _Complex* t, int ldt );

int LAPACKE_stpmqrt( int matrix_order, char side, char trans,
                            int m, int n, int k,
                            int l, int nb, const float* v,
                            int ldv, const float* t, int ldt,
                            float* a, int lda, float* b,
                            int ldb );
int LAPACKE_dtpmqrt( int matrix_order, char side, char trans,
                            int m, int n, int k,
                            int l, int nb, const double* v,
                            int ldv, const double* t, int ldt,
                            double* a, int lda, double* b,
                            int ldb );
int LAPACKE_ctpmqrt( int matrix_order, char side, char trans,
                            int m, int n, int k,
                            int l, int nb,
                            const float _Complex* v, int ldv,
                            const float _Complex* t, int ldt,
                            float _Complex* a, int lda,
                            float _Complex* b, int ldb );
int LAPACKE_ztpmqrt( int matrix_order, char side, char trans,
                            int m, int n, int k,
                            int l, int nb,
                            const double _Complex* v, int ldv,
                            const double _Complex* t, int ldt,
                            double _Complex* a, int lda,
                            double _Complex* b, int ldb );

int LAPACKE_dtpqrt( int matrix_order, int m, int n,
                           int l, int nb, double* a,
                           int lda, double* b, int ldb, double* t,
                           int ldt );
int LAPACKE_ctpqrt( int matrix_order, int m, int n,
                           int l, int nb,
                           float _Complex* a, int lda,
                           float _Complex* b, int ldb,
                           float _Complex* t, int ldt );
int LAPACKE_ztpqrt( int matrix_order, int m, int n,
                           int l, int nb,
                           double _Complex* a, int lda,
                           double _Complex* b, int ldb,
                           double _Complex* t, int ldt );

int LAPACKE_stpqrt2( int matrix_order,
                            int m, int n, int l,
                            float* a, int lda,
                            float* b, int ldb,
                            float* t, int ldt );
int LAPACKE_dtpqrt2( int matrix_order,
                            int m, int n, int l,
                            double* a, int lda,
                            double* b, int ldb,
                            double* t, int ldt );
int LAPACKE_ctpqrt2( int matrix_order,
                            int m, int n, int l,
                            float _Complex* a, int lda,
                            float _Complex* b, int ldb,
                            float _Complex* t, int ldt );
int LAPACKE_ztpqrt2( int matrix_order,
                            int m, int n, int l,
                            double _Complex* a, int lda,
                            double _Complex* b, int ldb,
                            double _Complex* t, int ldt );

int LAPACKE_stprfb( int matrix_order, char side, char trans, char direct,
                           char storev, int m, int n,
                           int k, int l, const float* v,
                           int ldv, const float* t, int ldt,
                           float* a, int lda, float* b, int ldb );
int LAPACKE_dtprfb( int matrix_order, char side, char trans, char direct,
                           char storev, int m, int n,
                           int k, int l, const double* v,
                           int ldv, const double* t, int ldt,
                           double* a, int lda, double* b, int ldb );
int LAPACKE_ctprfb( int matrix_order, char side, char trans, char direct,
                           char storev, int m, int n,
                           int k, int l,
                           const float _Complex* v, int ldv,
                           const float _Complex* t, int ldt,
                           float _Complex* a, int lda,
                           float _Complex* b, int ldb );
int LAPACKE_ztprfb( int matrix_order, char side, char trans, char direct,
                           char storev, int m, int n,
                           int k, int l,
                           const double _Complex* v, int ldv,
                           const double _Complex* t, int ldt,
                           double _Complex* a, int lda,
                           double _Complex* b, int ldb );

int LAPACKE_sgemqrt_work( int matrix_order, char side, char trans,
                                 int m, int n, int k,
                                 int nb, const float* v, int ldv,
                                 const float* t, int ldt, float* c,
                                 int ldc, float* work );
int LAPACKE_dgemqrt_work( int matrix_order, char side, char trans,
                                 int m, int n, int k,
                                 int nb, const double* v, int ldv,
                                 const double* t, int ldt, double* c,
                                 int ldc, double* work );
int LAPACKE_cgemqrt_work( int matrix_order, char side, char trans,
                                 int m, int n, int k,
                                 int nb, const float _Complex* v,
                                 int ldv, const float _Complex* t,
                                 int ldt, float _Complex* c,
                                 int ldc, float _Complex* work );
int LAPACKE_zgemqrt_work( int matrix_order, char side, char trans,
                                 int m, int n, int k,
                                 int nb, const double _Complex* v,
                                 int ldv, const double _Complex* t,
                                 int ldt, double _Complex* c,
                                 int ldc, double _Complex* work );

int LAPACKE_sgeqrt_work( int matrix_order, int m, int n,
                                int nb, float* a, int lda,
                                float* t, int ldt, float* work );
int LAPACKE_dgeqrt_work( int matrix_order, int m, int n,
                                int nb, double* a, int lda,
                                double* t, int ldt, double* work );
int LAPACKE_cgeqrt_work( int matrix_order, int m, int n,
                                int nb, float _Complex* a,
                                int lda, float _Complex* t,
                                int ldt, float _Complex* work );
int LAPACKE_zgeqrt_work( int matrix_order, int m, int n,
                                int nb, double _Complex* a,
                                int lda, double _Complex* t,
                                int ldt, double _Complex* work );

int LAPACKE_sgeqrt2_work( int matrix_order, int m, int n,
                                 float* a, int lda, float* t,
                                 int ldt );
int LAPACKE_dgeqrt2_work( int matrix_order, int m, int n,
                                 double* a, int lda, double* t,
                                 int ldt );
int LAPACKE_cgeqrt2_work( int matrix_order, int m, int n,
                                 float _Complex* a, int lda,
                                 float _Complex* t, int ldt );
int LAPACKE_zgeqrt2_work( int matrix_order, int m, int n,
                                 double _Complex* a, int lda,
                                 double _Complex* t, int ldt );

int LAPACKE_sgeqrt3_work( int matrix_order, int m, int n,
                                 float* a, int lda, float* t,
                                 int ldt );
int LAPACKE_dgeqrt3_work( int matrix_order, int m, int n,
                                 double* a, int lda, double* t,
                                 int ldt );
int LAPACKE_cgeqrt3_work( int matrix_order, int m, int n,
                                 float _Complex* a, int lda,
                                 float _Complex* t, int ldt );
int LAPACKE_zgeqrt3_work( int matrix_order, int m, int n,
                                 double _Complex* a, int lda,
                                 double _Complex* t, int ldt );

int LAPACKE_stpmqrt_work( int matrix_order, char side, char trans,
                                 int m, int n, int k,
                                 int l, int nb, const float* v,
                                 int ldv, const float* t, int ldt,
                                 float* a, int lda, float* b,
                                 int ldb, float* work );
int LAPACKE_dtpmqrt_work( int matrix_order, char side, char trans,
                                 int m, int n, int k,
                                 int l, int nb, const double* v,
                                 int ldv, const double* t,
                                 int ldt, double* a, int lda,
                                 double* b, int ldb, double* work );
int LAPACKE_ctpmqrt_work( int matrix_order, char side, char trans,
                                 int m, int n, int k,
                                 int l, int nb,
                                 const float _Complex* v, int ldv,
                                 const float _Complex* t, int ldt,
                                 float _Complex* a, int lda,
                                 float _Complex* b, int ldb,
                                 float _Complex* work );
int LAPACKE_ztpmqrt_work( int matrix_order, char side, char trans,
                                 int m, int n, int k,
                                 int l, int nb,
                                 const double _Complex* v, int ldv,
                                 const double _Complex* t, int ldt,
                                 double _Complex* a, int lda,
                                 double _Complex* b, int ldb,
                                 double _Complex* work );

int LAPACKE_dtpqrt_work( int matrix_order, int m, int n,
                                int l, int nb, double* a,
                                int lda, double* b, int ldb,
                                double* t, int ldt, double* work );
int LAPACKE_ctpqrt_work( int matrix_order, int m, int n,
                                int l, int nb,
                                float _Complex* a, int lda,
                                float _Complex* b, int ldb,
                                float _Complex* t, int ldt,
                                float _Complex* work );
int LAPACKE_ztpqrt_work( int matrix_order, int m, int n,
                                int l, int nb,
                                double _Complex* a, int lda,
                                double _Complex* b, int ldb,
                                double _Complex* t, int ldt,
                                double _Complex* work );

int LAPACKE_stpqrt2_work( int matrix_order,
                                 int m, int n, int l,
                                 float* a, int lda,
                                 float* b, int ldb,
                                 float* t, int ldt );
int LAPACKE_dtpqrt2_work( int matrix_order,
                                 int m, int n, int l,
                                 double* a, int lda,
                                 double* b, int ldb,
                                 double* t, int ldt );
int LAPACKE_ctpqrt2_work( int matrix_order,
                                 int m, int n, int l,
                                 float _Complex* a, int lda,
                                 float _Complex* b, int ldb,
                                 float _Complex* t, int ldt );
int LAPACKE_ztpqrt2_work( int matrix_order,
                                 int m, int n, int l,
                                 double _Complex* a, int lda,
                                 double _Complex* b, int ldb,
                                 double _Complex* t, int ldt );

int LAPACKE_stprfb_work( int matrix_order, char side, char trans,
                                char direct, char storev, int m,
                                int n, int k, int l,
                                const float* v, int ldv, const float* t,
                                int ldt, float* a, int lda,
                                float* b, int ldb, const float* work,
                                int ldwork );
int LAPACKE_dtprfb_work( int matrix_order, char side, char trans,
                                char direct, char storev, int m,
                                int n, int k, int l,
                                const double* v, int ldv,
                                const double* t, int ldt, double* a,
                                int lda, double* b, int ldb,
                                const double* work, int ldwork );
int LAPACKE_ctprfb_work( int matrix_order, char side, char trans,
                                char direct, char storev, int m,
                                int n, int k, int l,
                                const float _Complex* v, int ldv,
                                const float _Complex* t, int ldt,
                                float _Complex* a, int lda,
                                float _Complex* b, int ldb,
                                const float* work, int ldwork );
int LAPACKE_ztprfb_work( int matrix_order, char side, char trans,
                                char direct, char storev, int m,
                                int n, int k, int l,
                                const double _Complex* v, int ldv,
                                const double _Complex* t, int ldt,
                                double _Complex* a, int lda,
                                double _Complex* b, int ldb,
                                const double* work, int ldwork );

int LAPACKE_ssysv_rook( int matrix_order, char uplo, int n,
                               int nrhs, float* a, int lda,
                               int* ipiv, float* b, int ldb );
int LAPACKE_dsysv_rook( int matrix_order, char uplo, int n,
                               int nrhs, double* a, int lda,
                               int* ipiv, double* b, int ldb );
int LAPACKE_csysv_rook( int matrix_order, char uplo, int n,
                               int nrhs, float _Complex* a,
                               int lda, int* ipiv,
                               float _Complex* b, int ldb );
int LAPACKE_zsysv_rook( int matrix_order, char uplo, int n,
                               int nrhs, double _Complex* a,
                               int lda, int* ipiv,
                               double _Complex* b, int ldb );
int LAPACKE_csyr( int matrix_order, char uplo, int n,
                             float _Complex alpha,
                             const float _Complex* x, int incx,
                             float _Complex* a, int lda );
int LAPACKE_zsyr( int matrix_order, char uplo, int n,
                             double _Complex alpha,
                             const double _Complex* x, int incx,
                             double _Complex* a, int lda );

int LAPACKE_ssysv_rook_work( int matrix_order, char uplo, int n,
                                    int nrhs, float* a, int lda,
                                    int* ipiv, float* b, int ldb,
                                    float* work, int lwork );
int LAPACKE_dsysv_rook_work( int matrix_order, char uplo, int n,
                                    int nrhs, double* a, int lda,
                                    int* ipiv, double* b, int ldb,
                                    double* work, int lwork );
int LAPACKE_csysv_rook_work( int matrix_order, char uplo, int n,
                                    int nrhs, float _Complex* a,
                                    int lda, int* ipiv,
                                    float _Complex* b, int ldb,
                                    float _Complex* work,
                                    int lwork );
int LAPACKE_zsysv_rook_work( int matrix_order, char uplo, int n,
                                    int nrhs, double _Complex* a,
                                    int lda, int* ipiv,
                                    double _Complex* b, int ldb,
                                    double _Complex* work,
                                    int lwork );
int LAPACKE_csyr_work( int matrix_order, char uplo, int n,
                                  float _Complex alpha,
                                  const float _Complex* x,
                                  int incx, float _Complex* a,
                                  int lda );
int LAPACKE_zsyr_work( int matrix_order, char uplo, int n,
                                  double _Complex alpha,
                                  const double _Complex* x,
                                  int incx, double _Complex* a,
                                  int lda );
void LAPACKE_ilaver( const int* vers_major,
                     const int* vers_minor,
                     const int* vers_patch );
# 11759 "/usr/include/lapacke.h" 3 4
void sgetrf_( int* m, int* n, float* a, int* lda,
                    int* ipiv, int *info );
void dgetrf_( int* m, int* n, double* a, int* lda,
                    int* ipiv, int *info );
void cgetrf_( int* m, int* n, float _Complex* a,
                    int* lda, int* ipiv, int *info );
void zgetrf_( int* m, int* n, double _Complex* a,
                    int* lda, int* ipiv, int *info );
void sgbtrf_( int* m, int* n, int* kl,
                    int* ku, float* ab, int* ldab,
                    int* ipiv, int *info );
void dgbtrf_( int* m, int* n, int* kl,
                    int* ku, double* ab, int* ldab,
                    int* ipiv, int *info );
void cgbtrf_( int* m, int* n, int* kl,
                    int* ku, float _Complex* ab, int* ldab,
                    int* ipiv, int *info );
void zgbtrf_( int* m, int* n, int* kl,
                    int* ku, double _Complex* ab, int* ldab,
                    int* ipiv, int *info );
void sgttrf_( int* n, float* dl, float* d, float* du, float* du2,
                    int* ipiv, int *info );
void dgttrf_( int* n, double* dl, double* d, double* du,
                    double* du2, int* ipiv, int *info );
void cgttrf_( int* n, float _Complex* dl,
                    float _Complex* d, float _Complex* du,
                    float _Complex* du2, int* ipiv,
                    int *info );
void zgttrf_( int* n, double _Complex* dl,
                    double _Complex* d, double _Complex* du,
                    double _Complex* du2, int* ipiv,
                    int *info );
void spotrf_( char* uplo, int* n, float* a, int* lda,
                    int *info );
void dpotrf_( char* uplo, int* n, double* a, int* lda,
                    int *info );
void cpotrf_( char* uplo, int* n, float _Complex* a,
                    int* lda, int *info );
void zpotrf_( char* uplo, int* n, double _Complex* a,
                    int* lda, int *info );
void dpstrf_( char* uplo, int* n, double* a, int* lda,
                    int* piv, int* rank, double* tol,
                    double* work, int *info );
void spstrf_( char* uplo, int* n, float* a, int* lda,
                    int* piv, int* rank, float* tol, float* work,
                    int *info );
void zpstrf_( char* uplo, int* n, double _Complex* a,
                    int* lda, int* piv, int* rank,
                    double* tol, double* work, int *info );
void cpstrf_( char* uplo, int* n, float _Complex* a,
                    int* lda, int* piv, int* rank,
                    float* tol, float* work, int *info );
void dpftrf_( char* transr, char* uplo, int* n, double* a,
                    int *info );
void spftrf_( char* transr, char* uplo, int* n, float* a,
                    int *info );
void zpftrf_( char* transr, char* uplo, int* n,
                    double _Complex* a, int *info );
void cpftrf_( char* transr, char* uplo, int* n,
                    float _Complex* a, int *info );
void spptrf_( char* uplo, int* n, float* ap, int *info );
void dpptrf_( char* uplo, int* n, double* ap, int *info );
void cpptrf_( char* uplo, int* n, float _Complex* ap,
                    int *info );
void zpptrf_( char* uplo, int* n, double _Complex* ap,
                    int *info );
void spbtrf_( char* uplo, int* n, int* kd, float* ab,
                    int* ldab, int *info );
void dpbtrf_( char* uplo, int* n, int* kd, double* ab,
                    int* ldab, int *info );
void cpbtrf_( char* uplo, int* n, int* kd,
                    float _Complex* ab, int* ldab,
                    int *info );
void zpbtrf_( char* uplo, int* n, int* kd,
                    double _Complex* ab, int* ldab,
                    int *info );
void spttrf_( int* n, float* d, float* e, int *info );
void dpttrf_( int* n, double* d, double* e, int *info );
void cpttrf_( int* n, float* d, float _Complex* e,
                    int *info );
void zpttrf_( int* n, double* d, double _Complex* e,
                    int *info );
void ssytrf_( char* uplo, int* n, float* a, int* lda,
                    int* ipiv, float* work, int* lwork,
                    int *info );
void dsytrf_( char* uplo, int* n, double* a, int* lda,
                    int* ipiv, double* work, int* lwork,
                    int *info );
void csytrf_( char* uplo, int* n, float _Complex* a,
                    int* lda, int* ipiv,
                    float _Complex* work, int* lwork,
                    int *info );
void zsytrf_( char* uplo, int* n, double _Complex* a,
                    int* lda, int* ipiv,
                    double _Complex* work, int* lwork,
                    int *info );
void chetrf_( char* uplo, int* n, float _Complex* a,
                    int* lda, int* ipiv,
                    float _Complex* work, int* lwork,
                    int *info );
void zhetrf_( char* uplo, int* n, double _Complex* a,
                    int* lda, int* ipiv,
                    double _Complex* work, int* lwork,
                    int *info );
void ssptrf_( char* uplo, int* n, float* ap, int* ipiv,
                    int *info );
void dsptrf_( char* uplo, int* n, double* ap, int* ipiv,
                    int *info );
void csptrf_( char* uplo, int* n, float _Complex* ap,
                    int* ipiv, int *info );
void zsptrf_( char* uplo, int* n, double _Complex* ap,
                    int* ipiv, int *info );
void chptrf_( char* uplo, int* n, float _Complex* ap,
                    int* ipiv, int *info );
void zhptrf_( char* uplo, int* n, double _Complex* ap,
                    int* ipiv, int *info );
void sgetrs_( char* trans, int* n, int* nrhs,
                    const float* a, int* lda, const int* ipiv,
                    float* b, int* ldb, int *info );
void dgetrs_( char* trans, int* n, int* nrhs,
                    const double* a, int* lda, const int* ipiv,
                    double* b, int* ldb, int *info );
void cgetrs_( char* trans, int* n, int* nrhs,
                    const float _Complex* a, int* lda,
                    const int* ipiv, float _Complex* b,
                    int* ldb, int *info );
void zgetrs_( char* trans, int* n, int* nrhs,
                    const double _Complex* a, int* lda,
                    const int* ipiv, double _Complex* b,
                    int* ldb, int *info );
void sgbtrs_( char* trans, int* n, int* kl, int* ku,
                    int* nrhs, const float* ab, int* ldab,
                    const int* ipiv, float* b, int* ldb,
                    int *info );
void dgbtrs_( char* trans, int* n, int* kl, int* ku,
                    int* nrhs, const double* ab, int* ldab,
                    const int* ipiv, double* b, int* ldb,
                    int *info );
void cgbtrs_( char* trans, int* n, int* kl, int* ku,
                    int* nrhs, const float _Complex* ab,
                    int* ldab, const int* ipiv,
                    float _Complex* b, int* ldb,
                    int *info );
void zgbtrs_( char* trans, int* n, int* kl, int* ku,
                    int* nrhs, const double _Complex* ab,
                    int* ldab, const int* ipiv,
                    double _Complex* b, int* ldb,
                    int *info );
void sgttrs_( char* trans, int* n, int* nrhs,
                    const float* dl, const float* d, const float* du,
                    const float* du2, const int* ipiv, float* b,
                    int* ldb, int *info );
void dgttrs_( char* trans, int* n, int* nrhs,
                    const double* dl, const double* d, const double* du,
                    const double* du2, const int* ipiv, double* b,
                    int* ldb, int *info );
void cgttrs_( char* trans, int* n, int* nrhs,
                    const float _Complex* dl,
                    const float _Complex* d,
                    const float _Complex* du,
                    const float _Complex* du2, const int* ipiv,
                    float _Complex* b, int* ldb,
                    int *info );
void zgttrs_( char* trans, int* n, int* nrhs,
                    const double _Complex* dl,
                    const double _Complex* d,
                    const double _Complex* du,
                    const double _Complex* du2, const int* ipiv,
                    double _Complex* b, int* ldb,
                    int *info );
void spotrs_( char* uplo, int* n, int* nrhs, const float* a,
                    int* lda, float* b, int* ldb,
                    int *info );
void dpotrs_( char* uplo, int* n, int* nrhs,
                    const double* a, int* lda, double* b,
                    int* ldb, int *info );
void cpotrs_( char* uplo, int* n, int* nrhs,
                    const float _Complex* a, int* lda,
                    float _Complex* b, int* ldb,
                    int *info );
void zpotrs_( char* uplo, int* n, int* nrhs,
                    const double _Complex* a, int* lda,
                    double _Complex* b, int* ldb,
                    int *info );
void dpftrs_( char* transr, char* uplo, int* n, int* nrhs,
                    const double* a, double* b, int* ldb,
                    int *info );
void spftrs_( char* transr, char* uplo, int* n, int* nrhs,
                    const float* a, float* b, int* ldb,
                    int *info );
void zpftrs_( char* transr, char* uplo, int* n, int* nrhs,
                    const double _Complex* a, double _Complex* b,
                    int* ldb, int *info );
void cpftrs_( char* transr, char* uplo, int* n, int* nrhs,
                    const float _Complex* a, float _Complex* b,
                    int* ldb, int *info );
void spptrs_( char* uplo, int* n, int* nrhs,
                    const float* ap, float* b, int* ldb,
                    int *info );
void dpptrs_( char* uplo, int* n, int* nrhs,
                    const double* ap, double* b, int* ldb,
                    int *info );
void cpptrs_( char* uplo, int* n, int* nrhs,
                    const float _Complex* ap, float _Complex* b,
                    int* ldb, int *info );
void zpptrs_( char* uplo, int* n, int* nrhs,
                    const double _Complex* ap, double _Complex* b,
                    int* ldb, int *info );
void spbtrs_( char* uplo, int* n, int* kd, int* nrhs,
                    const float* ab, int* ldab, float* b,
                    int* ldb, int *info );
void dpbtrs_( char* uplo, int* n, int* kd, int* nrhs,
                    const double* ab, int* ldab, double* b,
                    int* ldb, int *info );
void cpbtrs_( char* uplo, int* n, int* kd, int* nrhs,
                    const float _Complex* ab, int* ldab,
                    float _Complex* b, int* ldb,
                    int *info );
void zpbtrs_( char* uplo, int* n, int* kd, int* nrhs,
                    const double _Complex* ab, int* ldab,
                    double _Complex* b, int* ldb,
                    int *info );
void spttrs_( int* n, int* nrhs, const float* d,
                    const float* e, float* b, int* ldb,
                    int *info );
void dpttrs_( int* n, int* nrhs, const double* d,
                    const double* e, double* b, int* ldb,
                    int *info );
void cpttrs_( char* uplo, int* n, int* nrhs, const float* d,
                    const float _Complex* e, float _Complex* b,
                    int* ldb, int *info );
void zpttrs_( char* uplo, int* n, int* nrhs,
                    const double* d, const double _Complex* e,
                    double _Complex* b, int* ldb,
                    int *info );
void ssytrs_( char* uplo, int* n, int* nrhs, const float* a,
                    int* lda, const int* ipiv, float* b,
                    int* ldb, int *info );
void dsytrs_( char* uplo, int* n, int* nrhs,
                    const double* a, int* lda, const int* ipiv,
                    double* b, int* ldb, int *info );
void csytrs_( char* uplo, int* n, int* nrhs,
                    const float _Complex* a, int* lda,
                    const int* ipiv, float _Complex* b,
                    int* ldb, int *info );
void zsytrs_( char* uplo, int* n, int* nrhs,
                    const double _Complex* a, int* lda,
                    const int* ipiv, double _Complex* b,
                    int* ldb, int *info );
void chetrs_( char* uplo, int* n, int* nrhs,
                    const float _Complex* a, int* lda,
                    const int* ipiv, float _Complex* b,
                    int* ldb, int *info );
void zhetrs_( char* uplo, int* n, int* nrhs,
                    const double _Complex* a, int* lda,
                    const int* ipiv, double _Complex* b,
                    int* ldb, int *info );
void ssptrs_( char* uplo, int* n, int* nrhs,
                    const float* ap, const int* ipiv, float* b,
                    int* ldb, int *info );
void dsptrs_( char* uplo, int* n, int* nrhs,
                    const double* ap, const int* ipiv, double* b,
                    int* ldb, int *info );
void csptrs_( char* uplo, int* n, int* nrhs,
                    const float _Complex* ap, const int* ipiv,
                    float _Complex* b, int* ldb,
                    int *info );
void zsptrs_( char* uplo, int* n, int* nrhs,
                    const double _Complex* ap, const int* ipiv,
                    double _Complex* b, int* ldb,
                    int *info );
void chptrs_( char* uplo, int* n, int* nrhs,
                    const float _Complex* ap, const int* ipiv,
                    float _Complex* b, int* ldb,
                    int *info );
void zhptrs_( char* uplo, int* n, int* nrhs,
                    const double _Complex* ap, const int* ipiv,
                    double _Complex* b, int* ldb,
                    int *info );
void strtrs_( char* uplo, char* trans, char* diag, int* n,
                    int* nrhs, const float* a, int* lda, float* b,
                    int* ldb, int *info );
void dtrtrs_( char* uplo, char* trans, char* diag, int* n,
                    int* nrhs, const double* a, int* lda,
                    double* b, int* ldb, int *info );
void ctrtrs_( char* uplo, char* trans, char* diag, int* n,
                    int* nrhs, const float _Complex* a,
                    int* lda, float _Complex* b, int* ldb,
                    int *info );
void ztrtrs_( char* uplo, char* trans, char* diag, int* n,
                    int* nrhs, const double _Complex* a,
                    int* lda, double _Complex* b, int* ldb,
                    int *info );
void stptrs_( char* uplo, char* trans, char* diag, int* n,
                    int* nrhs, const float* ap, float* b,
                    int* ldb, int *info );
void dtptrs_( char* uplo, char* trans, char* diag, int* n,
                    int* nrhs, const double* ap, double* b,
                    int* ldb, int *info );
void ctptrs_( char* uplo, char* trans, char* diag, int* n,
                    int* nrhs, const float _Complex* ap,
                    float _Complex* b, int* ldb,
                    int *info );
void ztptrs_( char* uplo, char* trans, char* diag, int* n,
                    int* nrhs, const double _Complex* ap,
                    double _Complex* b, int* ldb,
                    int *info );
void stbtrs_( char* uplo, char* trans, char* diag, int* n,
                    int* kd, int* nrhs, const float* ab,
                    int* ldab, float* b, int* ldb,
                    int *info );
void dtbtrs_( char* uplo, char* trans, char* diag, int* n,
                    int* kd, int* nrhs, const double* ab,
                    int* ldab, double* b, int* ldb,
                    int *info );
void ctbtrs_( char* uplo, char* trans, char* diag, int* n,
                    int* kd, int* nrhs,
                    const float _Complex* ab, int* ldab,
                    float _Complex* b, int* ldb,
                    int *info );
void ztbtrs_( char* uplo, char* trans, char* diag, int* n,
                    int* kd, int* nrhs,
                    const double _Complex* ab, int* ldab,
                    double _Complex* b, int* ldb,
                    int *info );
void sgecon_( char* norm, int* n, const float* a, int* lda,
                    float* anorm, float* rcond, float* work, int* iwork,
                    int *info );
void dgecon_( char* norm, int* n, const double* a, int* lda,
                    double* anorm, double* rcond, double* work,
                    int* iwork, int *info );
void cgecon_( char* norm, int* n, const float _Complex* a,
                    int* lda, float* anorm, float* rcond,
                    float _Complex* work, float* rwork,
                    int *info );
void zgecon_( char* norm, int* n, const double _Complex* a,
                    int* lda, double* anorm, double* rcond,
                    double _Complex* work, double* rwork,
                    int *info );
void sgbcon_( char* norm, int* n, int* kl, int* ku,
                    const float* ab, int* ldab, const int* ipiv,
                    float* anorm, float* rcond, float* work, int* iwork,
                    int *info );
void dgbcon_( char* norm, int* n, int* kl, int* ku,
                    const double* ab, int* ldab, const int* ipiv,
                    double* anorm, double* rcond, double* work,
                    int* iwork, int *info );
void cgbcon_( char* norm, int* n, int* kl, int* ku,
                    const float _Complex* ab, int* ldab,
                    const int* ipiv, float* anorm, float* rcond,
                    float _Complex* work, float* rwork,
                    int *info );
void zgbcon_( char* norm, int* n, int* kl, int* ku,
                    const double _Complex* ab, int* ldab,
                    const int* ipiv, double* anorm, double* rcond,
                    double _Complex* work, double* rwork,
                    int *info );
void sgtcon_( char* norm, int* n, const float* dl, const float* d,
                    const float* du, const float* du2, const int* ipiv,
                    float* anorm, float* rcond, float* work, int* iwork,
                    int *info );
void dgtcon_( char* norm, int* n, const double* dl,
                    const double* d, const double* du, const double* du2,
                    const int* ipiv, double* anorm, double* rcond,
                    double* work, int* iwork, int *info );
void cgtcon_( char* norm, int* n, const float _Complex* dl,
                    const float _Complex* d,
                    const float _Complex* du,
                    const float _Complex* du2, const int* ipiv,
                    float* anorm, float* rcond, float _Complex* work,
                    int *info );
void zgtcon_( char* norm, int* n, const double _Complex* dl,
                    const double _Complex* d,
                    const double _Complex* du,
                    const double _Complex* du2, const int* ipiv,
                    double* anorm, double* rcond, double _Complex* work,
                    int *info );
void spocon_( char* uplo, int* n, const float* a, int* lda,
                    float* anorm, float* rcond, float* work, int* iwork,
                    int *info );
void dpocon_( char* uplo, int* n, const double* a, int* lda,
                    double* anorm, double* rcond, double* work,
                    int* iwork, int *info );
void cpocon_( char* uplo, int* n, const float _Complex* a,
                    int* lda, float* anorm, float* rcond,
                    float _Complex* work, float* rwork,
                    int *info );
void zpocon_( char* uplo, int* n, const double _Complex* a,
                    int* lda, double* anorm, double* rcond,
                    double _Complex* work, double* rwork,
                    int *info );
void sppcon_( char* uplo, int* n, const float* ap, float* anorm,
                    float* rcond, float* work, int* iwork,
                    int *info );
void dppcon_( char* uplo, int* n, const double* ap, double* anorm,
                    double* rcond, double* work, int* iwork,
                    int *info );
void cppcon_( char* uplo, int* n, const float _Complex* ap,
                    float* anorm, float* rcond, float _Complex* work,
                    float* rwork, int *info );
void zppcon_( char* uplo, int* n, const double _Complex* ap,
                    double* anorm, double* rcond, double _Complex* work,
                    double* rwork, int *info );
void spbcon_( char* uplo, int* n, int* kd, const float* ab,
                    int* ldab, float* anorm, float* rcond, float* work,
                    int* iwork, int *info );
void dpbcon_( char* uplo, int* n, int* kd, const double* ab,
                    int* ldab, double* anorm, double* rcond,
                    double* work, int* iwork, int *info );
void cpbcon_( char* uplo, int* n, int* kd,
                    const float _Complex* ab, int* ldab,
                    float* anorm, float* rcond, float _Complex* work,
                    float* rwork, int *info );
void zpbcon_( char* uplo, int* n, int* kd,
                    const double _Complex* ab, int* ldab,
                    double* anorm, double* rcond, double _Complex* work,
                    double* rwork, int *info );
void sptcon_( int* n, const float* d, const float* e, float* anorm,
                    float* rcond, float* work, int *info );
void dptcon_( int* n, const double* d, const double* e,
                    double* anorm, double* rcond, double* work,
                    int *info );
void cptcon_( int* n, const float* d,
                    const float _Complex* e, float* anorm, float* rcond,
                    float* work, int *info );
void zptcon_( int* n, const double* d,
                    const double _Complex* e, double* anorm,
                    double* rcond, double* work, int *info );
void ssycon_( char* uplo, int* n, const float* a, int* lda,
                    const int* ipiv, float* anorm, float* rcond,
                    float* work, int* iwork, int *info );
void dsycon_( char* uplo, int* n, const double* a, int* lda,
                    const int* ipiv, double* anorm, double* rcond,
                    double* work, int* iwork, int *info );
void csycon_( char* uplo, int* n, const float _Complex* a,
                    int* lda, const int* ipiv, float* anorm,
                    float* rcond, float _Complex* work,
                    int *info );
void zsycon_( char* uplo, int* n, const double _Complex* a,
                    int* lda, const int* ipiv, double* anorm,
                    double* rcond, double _Complex* work,
                    int *info );
void checon_( char* uplo, int* n, const float _Complex* a,
                    int* lda, const int* ipiv, float* anorm,
                    float* rcond, float _Complex* work,
                    int *info );
void zhecon_( char* uplo, int* n, const double _Complex* a,
                    int* lda, const int* ipiv, double* anorm,
                    double* rcond, double _Complex* work,
                    int *info );
void sspcon_( char* uplo, int* n, const float* ap,
                    const int* ipiv, float* anorm, float* rcond,
                    float* work, int* iwork, int *info );
void dspcon_( char* uplo, int* n, const double* ap,
                    const int* ipiv, double* anorm, double* rcond,
                    double* work, int* iwork, int *info );
void cspcon_( char* uplo, int* n, const float _Complex* ap,
                    const int* ipiv, float* anorm, float* rcond,
                    float _Complex* work, int *info );
void zspcon_( char* uplo, int* n, const double _Complex* ap,
                    const int* ipiv, double* anorm, double* rcond,
                    double _Complex* work, int *info );
void chpcon_( char* uplo, int* n, const float _Complex* ap,
                    const int* ipiv, float* anorm, float* rcond,
                    float _Complex* work, int *info );
void zhpcon_( char* uplo, int* n, const double _Complex* ap,
                    const int* ipiv, double* anorm, double* rcond,
                    double _Complex* work, int *info );
void strcon_( char* norm, char* uplo, char* diag, int* n,
                    const float* a, int* lda, float* rcond, float* work,
                    int* iwork, int *info );
void dtrcon_( char* norm, char* uplo, char* diag, int* n,
                    const double* a, int* lda, double* rcond,
                    double* work, int* iwork, int *info );
void ctrcon_( char* norm, char* uplo, char* diag, int* n,
                    const float _Complex* a, int* lda,
                    float* rcond, float _Complex* work, float* rwork,
                    int *info );
void ztrcon_( char* norm, char* uplo, char* diag, int* n,
                    const double _Complex* a, int* lda,
                    double* rcond, double _Complex* work, double* rwork,
                    int *info );
void stpcon_( char* norm, char* uplo, char* diag, int* n,
                    const float* ap, float* rcond, float* work,
                    int* iwork, int *info );
void dtpcon_( char* norm, char* uplo, char* diag, int* n,
                    const double* ap, double* rcond, double* work,
                    int* iwork, int *info );
void ctpcon_( char* norm, char* uplo, char* diag, int* n,
                    const float _Complex* ap, float* rcond,
                    float _Complex* work, float* rwork,
                    int *info );
void ztpcon_( char* norm, char* uplo, char* diag, int* n,
                    const double _Complex* ap, double* rcond,
                    double _Complex* work, double* rwork,
                    int *info );
void stbcon_( char* norm, char* uplo, char* diag, int* n,
                    int* kd, const float* ab, int* ldab,
                    float* rcond, float* work, int* iwork,
                    int *info );
void dtbcon_( char* norm, char* uplo, char* diag, int* n,
                    int* kd, const double* ab, int* ldab,
                    double* rcond, double* work, int* iwork,
                    int *info );
void ctbcon_( char* norm, char* uplo, char* diag, int* n,
                    int* kd, const float _Complex* ab,
                    int* ldab, float* rcond, float _Complex* work,
                    float* rwork, int *info );
void ztbcon_( char* norm, char* uplo, char* diag, int* n,
                    int* kd, const double _Complex* ab,
                    int* ldab, double* rcond,
                    double _Complex* work, double* rwork,
                    int *info );
void sgerfs_( char* trans, int* n, int* nrhs,
                    const float* a, int* lda, const float* af,
                    int* ldaf, const int* ipiv, const float* b,
                    int* ldb, float* x, int* ldx, float* ferr,
                    float* berr, float* work, int* iwork,
                    int *info );
void dgerfs_( char* trans, int* n, int* nrhs,
                    const double* a, int* lda, const double* af,
                    int* ldaf, const int* ipiv, const double* b,
                    int* ldb, double* x, int* ldx, double* ferr,
                    double* berr, double* work, int* iwork,
                    int *info );
void cgerfs_( char* trans, int* n, int* nrhs,
                    const float _Complex* a, int* lda,
                    const float _Complex* af, int* ldaf,
                    const int* ipiv, const float _Complex* b,
                    int* ldb, float _Complex* x, int* ldx,
                    float* ferr, float* berr, float _Complex* work,
                    float* rwork, int *info );
void zgerfs_( char* trans, int* n, int* nrhs,
                    const double _Complex* a, int* lda,
                    const double _Complex* af, int* ldaf,
                    const int* ipiv, const double _Complex* b,
                    int* ldb, double _Complex* x, int* ldx,
                    double* ferr, double* berr, double _Complex* work,
                    double* rwork, int *info );
void dgerfsx_( char* trans, char* equed, int* n, int* nrhs,
                     const double* a, int* lda, const double* af,
                     int* ldaf, const int* ipiv, const double* r,
                     const double* c, const double* b, int* ldb,
                     double* x, int* ldx, double* rcond, double* berr,
                     int* n_err_bnds, double* err_bnds_norm,
                     double* err_bnds_comp, int* nparams, double* params,
                     double* work, int* iwork, int *info );
void sgerfsx_( char* trans, char* equed, int* n, int* nrhs,
                     const float* a, int* lda, const float* af,
                     int* ldaf, const int* ipiv, const float* r,
                     const float* c, const float* b, int* ldb, float* x,
                     int* ldx, float* rcond, float* berr,
                     int* n_err_bnds, float* err_bnds_norm,
                     float* err_bnds_comp, int* nparams, float* params,
                     float* work, int* iwork, int *info );
void zgerfsx_( char* trans, char* equed, int* n, int* nrhs,
                     const double _Complex* a, int* lda,
                     const double _Complex* af, int* ldaf,
                     const int* ipiv, const double* r, const double* c,
                     const double _Complex* b, int* ldb,
                     double _Complex* x, int* ldx, double* rcond,
                     double* berr, int* n_err_bnds,
                     double* err_bnds_norm, double* err_bnds_comp,
                     int* nparams, double* params,
                     double _Complex* work, double* rwork,
                     int *info );
void cgerfsx_( char* trans, char* equed, int* n, int* nrhs,
                     const float _Complex* a, int* lda,
                     const float _Complex* af, int* ldaf,
                     const int* ipiv, const float* r, const float* c,
                     const float _Complex* b, int* ldb,
                     float _Complex* x, int* ldx, float* rcond,
                     float* berr, int* n_err_bnds, float* err_bnds_norm,
                     float* err_bnds_comp, int* nparams, float* params,
                     float _Complex* work, float* rwork,
                     int *info );
void sgbrfs_( char* trans, int* n, int* kl, int* ku,
                    int* nrhs, const float* ab, int* ldab,
                    const float* afb, int* ldafb, const int* ipiv,
                    const float* b, int* ldb, float* x, int* ldx,
                    float* ferr, float* berr, float* work, int* iwork,
                    int *info );
void dgbrfs_( char* trans, int* n, int* kl, int* ku,
                    int* nrhs, const double* ab, int* ldab,
                    const double* afb, int* ldafb,
                    const int* ipiv, const double* b, int* ldb,
                    double* x, int* ldx, double* ferr, double* berr,
                    double* work, int* iwork, int *info );
void cgbrfs_( char* trans, int* n, int* kl, int* ku,
                    int* nrhs, const float _Complex* ab,
                    int* ldab, const float _Complex* afb,
                    int* ldafb, const int* ipiv,
                    const float _Complex* b, int* ldb,
                    float _Complex* x, int* ldx, float* ferr,
                    float* berr, float _Complex* work, float* rwork,
                    int *info );
void zgbrfs_( char* trans, int* n, int* kl, int* ku,
                    int* nrhs, const double _Complex* ab,
                    int* ldab, const double _Complex* afb,
                    int* ldafb, const int* ipiv,
                    const double _Complex* b, int* ldb,
                    double _Complex* x, int* ldx, double* ferr,
                    double* berr, double _Complex* work, double* rwork,
                    int *info );
void dgbrfsx_( char* trans, char* equed, int* n, int* kl,
                     int* ku, int* nrhs, const double* ab,
                     int* ldab, const double* afb, int* ldafb,
                     const int* ipiv, const double* r, const double* c,
                     const double* b, int* ldb, double* x,
                     int* ldx, double* rcond, double* berr,
                     int* n_err_bnds, double* err_bnds_norm,
                     double* err_bnds_comp, int* nparams, double* params,
                     double* work, int* iwork, int *info );
void sgbrfsx_( char* trans, char* equed, int* n, int* kl,
                     int* ku, int* nrhs, const float* ab,
                     int* ldab, const float* afb, int* ldafb,
                     const int* ipiv, const float* r, const float* c,
                     const float* b, int* ldb, float* x, int* ldx,
                     float* rcond, float* berr, int* n_err_bnds,
                     float* err_bnds_norm, float* err_bnds_comp,
                     int* nparams, float* params, float* work,
                     int* iwork, int *info );
void zgbrfsx_( char* trans, char* equed, int* n, int* kl,
                     int* ku, int* nrhs,
                     const double _Complex* ab, int* ldab,
                     const double _Complex* afb, int* ldafb,
                     const int* ipiv, const double* r, const double* c,
                     const double _Complex* b, int* ldb,
                     double _Complex* x, int* ldx, double* rcond,
                     double* berr, int* n_err_bnds,
                     double* err_bnds_norm, double* err_bnds_comp,
                     int* nparams, double* params,
                     double _Complex* work, double* rwork,
                     int *info );
void cgbrfsx_( char* trans, char* equed, int* n, int* kl,
                     int* ku, int* nrhs,
                     const float _Complex* ab, int* ldab,
                     const float _Complex* afb, int* ldafb,
                     const int* ipiv, const float* r, const float* c,
                     const float _Complex* b, int* ldb,
                     float _Complex* x, int* ldx, float* rcond,
                     float* berr, int* n_err_bnds, float* err_bnds_norm,
                     float* err_bnds_comp, int* nparams, float* params,
                     float _Complex* work, float* rwork,
                     int *info );
void sgtrfs_( char* trans, int* n, int* nrhs,
                    const float* dl, const float* d, const float* du,
                    const float* dlf, const float* df, const float* duf,
                    const float* du2, const int* ipiv, const float* b,
                    int* ldb, float* x, int* ldx, float* ferr,
                    float* berr, float* work, int* iwork,
                    int *info );
void dgtrfs_( char* trans, int* n, int* nrhs,
                    const double* dl, const double* d, const double* du,
                    const double* dlf, const double* df, const double* duf,
                    const double* du2, const int* ipiv, const double* b,
                    int* ldb, double* x, int* ldx, double* ferr,
                    double* berr, double* work, int* iwork,
                    int *info );
void cgtrfs_( char* trans, int* n, int* nrhs,
                    const float _Complex* dl,
                    const float _Complex* d,
                    const float _Complex* du,
                    const float _Complex* dlf,
                    const float _Complex* df,
                    const float _Complex* duf,
                    const float _Complex* du2, const int* ipiv,
                    const float _Complex* b, int* ldb,
                    float _Complex* x, int* ldx, float* ferr,
                    float* berr, float _Complex* work, float* rwork,
                    int *info );
void zgtrfs_( char* trans, int* n, int* nrhs,
                    const double _Complex* dl,
                    const double _Complex* d,
                    const double _Complex* du,
                    const double _Complex* dlf,
                    const double _Complex* df,
                    const double _Complex* duf,
                    const double _Complex* du2, const int* ipiv,
                    const double _Complex* b, int* ldb,
                    double _Complex* x, int* ldx, double* ferr,
                    double* berr, double _Complex* work, double* rwork,
                    int *info );
void sporfs_( char* uplo, int* n, int* nrhs, const float* a,
                    int* lda, const float* af, int* ldaf,
                    const float* b, int* ldb, float* x, int* ldx,
                    float* ferr, float* berr, float* work, int* iwork,
                    int *info );
void dporfs_( char* uplo, int* n, int* nrhs,
                    const double* a, int* lda, const double* af,
                    int* ldaf, const double* b, int* ldb,
                    double* x, int* ldx, double* ferr, double* berr,
                    double* work, int* iwork, int *info );
void cporfs_( char* uplo, int* n, int* nrhs,
                    const float _Complex* a, int* lda,
                    const float _Complex* af, int* ldaf,
                    const float _Complex* b, int* ldb,
                    float _Complex* x, int* ldx, float* ferr,
                    float* berr, float _Complex* work, float* rwork,
                    int *info );
void zporfs_( char* uplo, int* n, int* nrhs,
                    const double _Complex* a, int* lda,
                    const double _Complex* af, int* ldaf,
                    const double _Complex* b, int* ldb,
                    double _Complex* x, int* ldx, double* ferr,
                    double* berr, double _Complex* work, double* rwork,
                    int *info );
void dporfsx_( char* uplo, char* equed, int* n, int* nrhs,
                     const double* a, int* lda, const double* af,
                     int* ldaf, const double* s, const double* b,
                     int* ldb, double* x, int* ldx, double* rcond,
                     double* berr, int* n_err_bnds,
                     double* err_bnds_norm, double* err_bnds_comp,
                     int* nparams, double* params, double* work,
                     int* iwork, int *info );
void sporfsx_( char* uplo, char* equed, int* n, int* nrhs,
                     const float* a, int* lda, const float* af,
                     int* ldaf, const float* s, const float* b,
                     int* ldb, float* x, int* ldx, float* rcond,
                     float* berr, int* n_err_bnds, float* err_bnds_norm,
                     float* err_bnds_comp, int* nparams, float* params,
                     float* work, int* iwork, int *info );
void zporfsx_( char* uplo, char* equed, int* n, int* nrhs,
                     const double _Complex* a, int* lda,
                     const double _Complex* af, int* ldaf,
                     const double* s, const double _Complex* b,
                     int* ldb, double _Complex* x, int* ldx,
                     double* rcond, double* berr, int* n_err_bnds,
                     double* err_bnds_norm, double* err_bnds_comp,
                     int* nparams, double* params,
                     double _Complex* work, double* rwork,
                     int *info );
void cporfsx_( char* uplo, char* equed, int* n, int* nrhs,
                     const float _Complex* a, int* lda,
                     const float _Complex* af, int* ldaf,
                     const float* s, const float _Complex* b,
                     int* ldb, float _Complex* x, int* ldx,
                     float* rcond, float* berr, int* n_err_bnds,
                     float* err_bnds_norm, float* err_bnds_comp,
                     int* nparams, float* params,
                     float _Complex* work, float* rwork,
                     int *info );
void spprfs_( char* uplo, int* n, int* nrhs,
                    const float* ap, const float* afp, const float* b,
                    int* ldb, float* x, int* ldx, float* ferr,
                    float* berr, float* work, int* iwork,
                    int *info );
void dpprfs_( char* uplo, int* n, int* nrhs,
                    const double* ap, const double* afp, const double* b,
                    int* ldb, double* x, int* ldx, double* ferr,
                    double* berr, double* work, int* iwork,
                    int *info );
void cpprfs_( char* uplo, int* n, int* nrhs,
                    const float _Complex* ap,
                    const float _Complex* afp,
                    const float _Complex* b, int* ldb,
                    float _Complex* x, int* ldx, float* ferr,
                    float* berr, float _Complex* work, float* rwork,
                    int *info );
void zpprfs_( char* uplo, int* n, int* nrhs,
                    const double _Complex* ap,
                    const double _Complex* afp,
                    const double _Complex* b, int* ldb,
                    double _Complex* x, int* ldx, double* ferr,
                    double* berr, double _Complex* work, double* rwork,
                    int *info );
void spbrfs_( char* uplo, int* n, int* kd, int* nrhs,
                    const float* ab, int* ldab, const float* afb,
                    int* ldafb, const float* b, int* ldb,
                    float* x, int* ldx, float* ferr, float* berr,
                    float* work, int* iwork, int *info );
void dpbrfs_( char* uplo, int* n, int* kd, int* nrhs,
                    const double* ab, int* ldab, const double* afb,
                    int* ldafb, const double* b, int* ldb,
                    double* x, int* ldx, double* ferr, double* berr,
                    double* work, int* iwork, int *info );
void cpbrfs_( char* uplo, int* n, int* kd, int* nrhs,
                    const float _Complex* ab, int* ldab,
                    const float _Complex* afb, int* ldafb,
                    const float _Complex* b, int* ldb,
                    float _Complex* x, int* ldx, float* ferr,
                    float* berr, float _Complex* work, float* rwork,
                    int *info );
void zpbrfs_( char* uplo, int* n, int* kd, int* nrhs,
                    const double _Complex* ab, int* ldab,
                    const double _Complex* afb, int* ldafb,
                    const double _Complex* b, int* ldb,
                    double _Complex* x, int* ldx, double* ferr,
                    double* berr, double _Complex* work, double* rwork,
                    int *info );
void sptrfs_( int* n, int* nrhs, const float* d,
                    const float* e, const float* df, const float* ef,
                    const float* b, int* ldb, float* x, int* ldx,
                    float* ferr, float* berr, float* work, int *info );
void dptrfs_( int* n, int* nrhs, const double* d,
                    const double* e, const double* df, const double* ef,
                    const double* b, int* ldb, double* x,
                    int* ldx, double* ferr, double* berr, double* work,
                    int *info );
void cptrfs_( char* uplo, int* n, int* nrhs, const float* d,
                    const float _Complex* e, const float* df,
                    const float _Complex* ef,
                    const float _Complex* b, int* ldb,
                    float _Complex* x, int* ldx, float* ferr,
                    float* berr, float _Complex* work, float* rwork,
                    int *info );
void zptrfs_( char* uplo, int* n, int* nrhs,
                    const double* d, const double _Complex* e,
                    const double* df, const double _Complex* ef,
                    const double _Complex* b, int* ldb,
                    double _Complex* x, int* ldx, double* ferr,
                    double* berr, double _Complex* work, double* rwork,
                    int *info );
void ssyrfs_( char* uplo, int* n, int* nrhs, const float* a,
                    int* lda, const float* af, int* ldaf,
                    const int* ipiv, const float* b, int* ldb,
                    float* x, int* ldx, float* ferr, float* berr,
                    float* work, int* iwork, int *info );
void dsyrfs_( char* uplo, int* n, int* nrhs,
                    const double* a, int* lda, const double* af,
                    int* ldaf, const int* ipiv, const double* b,
                    int* ldb, double* x, int* ldx, double* ferr,
                    double* berr, double* work, int* iwork,
                    int *info );
void csyrfs_( char* uplo, int* n, int* nrhs,
                    const float _Complex* a, int* lda,
                    const float _Complex* af, int* ldaf,
                    const int* ipiv, const float _Complex* b,
                    int* ldb, float _Complex* x, int* ldx,
                    float* ferr, float* berr, float _Complex* work,
                    float* rwork, int *info );
void zsyrfs_( char* uplo, int* n, int* nrhs,
                    const double _Complex* a, int* lda,
                    const double _Complex* af, int* ldaf,
                    const int* ipiv, const double _Complex* b,
                    int* ldb, double _Complex* x, int* ldx,
                    double* ferr, double* berr, double _Complex* work,
                    double* rwork, int *info );
void dsyrfsx_( char* uplo, char* equed, int* n, int* nrhs,
                     const double* a, int* lda, const double* af,
                     int* ldaf, const int* ipiv, const double* s,
                     const double* b, int* ldb, double* x,
                     int* ldx, double* rcond, double* berr,
                     int* n_err_bnds, double* err_bnds_norm,
                     double* err_bnds_comp, int* nparams, double* params,
                     double* work, int* iwork, int *info );
void ssyrfsx_( char* uplo, char* equed, int* n, int* nrhs,
                     const float* a, int* lda, const float* af,
                     int* ldaf, const int* ipiv, const float* s,
                     const float* b, int* ldb, float* x, int* ldx,
                     float* rcond, float* berr, int* n_err_bnds,
                     float* err_bnds_norm, float* err_bnds_comp,
                     int* nparams, float* params, float* work,
                     int* iwork, int *info );
void zsyrfsx_( char* uplo, char* equed, int* n, int* nrhs,
                     const double _Complex* a, int* lda,
                     const double _Complex* af, int* ldaf,
                     const int* ipiv, const double* s,
                     const double _Complex* b, int* ldb,
                     double _Complex* x, int* ldx, double* rcond,
                     double* berr, int* n_err_bnds,
                     double* err_bnds_norm, double* err_bnds_comp,
                     int* nparams, double* params,
                     double _Complex* work, double* rwork,
                     int *info );
void csyrfsx_( char* uplo, char* equed, int* n, int* nrhs,
                     const float _Complex* a, int* lda,
                     const float _Complex* af, int* ldaf,
                     const int* ipiv, const float* s,
                     const float _Complex* b, int* ldb,
                     float _Complex* x, int* ldx, float* rcond,
                     float* berr, int* n_err_bnds, float* err_bnds_norm,
                     float* err_bnds_comp, int* nparams, float* params,
                     float _Complex* work, float* rwork,
                     int *info );
void cherfs_( char* uplo, int* n, int* nrhs,
                    const float _Complex* a, int* lda,
                    const float _Complex* af, int* ldaf,
                    const int* ipiv, const float _Complex* b,
                    int* ldb, float _Complex* x, int* ldx,
                    float* ferr, float* berr, float _Complex* work,
                    float* rwork, int *info );
void zherfs_( char* uplo, int* n, int* nrhs,
                    const double _Complex* a, int* lda,
                    const double _Complex* af, int* ldaf,
                    const int* ipiv, const double _Complex* b,
                    int* ldb, double _Complex* x, int* ldx,
                    double* ferr, double* berr, double _Complex* work,
                    double* rwork, int *info );
void zherfsx_( char* uplo, char* equed, int* n, int* nrhs,
                     const double _Complex* a, int* lda,
                     const double _Complex* af, int* ldaf,
                     const int* ipiv, const double* s,
                     const double _Complex* b, int* ldb,
                     double _Complex* x, int* ldx, double* rcond,
                     double* berr, int* n_err_bnds,
                     double* err_bnds_norm, double* err_bnds_comp,
                     int* nparams, double* params,
                     double _Complex* work, double* rwork,
                     int *info );
void cherfsx_( char* uplo, char* equed, int* n, int* nrhs,
                     const float _Complex* a, int* lda,
                     const float _Complex* af, int* ldaf,
                     const int* ipiv, const float* s,
                     const float _Complex* b, int* ldb,
                     float _Complex* x, int* ldx, float* rcond,
                     float* berr, int* n_err_bnds, float* err_bnds_norm,
                     float* err_bnds_comp, int* nparams, float* params,
                     float _Complex* work, float* rwork,
                     int *info );
void ssprfs_( char* uplo, int* n, int* nrhs,
                    const float* ap, const float* afp, const int* ipiv,
                    const float* b, int* ldb, float* x, int* ldx,
                    float* ferr, float* berr, float* work, int* iwork,
                    int *info );
void dsprfs_( char* uplo, int* n, int* nrhs,
                    const double* ap, const double* afp, const int* ipiv,
                    const double* b, int* ldb, double* x,
                    int* ldx, double* ferr, double* berr, double* work,
                    int* iwork, int *info );
void csprfs_( char* uplo, int* n, int* nrhs,
                    const float _Complex* ap,
                    const float _Complex* afp, const int* ipiv,
                    const float _Complex* b, int* ldb,
                    float _Complex* x, int* ldx, float* ferr,
                    float* berr, float _Complex* work, float* rwork,
                    int *info );
void zsprfs_( char* uplo, int* n, int* nrhs,
                    const double _Complex* ap,
                    const double _Complex* afp, const int* ipiv,
                    const double _Complex* b, int* ldb,
                    double _Complex* x, int* ldx, double* ferr,
                    double* berr, double _Complex* work, double* rwork,
                    int *info );
void chprfs_( char* uplo, int* n, int* nrhs,
                    const float _Complex* ap,
                    const float _Complex* afp, const int* ipiv,
                    const float _Complex* b, int* ldb,
                    float _Complex* x, int* ldx, float* ferr,
                    float* berr, float _Complex* work, float* rwork,
                    int *info );
void zhprfs_( char* uplo, int* n, int* nrhs,
                    const double _Complex* ap,
                    const double _Complex* afp, const int* ipiv,
                    const double _Complex* b, int* ldb,
                    double _Complex* x, int* ldx, double* ferr,
                    double* berr, double _Complex* work, double* rwork,
                    int *info );
void strrfs_( char* uplo, char* trans, char* diag, int* n,
                    int* nrhs, const float* a, int* lda,
                    const float* b, int* ldb, const float* x,
                    int* ldx, float* ferr, float* berr, float* work,
                    int* iwork, int *info );
void dtrrfs_( char* uplo, char* trans, char* diag, int* n,
                    int* nrhs, const double* a, int* lda,
                    const double* b, int* ldb, const double* x,
                    int* ldx, double* ferr, double* berr, double* work,
                    int* iwork, int *info );
void ctrrfs_( char* uplo, char* trans, char* diag, int* n,
                    int* nrhs, const float _Complex* a,
                    int* lda, const float _Complex* b,
                    int* ldb, const float _Complex* x,
                    int* ldx, float* ferr, float* berr,
                    float _Complex* work, float* rwork,
                    int *info );
void ztrrfs_( char* uplo, char* trans, char* diag, int* n,
                    int* nrhs, const double _Complex* a,
                    int* lda, const double _Complex* b,
                    int* ldb, const double _Complex* x,
                    int* ldx, double* ferr, double* berr,
                    double _Complex* work, double* rwork,
                    int *info );
void stprfs_( char* uplo, char* trans, char* diag, int* n,
                    int* nrhs, const float* ap, const float* b,
                    int* ldb, const float* x, int* ldx,
                    float* ferr, float* berr, float* work, int* iwork,
                    int *info );
void dtprfs_( char* uplo, char* trans, char* diag, int* n,
                    int* nrhs, const double* ap, const double* b,
                    int* ldb, const double* x, int* ldx,
                    double* ferr, double* berr, double* work, int* iwork,
                    int *info );
void ctprfs_( char* uplo, char* trans, char* diag, int* n,
                    int* nrhs, const float _Complex* ap,
                    const float _Complex* b, int* ldb,
                    const float _Complex* x, int* ldx, float* ferr,
                    float* berr, float _Complex* work, float* rwork,
                    int *info );
void ztprfs_( char* uplo, char* trans, char* diag, int* n,
                    int* nrhs, const double _Complex* ap,
                    const double _Complex* b, int* ldb,
                    const double _Complex* x, int* ldx,
                    double* ferr, double* berr, double _Complex* work,
                    double* rwork, int *info );
void stbrfs_( char* uplo, char* trans, char* diag, int* n,
                    int* kd, int* nrhs, const float* ab,
                    int* ldab, const float* b, int* ldb,
                    const float* x, int* ldx, float* ferr, float* berr,
                    float* work, int* iwork, int *info );
void dtbrfs_( char* uplo, char* trans, char* diag, int* n,
                    int* kd, int* nrhs, const double* ab,
                    int* ldab, const double* b, int* ldb,
                    const double* x, int* ldx, double* ferr,
                    double* berr, double* work, int* iwork,
                    int *info );
void ctbrfs_( char* uplo, char* trans, char* diag, int* n,
                    int* kd, int* nrhs,
                    const float _Complex* ab, int* ldab,
                    const float _Complex* b, int* ldb,
                    const float _Complex* x, int* ldx, float* ferr,
                    float* berr, float _Complex* work, float* rwork,
                    int *info );
void ztbrfs_( char* uplo, char* trans, char* diag, int* n,
                    int* kd, int* nrhs,
                    const double _Complex* ab, int* ldab,
                    const double _Complex* b, int* ldb,
                    const double _Complex* x, int* ldx,
                    double* ferr, double* berr, double _Complex* work,
                    double* rwork, int *info );
void sgetri_( int* n, float* a, int* lda,
                    const int* ipiv, float* work, int* lwork,
                    int *info );
void dgetri_( int* n, double* a, int* lda,
                    const int* ipiv, double* work, int* lwork,
                    int *info );
void cgetri_( int* n, float _Complex* a, int* lda,
                    const int* ipiv, float _Complex* work,
                    int* lwork, int *info );
void zgetri_( int* n, double _Complex* a, int* lda,
                    const int* ipiv, double _Complex* work,
                    int* lwork, int *info );
void spotri_( char* uplo, int* n, float* a, int* lda,
                    int *info );
void dpotri_( char* uplo, int* n, double* a, int* lda,
                    int *info );
void cpotri_( char* uplo, int* n, float _Complex* a,
                    int* lda, int *info );
void zpotri_( char* uplo, int* n, double _Complex* a,
                    int* lda, int *info );
void dpftri_( char* transr, char* uplo, int* n, double* a,
                    int *info );
void spftri_( char* transr, char* uplo, int* n, float* a,
                    int *info );
void zpftri_( char* transr, char* uplo, int* n,
                    double _Complex* a, int *info );
void cpftri_( char* transr, char* uplo, int* n,
                    float _Complex* a, int *info );
void spptri_( char* uplo, int* n, float* ap, int *info );
void dpptri_( char* uplo, int* n, double* ap, int *info );
void cpptri_( char* uplo, int* n, float _Complex* ap,
                    int *info );
void zpptri_( char* uplo, int* n, double _Complex* ap,
                    int *info );
void ssytri_( char* uplo, int* n, float* a, int* lda,
                    const int* ipiv, float* work, int *info );
void dsytri_( char* uplo, int* n, double* a, int* lda,
                    const int* ipiv, double* work, int *info );
void csytri_( char* uplo, int* n, float _Complex* a,
                    int* lda, const int* ipiv,
                    float _Complex* work, int *info );
void zsytri_( char* uplo, int* n, double _Complex* a,
                    int* lda, const int* ipiv,
                    double _Complex* work, int *info );
void chetri_( char* uplo, int* n, float _Complex* a,
                    int* lda, const int* ipiv,
                    float _Complex* work, int *info );
void zhetri_( char* uplo, int* n, double _Complex* a,
                    int* lda, const int* ipiv,
                    double _Complex* work, int *info );
void ssptri_( char* uplo, int* n, float* ap,
                    const int* ipiv, float* work, int *info );
void dsptri_( char* uplo, int* n, double* ap,
                    const int* ipiv, double* work, int *info );
void csptri_( char* uplo, int* n, float _Complex* ap,
                    const int* ipiv, float _Complex* work,
                    int *info );
void zsptri_( char* uplo, int* n, double _Complex* ap,
                    const int* ipiv, double _Complex* work,
                    int *info );
void chptri_( char* uplo, int* n, float _Complex* ap,
                    const int* ipiv, float _Complex* work,
                    int *info );
void zhptri_( char* uplo, int* n, double _Complex* ap,
                    const int* ipiv, double _Complex* work,
                    int *info );
void strtri_( char* uplo, char* diag, int* n, float* a,
                    int* lda, int *info );
void dtrtri_( char* uplo, char* diag, int* n, double* a,
                    int* lda, int *info );
void ctrtri_( char* uplo, char* diag, int* n,
                    float _Complex* a, int* lda,
                    int *info );
void ztrtri_( char* uplo, char* diag, int* n,
                    double _Complex* a, int* lda,
                    int *info );
void dtftri_( char* transr, char* uplo, char* diag, int* n,
                    double* a, int *info );
void stftri_( char* transr, char* uplo, char* diag, int* n,
                    float* a, int *info );
void ztftri_( char* transr, char* uplo, char* diag, int* n,
                    double _Complex* a, int *info );
void ctftri_( char* transr, char* uplo, char* diag, int* n,
                    float _Complex* a, int *info );
void stptri_( char* uplo, char* diag, int* n, float* ap,
                    int *info );
void dtptri_( char* uplo, char* diag, int* n, double* ap,
                    int *info );
void ctptri_( char* uplo, char* diag, int* n,
                    float _Complex* ap, int *info );
void ztptri_( char* uplo, char* diag, int* n,
                    double _Complex* ap, int *info );
void sgeequ_( int* m, int* n, const float* a,
                    int* lda, float* r, float* c, float* rowcnd,
                    float* colcnd, float* amax, int *info );
void dgeequ_( int* m, int* n, const double* a,
                    int* lda, double* r, double* c, double* rowcnd,
                    double* colcnd, double* amax, int *info );
void cgeequ_( int* m, int* n, const float _Complex* a,
                    int* lda, float* r, float* c, float* rowcnd,
                    float* colcnd, float* amax, int *info );
void zgeequ_( int* m, int* n,
                    const double _Complex* a, int* lda, double* r,
                    double* c, double* rowcnd, double* colcnd, double* amax,
                    int *info );
void dgeequb_( int* m, int* n, const double* a,
                     int* lda, double* r, double* c, double* rowcnd,
                     double* colcnd, double* amax, int *info );
void sgeequb_( int* m, int* n, const float* a,
                     int* lda, float* r, float* c, float* rowcnd,
                     float* colcnd, float* amax, int *info );
void zgeequb_( int* m, int* n,
                     const double _Complex* a, int* lda, double* r,
                     double* c, double* rowcnd, double* colcnd, double* amax,
                     int *info );
void cgeequb_( int* m, int* n,
                     const float _Complex* a, int* lda, float* r,
                     float* c, float* rowcnd, float* colcnd, float* amax,
                     int *info );
void sgbequ_( int* m, int* n, int* kl,
                    int* ku, const float* ab, int* ldab, float* r,
                    float* c, float* rowcnd, float* colcnd, float* amax,
                    int *info );
void dgbequ_( int* m, int* n, int* kl,
                    int* ku, const double* ab, int* ldab,
                    double* r, double* c, double* rowcnd, double* colcnd,
                    double* amax, int *info );
void cgbequ_( int* m, int* n, int* kl,
                    int* ku, const float _Complex* ab,
                    int* ldab, float* r, float* c, float* rowcnd,
                    float* colcnd, float* amax, int *info );
void zgbequ_( int* m, int* n, int* kl,
                    int* ku, const double _Complex* ab,
                    int* ldab, double* r, double* c, double* rowcnd,
                    double* colcnd, double* amax, int *info );
void dgbequb_( int* m, int* n, int* kl,
                     int* ku, const double* ab, int* ldab,
                     double* r, double* c, double* rowcnd, double* colcnd,
                     double* amax, int *info );
void sgbequb_( int* m, int* n, int* kl,
                     int* ku, const float* ab, int* ldab,
                     float* r, float* c, float* rowcnd, float* colcnd,
                     float* amax, int *info );
void zgbequb_( int* m, int* n, int* kl,
                     int* ku, const double _Complex* ab,
                     int* ldab, double* r, double* c, double* rowcnd,
                     double* colcnd, double* amax, int *info );
void cgbequb_( int* m, int* n, int* kl,
                     int* ku, const float _Complex* ab,
                     int* ldab, float* r, float* c, float* rowcnd,
                     float* colcnd, float* amax, int *info );
void spoequ_( int* n, const float* a, int* lda, float* s,
                    float* scond, float* amax, int *info );
void dpoequ_( int* n, const double* a, int* lda, double* s,
                    double* scond, double* amax, int *info );
void cpoequ_( int* n, const float _Complex* a,
                    int* lda, float* s, float* scond, float* amax,
                    int *info );
void zpoequ_( int* n, const double _Complex* a,
                    int* lda, double* s, double* scond, double* amax,
                    int *info );
void dpoequb_( int* n, const double* a, int* lda, double* s,
                     double* scond, double* amax, int *info );
void spoequb_( int* n, const float* a, int* lda, float* s,
                     float* scond, float* amax, int *info );
void zpoequb_( int* n, const double _Complex* a,
                     int* lda, double* s, double* scond, double* amax,
                     int *info );
void cpoequb_( int* n, const float _Complex* a,
                     int* lda, float* s, float* scond, float* amax,
                     int *info );
void sppequ_( char* uplo, int* n, const float* ap, float* s,
                    float* scond, float* amax, int *info );
void dppequ_( char* uplo, int* n, const double* ap, double* s,
                    double* scond, double* amax, int *info );
void cppequ_( char* uplo, int* n, const float _Complex* ap,
                    float* s, float* scond, float* amax, int *info );
void zppequ_( char* uplo, int* n, const double _Complex* ap,
                    double* s, double* scond, double* amax, int *info );
void spbequ_( char* uplo, int* n, int* kd, const float* ab,
                    int* ldab, float* s, float* scond, float* amax,
                    int *info );
void dpbequ_( char* uplo, int* n, int* kd, const double* ab,
                    int* ldab, double* s, double* scond, double* amax,
                    int *info );
void cpbequ_( char* uplo, int* n, int* kd,
                    const float _Complex* ab, int* ldab, float* s,
                    float* scond, float* amax, int *info );
void zpbequ_( char* uplo, int* n, int* kd,
                    const double _Complex* ab, int* ldab,
                    double* s, double* scond, double* amax, int *info );
void dsyequb_( char* uplo, int* n, const double* a,
                     int* lda, double* s, double* scond, double* amax,
                     double* work, int *info );
void ssyequb_( char* uplo, int* n, const float* a, int* lda,
                     float* s, float* scond, float* amax, float* work,
                     int *info );
void zsyequb_( char* uplo, int* n, const double _Complex* a,
                     int* lda, double* s, double* scond, double* amax,
                     double _Complex* work, int *info );
void csyequb_( char* uplo, int* n, const float _Complex* a,
                     int* lda, float* s, float* scond, float* amax,
                     float _Complex* work, int *info );
void zheequb_( char* uplo, int* n, const double _Complex* a,
                     int* lda, double* s, double* scond, double* amax,
                     double _Complex* work, int *info );
void cheequb_( char* uplo, int* n, const float _Complex* a,
                     int* lda, float* s, float* scond, float* amax,
                     float _Complex* work, int *info );
void sgesv_( int* n, int* nrhs, float* a, int* lda,
                   int* ipiv, float* b, int* ldb,
                   int *info );
void dgesv_( int* n, int* nrhs, double* a, int* lda,
                   int* ipiv, double* b, int* ldb,
                   int *info );
void cgesv_( int* n, int* nrhs, float _Complex* a,
                   int* lda, int* ipiv, float _Complex* b,
                   int* ldb, int *info );
void zgesv_( int* n, int* nrhs, double _Complex* a,
                   int* lda, int* ipiv, double _Complex* b,
                   int* ldb, int *info );
void dsgesv_( int* n, int* nrhs, double* a, int* lda,
                    int* ipiv, double* b, int* ldb, double* x,
                    int* ldx, double* work, float* swork,
                    int* iter, int *info );
void zcgesv_( int* n, int* nrhs, double _Complex* a,
                    int* lda, int* ipiv, double _Complex* b,
                    int* ldb, double _Complex* x, int* ldx,
                    double _Complex* work, float _Complex* swork,
                    double* rwork, int* iter, int *info );
void sgesvx_( char* fact, char* trans, int* n, int* nrhs,
                    float* a, int* lda, float* af, int* ldaf,
                    int* ipiv, char* equed, float* r, float* c, float* b,
                    int* ldb, float* x, int* ldx, float* rcond,
                    float* ferr, float* berr, float* work, int* iwork,
                    int *info );
void dgesvx_( char* fact, char* trans, int* n, int* nrhs,
                    double* a, int* lda, double* af, int* ldaf,
                    int* ipiv, char* equed, double* r, double* c,
                    double* b, int* ldb, double* x, int* ldx,
                    double* rcond, double* ferr, double* berr, double* work,
                    int* iwork, int *info );
void cgesvx_( char* fact, char* trans, int* n, int* nrhs,
                    float _Complex* a, int* lda,
                    float _Complex* af, int* ldaf,
                    int* ipiv, char* equed, float* r, float* c,
                    float _Complex* b, int* ldb,
                    float _Complex* x, int* ldx, float* rcond,
                    float* ferr, float* berr, float _Complex* work,
                    float* rwork, int *info );
void zgesvx_( char* fact, char* trans, int* n, int* nrhs,
                    double _Complex* a, int* lda,
                    double _Complex* af, int* ldaf,
                    int* ipiv, char* equed, double* r, double* c,
                    double _Complex* b, int* ldb,
                    double _Complex* x, int* ldx, double* rcond,
                    double* ferr, double* berr, double _Complex* work,
                    double* rwork, int *info );
void dgesvxx_( char* fact, char* trans, int* n, int* nrhs,
                     double* a, int* lda, double* af, int* ldaf,
                     int* ipiv, char* equed, double* r, double* c,
                     double* b, int* ldb, double* x, int* ldx,
                     double* rcond, double* rpvgrw, double* berr,
                     int* n_err_bnds, double* err_bnds_norm,
                     double* err_bnds_comp, int* nparams, double* params,
                     double* work, int* iwork, int *info );
void sgesvxx_( char* fact, char* trans, int* n, int* nrhs,
                     float* a, int* lda, float* af, int* ldaf,
                     int* ipiv, char* equed, float* r, float* c,
                     float* b, int* ldb, float* x, int* ldx,
                     float* rcond, float* rpvgrw, float* berr,
                     int* n_err_bnds, float* err_bnds_norm,
                     float* err_bnds_comp, int* nparams, float* params,
                     float* work, int* iwork, int *info );
void zgesvxx_( char* fact, char* trans, int* n, int* nrhs,
                     double _Complex* a, int* lda,
                     double _Complex* af, int* ldaf,
                     int* ipiv, char* equed, double* r, double* c,
                     double _Complex* b, int* ldb,
                     double _Complex* x, int* ldx, double* rcond,
                     double* rpvgrw, double* berr, int* n_err_bnds,
                     double* err_bnds_norm, double* err_bnds_comp,
                     int* nparams, double* params,
                     double _Complex* work, double* rwork,
                     int *info );
void cgesvxx_( char* fact, char* trans, int* n, int* nrhs,
                     float _Complex* a, int* lda,
                     float _Complex* af, int* ldaf,
                     int* ipiv, char* equed, float* r, float* c,
                     float _Complex* b, int* ldb,
                     float _Complex* x, int* ldx, float* rcond,
                     float* rpvgrw, float* berr, int* n_err_bnds,
                     float* err_bnds_norm, float* err_bnds_comp,
                     int* nparams, float* params,
                     float _Complex* work, float* rwork,
                     int *info );
void sgbsv_( int* n, int* kl, int* ku,
                   int* nrhs, float* ab, int* ldab,
                   int* ipiv, float* b, int* ldb,
                   int *info );
void dgbsv_( int* n, int* kl, int* ku,
                   int* nrhs, double* ab, int* ldab,
                   int* ipiv, double* b, int* ldb,
                   int *info );
void cgbsv_( int* n, int* kl, int* ku,
                   int* nrhs, float _Complex* ab, int* ldab,
                   int* ipiv, float _Complex* b, int* ldb,
                   int *info );
void zgbsv_( int* n, int* kl, int* ku,
                   int* nrhs, double _Complex* ab,
                   int* ldab, int* ipiv, double _Complex* b,
                   int* ldb, int *info );
void sgbsvx_( char* fact, char* trans, int* n, int* kl,
                    int* ku, int* nrhs, float* ab,
                    int* ldab, float* afb, int* ldafb,
                    int* ipiv, char* equed, float* r, float* c, float* b,
                    int* ldb, float* x, int* ldx, float* rcond,
                    float* ferr, float* berr, float* work, int* iwork,
                    int *info );
void dgbsvx_( char* fact, char* trans, int* n, int* kl,
                    int* ku, int* nrhs, double* ab,
                    int* ldab, double* afb, int* ldafb,
                    int* ipiv, char* equed, double* r, double* c,
                    double* b, int* ldb, double* x, int* ldx,
                    double* rcond, double* ferr, double* berr, double* work,
                    int* iwork, int *info );
void cgbsvx_( char* fact, char* trans, int* n, int* kl,
                    int* ku, int* nrhs, float _Complex* ab,
                    int* ldab, float _Complex* afb,
                    int* ldafb, int* ipiv, char* equed, float* r,
                    float* c, float _Complex* b, int* ldb,
                    float _Complex* x, int* ldx, float* rcond,
                    float* ferr, float* berr, float _Complex* work,
                    float* rwork, int *info );
void zgbsvx_( char* fact, char* trans, int* n, int* kl,
                    int* ku, int* nrhs, double _Complex* ab,
                    int* ldab, double _Complex* afb,
                    int* ldafb, int* ipiv, char* equed, double* r,
                    double* c, double _Complex* b, int* ldb,
                    double _Complex* x, int* ldx, double* rcond,
                    double* ferr, double* berr, double _Complex* work,
                    double* rwork, int *info );
void dgbsvxx_( char* fact, char* trans, int* n, int* kl,
                     int* ku, int* nrhs, double* ab,
                     int* ldab, double* afb, int* ldafb,
                     int* ipiv, char* equed, double* r, double* c,
                     double* b, int* ldb, double* x, int* ldx,
                     double* rcond, double* rpvgrw, double* berr,
                     int* n_err_bnds, double* err_bnds_norm,
                     double* err_bnds_comp, int* nparams, double* params,
                     double* work, int* iwork, int *info );
void sgbsvxx_( char* fact, char* trans, int* n, int* kl,
                     int* ku, int* nrhs, float* ab,
                     int* ldab, float* afb, int* ldafb,
                     int* ipiv, char* equed, float* r, float* c,
                     float* b, int* ldb, float* x, int* ldx,
                     float* rcond, float* rpvgrw, float* berr,
                     int* n_err_bnds, float* err_bnds_norm,
                     float* err_bnds_comp, int* nparams, float* params,
                     float* work, int* iwork, int *info );
void zgbsvxx_( char* fact, char* trans, int* n, int* kl,
                     int* ku, int* nrhs,
                     double _Complex* ab, int* ldab,
                     double _Complex* afb, int* ldafb,
                     int* ipiv, char* equed, double* r, double* c,
                     double _Complex* b, int* ldb,
                     double _Complex* x, int* ldx, double* rcond,
                     double* rpvgrw, double* berr, int* n_err_bnds,
                     double* err_bnds_norm, double* err_bnds_comp,
                     int* nparams, double* params,
                     double _Complex* work, double* rwork,
                     int *info );
void cgbsvxx_( char* fact, char* trans, int* n, int* kl,
                     int* ku, int* nrhs, float _Complex* ab,
                     int* ldab, float _Complex* afb,
                     int* ldafb, int* ipiv, char* equed, float* r,
                     float* c, float _Complex* b, int* ldb,
                     float _Complex* x, int* ldx, float* rcond,
                     float* rpvgrw, float* berr, int* n_err_bnds,
                     float* err_bnds_norm, float* err_bnds_comp,
                     int* nparams, float* params,
                     float _Complex* work, float* rwork,
                     int *info );
void sgtsv_( int* n, int* nrhs, float* dl, float* d,
                   float* du, float* b, int* ldb, int *info );
void dgtsv_( int* n, int* nrhs, double* dl, double* d,
                   double* du, double* b, int* ldb, int *info );
void cgtsv_( int* n, int* nrhs, float _Complex* dl,
                   float _Complex* d, float _Complex* du,
                   float _Complex* b, int* ldb, int *info );
void zgtsv_( int* n, int* nrhs, double _Complex* dl,
                   double _Complex* d, double _Complex* du,
                   double _Complex* b, int* ldb,
                   int *info );
void sgtsvx_( char* fact, char* trans, int* n, int* nrhs,
                    const float* dl, const float* d, const float* du,
                    float* dlf, float* df, float* duf, float* du2,
                    int* ipiv, const float* b, int* ldb, float* x,
                    int* ldx, float* rcond, float* ferr, float* berr,
                    float* work, int* iwork, int *info );
void dgtsvx_( char* fact, char* trans, int* n, int* nrhs,
                    const double* dl, const double* d, const double* du,
                    double* dlf, double* df, double* duf, double* du2,
                    int* ipiv, const double* b, int* ldb,
                    double* x, int* ldx, double* rcond, double* ferr,
                    double* berr, double* work, int* iwork,
                    int *info );
void cgtsvx_( char* fact, char* trans, int* n, int* nrhs,
                    const float _Complex* dl,
                    const float _Complex* d,
                    const float _Complex* du, float _Complex* dlf,
                    float _Complex* df, float _Complex* duf,
                    float _Complex* du2, int* ipiv,
                    const float _Complex* b, int* ldb,
                    float _Complex* x, int* ldx, float* rcond,
                    float* ferr, float* berr, float _Complex* work,
                    float* rwork, int *info );
void zgtsvx_( char* fact, char* trans, int* n, int* nrhs,
                    const double _Complex* dl,
                    const double _Complex* d,
                    const double _Complex* du, double _Complex* dlf,
                    double _Complex* df, double _Complex* duf,
                    double _Complex* du2, int* ipiv,
                    const double _Complex* b, int* ldb,
                    double _Complex* x, int* ldx, double* rcond,
                    double* ferr, double* berr, double _Complex* work,
                    double* rwork, int *info );
void sposv_( char* uplo, int* n, int* nrhs, float* a,
                   int* lda, float* b, int* ldb,
                   int *info );
void dposv_( char* uplo, int* n, int* nrhs, double* a,
                   int* lda, double* b, int* ldb,
                   int *info );
void cposv_( char* uplo, int* n, int* nrhs,
                   float _Complex* a, int* lda,
                   float _Complex* b, int* ldb, int *info );
void zposv_( char* uplo, int* n, int* nrhs,
                   double _Complex* a, int* lda,
                   double _Complex* b, int* ldb,
                   int *info );
void dsposv_( char* uplo, int* n, int* nrhs, double* a,
                    int* lda, double* b, int* ldb, double* x,
                    int* ldx, double* work, float* swork,
                    int* iter, int *info );
void zcposv_( char* uplo, int* n, int* nrhs,
                    double _Complex* a, int* lda,
                    double _Complex* b, int* ldb,
                    double _Complex* x, int* ldx,
                    double _Complex* work, float _Complex* swork,
                    double* rwork, int* iter, int *info );
void sposvx_( char* fact, char* uplo, int* n, int* nrhs,
                    float* a, int* lda, float* af, int* ldaf,
                    char* equed, float* s, float* b, int* ldb, float* x,
                    int* ldx, float* rcond, float* ferr, float* berr,
                    float* work, int* iwork, int *info );
void dposvx_( char* fact, char* uplo, int* n, int* nrhs,
                    double* a, int* lda, double* af, int* ldaf,
                    char* equed, double* s, double* b, int* ldb,
                    double* x, int* ldx, double* rcond, double* ferr,
                    double* berr, double* work, int* iwork,
                    int *info );
void cposvx_( char* fact, char* uplo, int* n, int* nrhs,
                    float _Complex* a, int* lda,
                    float _Complex* af, int* ldaf, char* equed,
                    float* s, float _Complex* b, int* ldb,
                    float _Complex* x, int* ldx, float* rcond,
                    float* ferr, float* berr, float _Complex* work,
                    float* rwork, int *info );
void zposvx_( char* fact, char* uplo, int* n, int* nrhs,
                    double _Complex* a, int* lda,
                    double _Complex* af, int* ldaf, char* equed,
                    double* s, double _Complex* b, int* ldb,
                    double _Complex* x, int* ldx, double* rcond,
                    double* ferr, double* berr, double _Complex* work,
                    double* rwork, int *info );
void dposvxx_( char* fact, char* uplo, int* n, int* nrhs,
                     double* a, int* lda, double* af, int* ldaf,
                     char* equed, double* s, double* b, int* ldb,
                     double* x, int* ldx, double* rcond, double* rpvgrw,
                     double* berr, int* n_err_bnds,
                     double* err_bnds_norm, double* err_bnds_comp,
                     int* nparams, double* params, double* work,
                     int* iwork, int *info );
void sposvxx_( char* fact, char* uplo, int* n, int* nrhs,
                     float* a, int* lda, float* af, int* ldaf,
                     char* equed, float* s, float* b, int* ldb, float* x,
                     int* ldx, float* rcond, float* rpvgrw, float* berr,
                     int* n_err_bnds, float* err_bnds_norm,
                     float* err_bnds_comp, int* nparams, float* params,
                     float* work, int* iwork, int *info );
void zposvxx_( char* fact, char* uplo, int* n, int* nrhs,
                     double _Complex* a, int* lda,
                     double _Complex* af, int* ldaf, char* equed,
                     double* s, double _Complex* b, int* ldb,
                     double _Complex* x, int* ldx, double* rcond,
                     double* rpvgrw, double* berr, int* n_err_bnds,
                     double* err_bnds_norm, double* err_bnds_comp,
                     int* nparams, double* params,
                     double _Complex* work, double* rwork,
                     int *info );
void cposvxx_( char* fact, char* uplo, int* n, int* nrhs,
                     float _Complex* a, int* lda,
                     float _Complex* af, int* ldaf, char* equed,
                     float* s, float _Complex* b, int* ldb,
                     float _Complex* x, int* ldx, float* rcond,
                     float* rpvgrw, float* berr, int* n_err_bnds,
                     float* err_bnds_norm, float* err_bnds_comp,
                     int* nparams, float* params,
                     float _Complex* work, float* rwork,
                     int *info );
void sppsv_( char* uplo, int* n, int* nrhs, float* ap,
                   float* b, int* ldb, int *info );
void dppsv_( char* uplo, int* n, int* nrhs, double* ap,
                   double* b, int* ldb, int *info );
void cppsv_( char* uplo, int* n, int* nrhs,
                   float _Complex* ap, float _Complex* b,
                   int* ldb, int *info );
void zppsv_( char* uplo, int* n, int* nrhs,
                   double _Complex* ap, double _Complex* b,
                   int* ldb, int *info );
void sppsvx_( char* fact, char* uplo, int* n, int* nrhs,
                    float* ap, float* afp, char* equed, float* s, float* b,
                    int* ldb, float* x, int* ldx, float* rcond,
                    float* ferr, float* berr, float* work, int* iwork,
                    int *info );
void dppsvx_( char* fact, char* uplo, int* n, int* nrhs,
                    double* ap, double* afp, char* equed, double* s, double* b,
                    int* ldb, double* x, int* ldx, double* rcond,
                    double* ferr, double* berr, double* work, int* iwork,
                    int *info );
void cppsvx_( char* fact, char* uplo, int* n, int* nrhs,
                    float _Complex* ap, float _Complex* afp,
                    char* equed, float* s, float _Complex* b,
                    int* ldb, float _Complex* x, int* ldx,
                    float* rcond, float* ferr, float* berr,
                    float _Complex* work, float* rwork,
                    int *info );
void zppsvx_( char* fact, char* uplo, int* n, int* nrhs,
                    double _Complex* ap, double _Complex* afp,
                    char* equed, double* s, double _Complex* b,
                    int* ldb, double _Complex* x, int* ldx,
                    double* rcond, double* ferr, double* berr,
                    double _Complex* work, double* rwork,
                    int *info );
void spbsv_( char* uplo, int* n, int* kd, int* nrhs,
                   float* ab, int* ldab, float* b, int* ldb,
                   int *info );
void dpbsv_( char* uplo, int* n, int* kd, int* nrhs,
                   double* ab, int* ldab, double* b, int* ldb,
                   int *info );
void cpbsv_( char* uplo, int* n, int* kd, int* nrhs,
                   float _Complex* ab, int* ldab,
                   float _Complex* b, int* ldb, int *info );
void zpbsv_( char* uplo, int* n, int* kd, int* nrhs,
                   double _Complex* ab, int* ldab,
                   double _Complex* b, int* ldb,
                   int *info );
void spbsvx_( char* fact, char* uplo, int* n, int* kd,
                    int* nrhs, float* ab, int* ldab, float* afb,
                    int* ldafb, char* equed, float* s, float* b,
                    int* ldb, float* x, int* ldx, float* rcond,
                    float* ferr, float* berr, float* work, int* iwork,
                    int *info );
void dpbsvx_( char* fact, char* uplo, int* n, int* kd,
                    int* nrhs, double* ab, int* ldab, double* afb,
                    int* ldafb, char* equed, double* s, double* b,
                    int* ldb, double* x, int* ldx, double* rcond,
                    double* ferr, double* berr, double* work, int* iwork,
                    int *info );
void cpbsvx_( char* fact, char* uplo, int* n, int* kd,
                    int* nrhs, float _Complex* ab,
                    int* ldab, float _Complex* afb,
                    int* ldafb, char* equed, float* s,
                    float _Complex* b, int* ldb,
                    float _Complex* x, int* ldx, float* rcond,
                    float* ferr, float* berr, float _Complex* work,
                    float* rwork, int *info );
void zpbsvx_( char* fact, char* uplo, int* n, int* kd,
                    int* nrhs, double _Complex* ab,
                    int* ldab, double _Complex* afb,
                    int* ldafb, char* equed, double* s,
                    double _Complex* b, int* ldb,
                    double _Complex* x, int* ldx, double* rcond,
                    double* ferr, double* berr, double _Complex* work,
                    double* rwork, int *info );
void sptsv_( int* n, int* nrhs, float* d, float* e,
                   float* b, int* ldb, int *info );
void dptsv_( int* n, int* nrhs, double* d, double* e,
                   double* b, int* ldb, int *info );
void cptsv_( int* n, int* nrhs, float* d,
                   float _Complex* e, float _Complex* b,
                   int* ldb, int *info );
void zptsv_( int* n, int* nrhs, double* d,
                   double _Complex* e, double _Complex* b,
                   int* ldb, int *info );
void sptsvx_( char* fact, int* n, int* nrhs, const float* d,
                    const float* e, float* df, float* ef, const float* b,
                    int* ldb, float* x, int* ldx, float* rcond,
                    float* ferr, float* berr, float* work, int *info );
void dptsvx_( char* fact, int* n, int* nrhs,
                    const double* d, const double* e, double* df, double* ef,
                    const double* b, int* ldb, double* x,
                    int* ldx, double* rcond, double* ferr, double* berr,
                    double* work, int *info );
void cptsvx_( char* fact, int* n, int* nrhs, const float* d,
                    const float _Complex* e, float* df,
                    float _Complex* ef, const float _Complex* b,
                    int* ldb, float _Complex* x, int* ldx,
                    float* rcond, float* ferr, float* berr,
                    float _Complex* work, float* rwork,
                    int *info );
void zptsvx_( char* fact, int* n, int* nrhs,
                    const double* d, const double _Complex* e, double* df,
                    double _Complex* ef, const double _Complex* b,
                    int* ldb, double _Complex* x, int* ldx,
                    double* rcond, double* ferr, double* berr,
                    double _Complex* work, double* rwork,
                    int *info );
void ssysv_( char* uplo, int* n, int* nrhs, float* a,
                   int* lda, int* ipiv, float* b, int* ldb,
                   float* work, int* lwork, int *info );
void dsysv_( char* uplo, int* n, int* nrhs, double* a,
                   int* lda, int* ipiv, double* b,
                   int* ldb, double* work, int* lwork,
                   int *info );
void csysv_( char* uplo, int* n, int* nrhs,
                   float _Complex* a, int* lda, int* ipiv,
                   float _Complex* b, int* ldb,
                   float _Complex* work, int* lwork,
                   int *info );
void zsysv_( char* uplo, int* n, int* nrhs,
                   double _Complex* a, int* lda, int* ipiv,
                   double _Complex* b, int* ldb,
                   double _Complex* work, int* lwork,
                   int *info );
void ssysvx_( char* fact, char* uplo, int* n, int* nrhs,
                    const float* a, int* lda, float* af,
                    int* ldaf, int* ipiv, const float* b,
                    int* ldb, float* x, int* ldx, float* rcond,
                    float* ferr, float* berr, float* work, int* lwork,
                    int* iwork, int *info );
void dsysvx_( char* fact, char* uplo, int* n, int* nrhs,
                    const double* a, int* lda, double* af,
                    int* ldaf, int* ipiv, const double* b,
                    int* ldb, double* x, int* ldx, double* rcond,
                    double* ferr, double* berr, double* work, int* lwork,
                    int* iwork, int *info );
void csysvx_( char* fact, char* uplo, int* n, int* nrhs,
                    const float _Complex* a, int* lda,
                    float _Complex* af, int* ldaf,
                    int* ipiv, const float _Complex* b,
                    int* ldb, float _Complex* x, int* ldx,
                    float* rcond, float* ferr, float* berr,
                    float _Complex* work, int* lwork, float* rwork,
                    int *info );
void zsysvx_( char* fact, char* uplo, int* n, int* nrhs,
                    const double _Complex* a, int* lda,
                    double _Complex* af, int* ldaf,
                    int* ipiv, const double _Complex* b,
                    int* ldb, double _Complex* x, int* ldx,
                    double* rcond, double* ferr, double* berr,
                    double _Complex* work, int* lwork,
                    double* rwork, int *info );
void dsysvxx_( char* fact, char* uplo, int* n, int* nrhs,
                     double* a, int* lda, double* af, int* ldaf,
                     int* ipiv, char* equed, double* s, double* b,
                     int* ldb, double* x, int* ldx, double* rcond,
                     double* rpvgrw, double* berr, int* n_err_bnds,
                     double* err_bnds_norm, double* err_bnds_comp,
                     int* nparams, double* params, double* work,
                     int* iwork, int *info );
void ssysvxx_( char* fact, char* uplo, int* n, int* nrhs,
                     float* a, int* lda, float* af, int* ldaf,
                     int* ipiv, char* equed, float* s, float* b,
                     int* ldb, float* x, int* ldx, float* rcond,
                     float* rpvgrw, float* berr, int* n_err_bnds,
                     float* err_bnds_norm, float* err_bnds_comp,
                     int* nparams, float* params, float* work,
                     int* iwork, int *info );
void zsysvxx_( char* fact, char* uplo, int* n, int* nrhs,
                     double _Complex* a, int* lda,
                     double _Complex* af, int* ldaf,
                     int* ipiv, char* equed, double* s,
                     double _Complex* b, int* ldb,
                     double _Complex* x, int* ldx, double* rcond,
                     double* rpvgrw, double* berr, int* n_err_bnds,
                     double* err_bnds_norm, double* err_bnds_comp,
                     int* nparams, double* params,
                     double _Complex* work, double* rwork,
                     int *info );
void csysvxx_( char* fact, char* uplo, int* n, int* nrhs,
                     float _Complex* a, int* lda,
                     float _Complex* af, int* ldaf,
                     int* ipiv, char* equed, float* s,
                     float _Complex* b, int* ldb,
                     float _Complex* x, int* ldx, float* rcond,
                     float* rpvgrw, float* berr, int* n_err_bnds,
                     float* err_bnds_norm, float* err_bnds_comp,
                     int* nparams, float* params,
                     float _Complex* work, float* rwork,
                     int *info );
void chesv_( char* uplo, int* n, int* nrhs,
                   float _Complex* a, int* lda, int* ipiv,
                   float _Complex* b, int* ldb,
                   float _Complex* work, int* lwork,
                   int *info );
void zhesv_( char* uplo, int* n, int* nrhs,
                   double _Complex* a, int* lda, int* ipiv,
                   double _Complex* b, int* ldb,
                   double _Complex* work, int* lwork,
                   int *info );
void chesvx_( char* fact, char* uplo, int* n, int* nrhs,
                    const float _Complex* a, int* lda,
                    float _Complex* af, int* ldaf,
                    int* ipiv, const float _Complex* b,
                    int* ldb, float _Complex* x, int* ldx,
                    float* rcond, float* ferr, float* berr,
                    float _Complex* work, int* lwork, float* rwork,
                    int *info );
void zhesvx_( char* fact, char* uplo, int* n, int* nrhs,
                    const double _Complex* a, int* lda,
                    double _Complex* af, int* ldaf,
                    int* ipiv, const double _Complex* b,
                    int* ldb, double _Complex* x, int* ldx,
                    double* rcond, double* ferr, double* berr,
                    double _Complex* work, int* lwork,
                    double* rwork, int *info );
void zhesvxx_( char* fact, char* uplo, int* n, int* nrhs,
                     double _Complex* a, int* lda,
                     double _Complex* af, int* ldaf,
                     int* ipiv, char* equed, double* s,
                     double _Complex* b, int* ldb,
                     double _Complex* x, int* ldx, double* rcond,
                     double* rpvgrw, double* berr, int* n_err_bnds,
                     double* err_bnds_norm, double* err_bnds_comp,
                     int* nparams, double* params,
                     double _Complex* work, double* rwork,
                     int *info );
void chesvxx_( char* fact, char* uplo, int* n, int* nrhs,
                     float _Complex* a, int* lda,
                     float _Complex* af, int* ldaf,
                     int* ipiv, char* equed, float* s,
                     float _Complex* b, int* ldb,
                     float _Complex* x, int* ldx, float* rcond,
                     float* rpvgrw, float* berr, int* n_err_bnds,
                     float* err_bnds_norm, float* err_bnds_comp,
                     int* nparams, float* params,
                     float _Complex* work, float* rwork,
                     int *info );
void sspsv_( char* uplo, int* n, int* nrhs, float* ap,
                   int* ipiv, float* b, int* ldb,
                   int *info );
void dspsv_( char* uplo, int* n, int* nrhs, double* ap,
                   int* ipiv, double* b, int* ldb,
                   int *info );
void cspsv_( char* uplo, int* n, int* nrhs,
                   float _Complex* ap, int* ipiv,
                   float _Complex* b, int* ldb, int *info );
void zspsv_( char* uplo, int* n, int* nrhs,
                   double _Complex* ap, int* ipiv,
                   double _Complex* b, int* ldb,
                   int *info );
void sspsvx_( char* fact, char* uplo, int* n, int* nrhs,
                    const float* ap, float* afp, int* ipiv,
                    const float* b, int* ldb, float* x, int* ldx,
                    float* rcond, float* ferr, float* berr, float* work,
                    int* iwork, int *info );
void dspsvx_( char* fact, char* uplo, int* n, int* nrhs,
                    const double* ap, double* afp, int* ipiv,
                    const double* b, int* ldb, double* x,
                    int* ldx, double* rcond, double* ferr, double* berr,
                    double* work, int* iwork, int *info );
void cspsvx_( char* fact, char* uplo, int* n, int* nrhs,
                    const float _Complex* ap, float _Complex* afp,
                    int* ipiv, const float _Complex* b,
                    int* ldb, float _Complex* x, int* ldx,
                    float* rcond, float* ferr, float* berr,
                    float _Complex* work, float* rwork,
                    int *info );
void zspsvx_( char* fact, char* uplo, int* n, int* nrhs,
                    const double _Complex* ap, double _Complex* afp,
                    int* ipiv, const double _Complex* b,
                    int* ldb, double _Complex* x, int* ldx,
                    double* rcond, double* ferr, double* berr,
                    double _Complex* work, double* rwork,
                    int *info );
void chpsv_( char* uplo, int* n, int* nrhs,
                   float _Complex* ap, int* ipiv,
                   float _Complex* b, int* ldb, int *info );
void zhpsv_( char* uplo, int* n, int* nrhs,
                   double _Complex* ap, int* ipiv,
                   double _Complex* b, int* ldb,
                   int *info );
void chpsvx_( char* fact, char* uplo, int* n, int* nrhs,
                    const float _Complex* ap, float _Complex* afp,
                    int* ipiv, const float _Complex* b,
                    int* ldb, float _Complex* x, int* ldx,
                    float* rcond, float* ferr, float* berr,
                    float _Complex* work, float* rwork,
                    int *info );
void zhpsvx_( char* fact, char* uplo, int* n, int* nrhs,
                    const double _Complex* ap, double _Complex* afp,
                    int* ipiv, const double _Complex* b,
                    int* ldb, double _Complex* x, int* ldx,
                    double* rcond, double* ferr, double* berr,
                    double _Complex* work, double* rwork,
                    int *info );
void sgeqrf_( int* m, int* n, float* a, int* lda,
                    float* tau, float* work, int* lwork,
                    int *info );
void dgeqrf_( int* m, int* n, double* a, int* lda,
                    double* tau, double* work, int* lwork,
                    int *info );
void cgeqrf_( int* m, int* n, float _Complex* a,
                    int* lda, float _Complex* tau,
                    float _Complex* work, int* lwork,
                    int *info );
void zgeqrf_( int* m, int* n, double _Complex* a,
                    int* lda, double _Complex* tau,
                    double _Complex* work, int* lwork,
                    int *info );
void sgeqpf_( int* m, int* n, float* a, int* lda,
                    int* jpvt, float* tau, float* work,
                    int *info );
void dgeqpf_( int* m, int* n, double* a, int* lda,
                    int* jpvt, double* tau, double* work,
                    int *info );
void cgeqpf_( int* m, int* n, float _Complex* a,
                    int* lda, int* jpvt,
                    float _Complex* tau, float _Complex* work,
                    float* rwork, int *info );
void zgeqpf_( int* m, int* n, double _Complex* a,
                    int* lda, int* jpvt,
                    double _Complex* tau, double _Complex* work,
                    double* rwork, int *info );
void sgeqp3_( int* m, int* n, float* a, int* lda,
                    int* jpvt, float* tau, float* work,
                    int* lwork, int *info );
void dgeqp3_( int* m, int* n, double* a, int* lda,
                    int* jpvt, double* tau, double* work,
                    int* lwork, int *info );
void cgeqp3_( int* m, int* n, float _Complex* a,
                    int* lda, int* jpvt,
                    float _Complex* tau, float _Complex* work,
                    int* lwork, float* rwork, int *info );
void zgeqp3_( int* m, int* n, double _Complex* a,
                    int* lda, int* jpvt,
                    double _Complex* tau, double _Complex* work,
                    int* lwork, double* rwork, int *info );
void sorgqr_( int* m, int* n, int* k, float* a,
                    int* lda, const float* tau, float* work,
                    int* lwork, int *info );
void dorgqr_( int* m, int* n, int* k, double* a,
                    int* lda, const double* tau, double* work,
                    int* lwork, int *info );
void sormqr_( char* side, char* trans, int* m, int* n,
                    int* k, const float* a, int* lda,
                    const float* tau, float* c, int* ldc, float* work,
                    int* lwork, int *info );
void dormqr_( char* side, char* trans, int* m, int* n,
                    int* k, const double* a, int* lda,
                    const double* tau, double* c, int* ldc, double* work,
                    int* lwork, int *info );
void cungqr_( int* m, int* n, int* k,
                    float _Complex* a, int* lda,
                    const float _Complex* tau, float _Complex* work,
                    int* lwork, int *info );
void zungqr_( int* m, int* n, int* k,
                    double _Complex* a, int* lda,
                    const double _Complex* tau,
                    double _Complex* work, int* lwork,
                    int *info );
void cunmqr_( char* side, char* trans, int* m, int* n,
                    int* k, const float _Complex* a,
                    int* lda, const float _Complex* tau,
                    float _Complex* c, int* ldc,
                    float _Complex* work, int* lwork,
                    int *info );
void zunmqr_( char* side, char* trans, int* m, int* n,
                    int* k, const double _Complex* a,
                    int* lda, const double _Complex* tau,
                    double _Complex* c, int* ldc,
                    double _Complex* work, int* lwork,
                    int *info );
void sgelqf_( int* m, int* n, float* a, int* lda,
                    float* tau, float* work, int* lwork,
                    int *info );
void dgelqf_( int* m, int* n, double* a, int* lda,
                    double* tau, double* work, int* lwork,
                    int *info );
void cgelqf_( int* m, int* n, float _Complex* a,
                    int* lda, float _Complex* tau,
                    float _Complex* work, int* lwork,
                    int *info );
void zgelqf_( int* m, int* n, double _Complex* a,
                    int* lda, double _Complex* tau,
                    double _Complex* work, int* lwork,
                    int *info );
void sorglq_( int* m, int* n, int* k, float* a,
                    int* lda, const float* tau, float* work,
                    int* lwork, int *info );
void dorglq_( int* m, int* n, int* k, double* a,
                    int* lda, const double* tau, double* work,
                    int* lwork, int *info );
void sormlq_( char* side, char* trans, int* m, int* n,
                    int* k, const float* a, int* lda,
                    const float* tau, float* c, int* ldc, float* work,
                    int* lwork, int *info );
void dormlq_( char* side, char* trans, int* m, int* n,
                    int* k, const double* a, int* lda,
                    const double* tau, double* c, int* ldc, double* work,
                    int* lwork, int *info );
void cunglq_( int* m, int* n, int* k,
                    float _Complex* a, int* lda,
                    const float _Complex* tau, float _Complex* work,
                    int* lwork, int *info );
void zunglq_( int* m, int* n, int* k,
                    double _Complex* a, int* lda,
                    const double _Complex* tau,
                    double _Complex* work, int* lwork,
                    int *info );
void cunmlq_( char* side, char* trans, int* m, int* n,
                    int* k, const float _Complex* a,
                    int* lda, const float _Complex* tau,
                    float _Complex* c, int* ldc,
                    float _Complex* work, int* lwork,
                    int *info );
void zunmlq_( char* side, char* trans, int* m, int* n,
                    int* k, const double _Complex* a,
                    int* lda, const double _Complex* tau,
                    double _Complex* c, int* ldc,
                    double _Complex* work, int* lwork,
                    int *info );
void sgeqlf_( int* m, int* n, float* a, int* lda,
                    float* tau, float* work, int* lwork,
                    int *info );
void dgeqlf_( int* m, int* n, double* a, int* lda,
                    double* tau, double* work, int* lwork,
                    int *info );
void cgeqlf_( int* m, int* n, float _Complex* a,
                    int* lda, float _Complex* tau,
                    float _Complex* work, int* lwork,
                    int *info );
void zgeqlf_( int* m, int* n, double _Complex* a,
                    int* lda, double _Complex* tau,
                    double _Complex* work, int* lwork,
                    int *info );
void sorgql_( int* m, int* n, int* k, float* a,
                    int* lda, const float* tau, float* work,
                    int* lwork, int *info );
void dorgql_( int* m, int* n, int* k, double* a,
                    int* lda, const double* tau, double* work,
                    int* lwork, int *info );
void cungql_( int* m, int* n, int* k,
                    float _Complex* a, int* lda,
                    const float _Complex* tau, float _Complex* work,
                    int* lwork, int *info );
void zungql_( int* m, int* n, int* k,
                    double _Complex* a, int* lda,
                    const double _Complex* tau,
                    double _Complex* work, int* lwork,
                    int *info );
void sormql_( char* side, char* trans, int* m, int* n,
                    int* k, const float* a, int* lda,
                    const float* tau, float* c, int* ldc, float* work,
                    int* lwork, int *info );
void dormql_( char* side, char* trans, int* m, int* n,
                    int* k, const double* a, int* lda,
                    const double* tau, double* c, int* ldc, double* work,
                    int* lwork, int *info );
void cunmql_( char* side, char* trans, int* m, int* n,
                    int* k, const float _Complex* a,
                    int* lda, const float _Complex* tau,
                    float _Complex* c, int* ldc,
                    float _Complex* work, int* lwork,
                    int *info );
void zunmql_( char* side, char* trans, int* m, int* n,
                    int* k, const double _Complex* a,
                    int* lda, const double _Complex* tau,
                    double _Complex* c, int* ldc,
                    double _Complex* work, int* lwork,
                    int *info );
void sgerqf_( int* m, int* n, float* a, int* lda,
                    float* tau, float* work, int* lwork,
                    int *info );
void dgerqf_( int* m, int* n, double* a, int* lda,
                    double* tau, double* work, int* lwork,
                    int *info );
void cgerqf_( int* m, int* n, float _Complex* a,
                    int* lda, float _Complex* tau,
                    float _Complex* work, int* lwork,
                    int *info );
void zgerqf_( int* m, int* n, double _Complex* a,
                    int* lda, double _Complex* tau,
                    double _Complex* work, int* lwork,
                    int *info );
void sorgrq_( int* m, int* n, int* k, float* a,
                    int* lda, const float* tau, float* work,
                    int* lwork, int *info );
void dorgrq_( int* m, int* n, int* k, double* a,
                    int* lda, const double* tau, double* work,
                    int* lwork, int *info );
void cungrq_( int* m, int* n, int* k,
                    float _Complex* a, int* lda,
                    const float _Complex* tau, float _Complex* work,
                    int* lwork, int *info );
void zungrq_( int* m, int* n, int* k,
                    double _Complex* a, int* lda,
                    const double _Complex* tau,
                    double _Complex* work, int* lwork,
                    int *info );
void sormrq_( char* side, char* trans, int* m, int* n,
                    int* k, const float* a, int* lda,
                    const float* tau, float* c, int* ldc, float* work,
                    int* lwork, int *info );
void dormrq_( char* side, char* trans, int* m, int* n,
                    int* k, const double* a, int* lda,
                    const double* tau, double* c, int* ldc, double* work,
                    int* lwork, int *info );
void cunmrq_( char* side, char* trans, int* m, int* n,
                    int* k, const float _Complex* a,
                    int* lda, const float _Complex* tau,
                    float _Complex* c, int* ldc,
                    float _Complex* work, int* lwork,
                    int *info );
void zunmrq_( char* side, char* trans, int* m, int* n,
                    int* k, const double _Complex* a,
                    int* lda, const double _Complex* tau,
                    double _Complex* c, int* ldc,
                    double _Complex* work, int* lwork,
                    int *info );
void stzrzf_( int* m, int* n, float* a, int* lda,
                    float* tau, float* work, int* lwork,
                    int *info );
void dtzrzf_( int* m, int* n, double* a, int* lda,
                    double* tau, double* work, int* lwork,
                    int *info );
void ctzrzf_( int* m, int* n, float _Complex* a,
                    int* lda, float _Complex* tau,
                    float _Complex* work, int* lwork,
                    int *info );
void ztzrzf_( int* m, int* n, double _Complex* a,
                    int* lda, double _Complex* tau,
                    double _Complex* work, int* lwork,
                    int *info );
void sormrz_( char* side, char* trans, int* m, int* n,
                    int* k, int* l, const float* a,
                    int* lda, const float* tau, float* c,
                    int* ldc, float* work, int* lwork,
                    int *info );
void dormrz_( char* side, char* trans, int* m, int* n,
                    int* k, int* l, const double* a,
                    int* lda, const double* tau, double* c,
                    int* ldc, double* work, int* lwork,
                    int *info );
void cunmrz_( char* side, char* trans, int* m, int* n,
                    int* k, int* l, const float _Complex* a,
                    int* lda, const float _Complex* tau,
                    float _Complex* c, int* ldc,
                    float _Complex* work, int* lwork,
                    int *info );
void zunmrz_( char* side, char* trans, int* m, int* n,
                    int* k, int* l,
                    const double _Complex* a, int* lda,
                    const double _Complex* tau, double _Complex* c,
                    int* ldc, double _Complex* work,
                    int* lwork, int *info );
void sggqrf_( int* n, int* m, int* p, float* a,
                    int* lda, float* taua, float* b, int* ldb,
                    float* taub, float* work, int* lwork,
                    int *info );
void dggqrf_( int* n, int* m, int* p, double* a,
                    int* lda, double* taua, double* b, int* ldb,
                    double* taub, double* work, int* lwork,
                    int *info );
void cggqrf_( int* n, int* m, int* p,
                    float _Complex* a, int* lda,
                    float _Complex* taua, float _Complex* b,
                    int* ldb, float _Complex* taub,
                    float _Complex* work, int* lwork,
                    int *info );
void zggqrf_( int* n, int* m, int* p,
                    double _Complex* a, int* lda,
                    double _Complex* taua, double _Complex* b,
                    int* ldb, double _Complex* taub,
                    double _Complex* work, int* lwork,
                    int *info );
void sggrqf_( int* m, int* p, int* n, float* a,
                    int* lda, float* taua, float* b, int* ldb,
                    float* taub, float* work, int* lwork,
                    int *info );
void dggrqf_( int* m, int* p, int* n, double* a,
                    int* lda, double* taua, double* b, int* ldb,
                    double* taub, double* work, int* lwork,
                    int *info );
void cggrqf_( int* m, int* p, int* n,
                    float _Complex* a, int* lda,
                    float _Complex* taua, float _Complex* b,
                    int* ldb, float _Complex* taub,
                    float _Complex* work, int* lwork,
                    int *info );
void zggrqf_( int* m, int* p, int* n,
                    double _Complex* a, int* lda,
                    double _Complex* taua, double _Complex* b,
                    int* ldb, double _Complex* taub,
                    double _Complex* work, int* lwork,
                    int *info );
void sgebrd_( int* m, int* n, float* a, int* lda,
                    float* d, float* e, float* tauq, float* taup, float* work,
                    int* lwork, int *info );
void dgebrd_( int* m, int* n, double* a, int* lda,
                    double* d, double* e, double* tauq, double* taup,
                    double* work, int* lwork, int *info );
void cgebrd_( int* m, int* n, float _Complex* a,
                    int* lda, float* d, float* e,
                    float _Complex* tauq, float _Complex* taup,
                    float _Complex* work, int* lwork,
                    int *info );
void zgebrd_( int* m, int* n, double _Complex* a,
                    int* lda, double* d, double* e,
                    double _Complex* tauq, double _Complex* taup,
                    double _Complex* work, int* lwork,
                    int *info );
void sgbbrd_( char* vect, int* m, int* n, int* ncc,
                    int* kl, int* ku, float* ab, int* ldab,
                    float* d, float* e, float* q, int* ldq, float* pt,
                    int* ldpt, float* c, int* ldc, float* work,
                    int *info );
void dgbbrd_( char* vect, int* m, int* n, int* ncc,
                    int* kl, int* ku, double* ab,
                    int* ldab, double* d, double* e, double* q,
                    int* ldq, double* pt, int* ldpt, double* c,
                    int* ldc, double* work, int *info );
void cgbbrd_( char* vect, int* m, int* n, int* ncc,
                    int* kl, int* ku, float _Complex* ab,
                    int* ldab, float* d, float* e,
                    float _Complex* q, int* ldq,
                    float _Complex* pt, int* ldpt,
                    float _Complex* c, int* ldc,
                    float _Complex* work, float* rwork,
                    int *info );
void zgbbrd_( char* vect, int* m, int* n, int* ncc,
                    int* kl, int* ku, double _Complex* ab,
                    int* ldab, double* d, double* e,
                    double _Complex* q, int* ldq,
                    double _Complex* pt, int* ldpt,
                    double _Complex* c, int* ldc,
                    double _Complex* work, double* rwork,
                    int *info );
void sorgbr_( char* vect, int* m, int* n, int* k,
                    float* a, int* lda, const float* tau, float* work,
                    int* lwork, int *info );
void dorgbr_( char* vect, int* m, int* n, int* k,
                    double* a, int* lda, const double* tau, double* work,
                    int* lwork, int *info );
void sormbr_( char* vect, char* side, char* trans, int* m,
                    int* n, int* k, const float* a,
                    int* lda, const float* tau, float* c,
                    int* ldc, float* work, int* lwork,
                    int *info );
void dormbr_( char* vect, char* side, char* trans, int* m,
                    int* n, int* k, const double* a,
                    int* lda, const double* tau, double* c,
                    int* ldc, double* work, int* lwork,
                    int *info );
void cungbr_( char* vect, int* m, int* n, int* k,
                    float _Complex* a, int* lda,
                    const float _Complex* tau, float _Complex* work,
                    int* lwork, int *info );
void zungbr_( char* vect, int* m, int* n, int* k,
                    double _Complex* a, int* lda,
                    const double _Complex* tau,
                    double _Complex* work, int* lwork,
                    int *info );
void cunmbr_( char* vect, char* side, char* trans, int* m,
                    int* n, int* k, const float _Complex* a,
                    int* lda, const float _Complex* tau,
                    float _Complex* c, int* ldc,
                    float _Complex* work, int* lwork,
                    int *info );
void zunmbr_( char* vect, char* side, char* trans, int* m,
                    int* n, int* k,
                    const double _Complex* a, int* lda,
                    const double _Complex* tau, double _Complex* c,
                    int* ldc, double _Complex* work,
                    int* lwork, int *info );
void sbdsqr_( char* uplo, int* n, int* ncvt,
                    int* nru, int* ncc, float* d, float* e,
                    float* vt, int* ldvt, float* u, int* ldu,
                    float* c, int* ldc, float* work, int *info );
void dbdsqr_( char* uplo, int* n, int* ncvt,
                    int* nru, int* ncc, double* d, double* e,
                    double* vt, int* ldvt, double* u, int* ldu,
                    double* c, int* ldc, double* work,
                    int *info );
void cbdsqr_( char* uplo, int* n, int* ncvt,
                    int* nru, int* ncc, float* d, float* e,
                    float _Complex* vt, int* ldvt,
                    float _Complex* u, int* ldu,
                    float _Complex* c, int* ldc, float* work,
                    int *info );
void zbdsqr_( char* uplo, int* n, int* ncvt,
                    int* nru, int* ncc, double* d, double* e,
                    double _Complex* vt, int* ldvt,
                    double _Complex* u, int* ldu,
                    double _Complex* c, int* ldc, double* work,
                    int *info );
void sbdsdc_( char* uplo, char* compq, int* n, float* d, float* e,
                    float* u, int* ldu, float* vt, int* ldvt,
                    float* q, int* iq, float* work, int* iwork,
                    int *info );
void dbdsdc_( char* uplo, char* compq, int* n, double* d,
                    double* e, double* u, int* ldu, double* vt,
                    int* ldvt, double* q, int* iq, double* work,
                    int* iwork, int *info );
void ssytrd_( char* uplo, int* n, float* a, int* lda,
                    float* d, float* e, float* tau, float* work,
                    int* lwork, int *info );
void dsytrd_( char* uplo, int* n, double* a, int* lda,
                    double* d, double* e, double* tau, double* work,
                    int* lwork, int *info );
void sorgtr_( char* uplo, int* n, float* a, int* lda,
                    const float* tau, float* work, int* lwork,
                    int *info );
void dorgtr_( char* uplo, int* n, double* a, int* lda,
                    const double* tau, double* work, int* lwork,
                    int *info );
void sormtr_( char* side, char* uplo, char* trans, int* m,
                    int* n, const float* a, int* lda,
                    const float* tau, float* c, int* ldc, float* work,
                    int* lwork, int *info );
void dormtr_( char* side, char* uplo, char* trans, int* m,
                    int* n, const double* a, int* lda,
                    const double* tau, double* c, int* ldc, double* work,
                    int* lwork, int *info );
void chetrd_( char* uplo, int* n, float _Complex* a,
                    int* lda, float* d, float* e,
                    float _Complex* tau, float _Complex* work,
                    int* lwork, int *info );
void zhetrd_( char* uplo, int* n, double _Complex* a,
                    int* lda, double* d, double* e,
                    double _Complex* tau, double _Complex* work,
                    int* lwork, int *info );
void cungtr_( char* uplo, int* n, float _Complex* a,
                    int* lda, const float _Complex* tau,
                    float _Complex* work, int* lwork,
                    int *info );
void zungtr_( char* uplo, int* n, double _Complex* a,
                    int* lda, const double _Complex* tau,
                    double _Complex* work, int* lwork,
                    int *info );
void cunmtr_( char* side, char* uplo, char* trans, int* m,
                    int* n, const float _Complex* a,
                    int* lda, const float _Complex* tau,
                    float _Complex* c, int* ldc,
                    float _Complex* work, int* lwork,
                    int *info );
void zunmtr_( char* side, char* uplo, char* trans, int* m,
                    int* n, const double _Complex* a,
                    int* lda, const double _Complex* tau,
                    double _Complex* c, int* ldc,
                    double _Complex* work, int* lwork,
                    int *info );
void ssptrd_( char* uplo, int* n, float* ap, float* d, float* e,
                    float* tau, int *info );
void dsptrd_( char* uplo, int* n, double* ap, double* d, double* e,
                    double* tau, int *info );
void sopgtr_( char* uplo, int* n, const float* ap,
                    const float* tau, float* q, int* ldq, float* work,
                    int *info );
void dopgtr_( char* uplo, int* n, const double* ap,
                    const double* tau, double* q, int* ldq, double* work,
                    int *info );
void sopmtr_( char* side, char* uplo, char* trans, int* m,
                    int* n, const float* ap, const float* tau, float* c,
                    int* ldc, float* work, int *info );
void dopmtr_( char* side, char* uplo, char* trans, int* m,
                    int* n, const double* ap, const double* tau,
                    double* c, int* ldc, double* work,
                    int *info );
void chptrd_( char* uplo, int* n, float _Complex* ap,
                    float* d, float* e, float _Complex* tau,
                    int *info );
void zhptrd_( char* uplo, int* n, double _Complex* ap,
                    double* d, double* e, double _Complex* tau,
                    int *info );
void cupgtr_( char* uplo, int* n, const float _Complex* ap,
                    const float _Complex* tau, float _Complex* q,
                    int* ldq, float _Complex* work,
                    int *info );
void zupgtr_( char* uplo, int* n, const double _Complex* ap,
                    const double _Complex* tau, double _Complex* q,
                    int* ldq, double _Complex* work,
                    int *info );
void cupmtr_( char* side, char* uplo, char* trans, int* m,
                    int* n, const float _Complex* ap,
                    const float _Complex* tau, float _Complex* c,
                    int* ldc, float _Complex* work,
                    int *info );
void zupmtr_( char* side, char* uplo, char* trans, int* m,
                    int* n, const double _Complex* ap,
                    const double _Complex* tau, double _Complex* c,
                    int* ldc, double _Complex* work,
                    int *info );
void ssbtrd_( char* vect, char* uplo, int* n, int* kd,
                    float* ab, int* ldab, float* d, float* e, float* q,
                    int* ldq, float* work, int *info );
void dsbtrd_( char* vect, char* uplo, int* n, int* kd,
                    double* ab, int* ldab, double* d, double* e,
                    double* q, int* ldq, double* work,
                    int *info );
void chbtrd_( char* vect, char* uplo, int* n, int* kd,
                    float _Complex* ab, int* ldab, float* d,
                    float* e, float _Complex* q, int* ldq,
                    float _Complex* work, int *info );
void zhbtrd_( char* vect, char* uplo, int* n, int* kd,
                    double _Complex* ab, int* ldab, double* d,
                    double* e, double _Complex* q, int* ldq,
                    double _Complex* work, int *info );
void ssterf_( int* n, float* d, float* e, int *info );
void dsterf_( int* n, double* d, double* e, int *info );
void ssteqr_( char* compz, int* n, float* d, float* e, float* z,
                    int* ldz, float* work, int *info );
void dsteqr_( char* compz, int* n, double* d, double* e, double* z,
                    int* ldz, double* work, int *info );
void csteqr_( char* compz, int* n, float* d, float* e,
                    float _Complex* z, int* ldz, float* work,
                    int *info );
void zsteqr_( char* compz, int* n, double* d, double* e,
                    double _Complex* z, int* ldz, double* work,
                    int *info );
void sstemr_( char* jobz, char* range, int* n, float* d, float* e,
                    float* vl, float* vu, int* il, int* iu,
                    int* m, float* w, float* z, int* ldz,
                    int* nzc, int* isuppz, int* tryrac,
                    float* work, int* lwork, int* iwork,
                    int* liwork, int *info );
void dstemr_( char* jobz, char* range, int* n, double* d,
                    double* e, double* vl, double* vu, int* il,
                    int* iu, int* m, double* w, double* z,
                    int* ldz, int* nzc, int* isuppz,
                    int* tryrac, double* work, int* lwork,
                    int* iwork, int* liwork, int *info );
void cstemr_( char* jobz, char* range, int* n, float* d, float* e,
                    float* vl, float* vu, int* il, int* iu,
                    int* m, float* w, float _Complex* z,
                    int* ldz, int* nzc, int* isuppz,
                    int* tryrac, float* work, int* lwork,
                    int* iwork, int* liwork, int *info );
void zstemr_( char* jobz, char* range, int* n, double* d,
                    double* e, double* vl, double* vu, int* il,
                    int* iu, int* m, double* w,
                    double _Complex* z, int* ldz, int* nzc,
                    int* isuppz, int* tryrac, double* work,
                    int* lwork, int* iwork, int* liwork,
                    int *info );
void sstedc_( char* compz, int* n, float* d, float* e, float* z,
                    int* ldz, float* work, int* lwork,
                    int* iwork, int* liwork, int *info );
void dstedc_( char* compz, int* n, double* d, double* e, double* z,
                    int* ldz, double* work, int* lwork,
                    int* iwork, int* liwork, int *info );
void cstedc_( char* compz, int* n, float* d, float* e,
                    float _Complex* z, int* ldz,
                    float _Complex* work, int* lwork, float* rwork,
                    int* lrwork, int* iwork, int* liwork,
                    int *info );
void zstedc_( char* compz, int* n, double* d, double* e,
                    double _Complex* z, int* ldz,
                    double _Complex* work, int* lwork,
                    double* rwork, int* lrwork, int* iwork,
                    int* liwork, int *info );
void sstegr_( char* jobz, char* range, int* n, float* d, float* e,
                    float* vl, float* vu, int* il, int* iu,
                    float* abstol, int* m, float* w, float* z,
                    int* ldz, int* isuppz, float* work,
                    int* lwork, int* iwork, int* liwork,
                    int *info );
void dstegr_( char* jobz, char* range, int* n, double* d,
                    double* e, double* vl, double* vu, int* il,
                    int* iu, double* abstol, int* m, double* w,
                    double* z, int* ldz, int* isuppz,
                    double* work, int* lwork, int* iwork,
                    int* liwork, int *info );
void cstegr_( char* jobz, char* range, int* n, float* d, float* e,
                    float* vl, float* vu, int* il, int* iu,
                    float* abstol, int* m, float* w,
                    float _Complex* z, int* ldz,
                    int* isuppz, float* work, int* lwork,
                    int* iwork, int* liwork, int *info );
void zstegr_( char* jobz, char* range, int* n, double* d,
                    double* e, double* vl, double* vu, int* il,
                    int* iu, double* abstol, int* m, double* w,
                    double _Complex* z, int* ldz,
                    int* isuppz, double* work, int* lwork,
                    int* iwork, int* liwork, int *info );
void spteqr_( char* compz, int* n, float* d, float* e, float* z,
                    int* ldz, float* work, int *info );
void dpteqr_( char* compz, int* n, double* d, double* e, double* z,
                    int* ldz, double* work, int *info );
void cpteqr_( char* compz, int* n, float* d, float* e,
                    float _Complex* z, int* ldz, float* work,
                    int *info );
void zpteqr_( char* compz, int* n, double* d, double* e,
                    double _Complex* z, int* ldz, double* work,
                    int *info );
void sstebz_( char* range, char* order, int* n, float* vl,
                    float* vu, int* il, int* iu, float* abstol,
                    const float* d, const float* e, int* m,
                    int* nsplit, float* w, int* iblock,
                    int* isplit, float* work, int* iwork,
                    int *info );
void dstebz_( char* range, char* order, int* n, double* vl,
                    double* vu, int* il, int* iu, double* abstol,
                    const double* d, const double* e, int* m,
                    int* nsplit, double* w, int* iblock,
                    int* isplit, double* work, int* iwork,
                    int *info );
void sstein_( int* n, const float* d, const float* e,
                    int* m, const float* w, const int* iblock,
                    const int* isplit, float* z, int* ldz,
                    float* work, int* iwork, int* ifailv,
                    int *info );
void dstein_( int* n, const double* d, const double* e,
                    int* m, const double* w, const int* iblock,
                    const int* isplit, double* z, int* ldz,
                    double* work, int* iwork, int* ifailv,
                    int *info );
void cstein_( int* n, const float* d, const float* e,
                    int* m, const float* w, const int* iblock,
                    const int* isplit, float _Complex* z,
                    int* ldz, float* work, int* iwork,
                    int* ifailv, int *info );
void zstein_( int* n, const double* d, const double* e,
                    int* m, const double* w, const int* iblock,
                    const int* isplit, double _Complex* z,
                    int* ldz, double* work, int* iwork,
                    int* ifailv, int *info );
void sdisna_( char* job, int* m, int* n, const float* d,
                    float* sep, int *info );
void ddisna_( char* job, int* m, int* n, const double* d,
                    double* sep, int *info );
void ssygst_( int* itype, char* uplo, int* n, float* a,
                    int* lda, const float* b, int* ldb,
                    int *info );
void dsygst_( int* itype, char* uplo, int* n, double* a,
                    int* lda, const double* b, int* ldb,
                    int *info );
void chegst_( int* itype, char* uplo, int* n,
                    float _Complex* a, int* lda,
                    const float _Complex* b, int* ldb,
                    int *info );
void zhegst_( int* itype, char* uplo, int* n,
                    double _Complex* a, int* lda,
                    const double _Complex* b, int* ldb,
                    int *info );
void sspgst_( int* itype, char* uplo, int* n, float* ap,
                    const float* bp, int *info );
void dspgst_( int* itype, char* uplo, int* n, double* ap,
                    const double* bp, int *info );
void chpgst_( int* itype, char* uplo, int* n,
                    float _Complex* ap, const float _Complex* bp,
                    int *info );
void zhpgst_( int* itype, char* uplo, int* n,
                    double _Complex* ap, const double _Complex* bp,
                    int *info );
void ssbgst_( char* vect, char* uplo, int* n, int* ka,
                    int* kb, float* ab, int* ldab,
                    const float* bb, int* ldbb, float* x,
                    int* ldx, float* work, int *info );
void dsbgst_( char* vect, char* uplo, int* n, int* ka,
                    int* kb, double* ab, int* ldab,
                    const double* bb, int* ldbb, double* x,
                    int* ldx, double* work, int *info );
void chbgst_( char* vect, char* uplo, int* n, int* ka,
                    int* kb, float _Complex* ab, int* ldab,
                    const float _Complex* bb, int* ldbb,
                    float _Complex* x, int* ldx,
                    float _Complex* work, float* rwork,
                    int *info );
void zhbgst_( char* vect, char* uplo, int* n, int* ka,
                    int* kb, double _Complex* ab, int* ldab,
                    const double _Complex* bb, int* ldbb,
                    double _Complex* x, int* ldx,
                    double _Complex* work, double* rwork,
                    int *info );
void spbstf_( char* uplo, int* n, int* kb, float* bb,
                    int* ldbb, int *info );
void dpbstf_( char* uplo, int* n, int* kb, double* bb,
                    int* ldbb, int *info );
void cpbstf_( char* uplo, int* n, int* kb,
                    float _Complex* bb, int* ldbb,
                    int *info );
void zpbstf_( char* uplo, int* n, int* kb,
                    double _Complex* bb, int* ldbb,
                    int *info );
void sgehrd_( int* n, int* ilo, int* ihi, float* a,
                    int* lda, float* tau, float* work, int* lwork,
                    int *info );
void dgehrd_( int* n, int* ilo, int* ihi, double* a,
                    int* lda, double* tau, double* work,
                    int* lwork, int *info );
void cgehrd_( int* n, int* ilo, int* ihi,
                    float _Complex* a, int* lda,
                    float _Complex* tau, float _Complex* work,
                    int* lwork, int *info );
void zgehrd_( int* n, int* ilo, int* ihi,
                    double _Complex* a, int* lda,
                    double _Complex* tau, double _Complex* work,
                    int* lwork, int *info );
void sorghr_( int* n, int* ilo, int* ihi, float* a,
                    int* lda, const float* tau, float* work,
                    int* lwork, int *info );
void dorghr_( int* n, int* ilo, int* ihi, double* a,
                    int* lda, const double* tau, double* work,
                    int* lwork, int *info );
void sormhr_( char* side, char* trans, int* m, int* n,
                    int* ilo, int* ihi, const float* a,
                    int* lda, const float* tau, float* c,
                    int* ldc, float* work, int* lwork,
                    int *info );
void dormhr_( char* side, char* trans, int* m, int* n,
                    int* ilo, int* ihi, const double* a,
                    int* lda, const double* tau, double* c,
                    int* ldc, double* work, int* lwork,
                    int *info );
void cunghr_( int* n, int* ilo, int* ihi,
                    float _Complex* a, int* lda,
                    const float _Complex* tau, float _Complex* work,
                    int* lwork, int *info );
void zunghr_( int* n, int* ilo, int* ihi,
                    double _Complex* a, int* lda,
                    const double _Complex* tau,
                    double _Complex* work, int* lwork,
                    int *info );
void cunmhr_( char* side, char* trans, int* m, int* n,
                    int* ilo, int* ihi,
                    const float _Complex* a, int* lda,
                    const float _Complex* tau, float _Complex* c,
                    int* ldc, float _Complex* work,
                    int* lwork, int *info );
void zunmhr_( char* side, char* trans, int* m, int* n,
                    int* ilo, int* ihi,
                    const double _Complex* a, int* lda,
                    const double _Complex* tau, double _Complex* c,
                    int* ldc, double _Complex* work,
                    int* lwork, int *info );
void sgebal_( char* job, int* n, float* a, int* lda,
                    int* ilo, int* ihi, float* scale,
                    int *info );
void dgebal_( char* job, int* n, double* a, int* lda,
                    int* ilo, int* ihi, double* scale,
                    int *info );
void cgebal_( char* job, int* n, float _Complex* a,
                    int* lda, int* ilo, int* ihi,
                    float* scale, int *info );
void zgebal_( char* job, int* n, double _Complex* a,
                    int* lda, int* ilo, int* ihi,
                    double* scale, int *info );
void sgebak_( char* job, char* side, int* n, int* ilo,
                    int* ihi, const float* scale, int* m,
                    float* v, int* ldv, int *info );
void dgebak_( char* job, char* side, int* n, int* ilo,
                    int* ihi, const double* scale, int* m,
                    double* v, int* ldv, int *info );
void cgebak_( char* job, char* side, int* n, int* ilo,
                    int* ihi, const float* scale, int* m,
                    float _Complex* v, int* ldv,
                    int *info );
void zgebak_( char* job, char* side, int* n, int* ilo,
                    int* ihi, const double* scale, int* m,
                    double _Complex* v, int* ldv,
                    int *info );
void shseqr_( char* job, char* compz, int* n, int* ilo,
                    int* ihi, float* h, int* ldh, float* wr,
                    float* wi, float* z, int* ldz, float* work,
                    int* lwork, int *info );
void dhseqr_( char* job, char* compz, int* n, int* ilo,
                    int* ihi, double* h, int* ldh, double* wr,
                    double* wi, double* z, int* ldz, double* work,
                    int* lwork, int *info );
void chseqr_( char* job, char* compz, int* n, int* ilo,
                    int* ihi, float _Complex* h, int* ldh,
                    float _Complex* w, float _Complex* z,
                    int* ldz, float _Complex* work,
                    int* lwork, int *info );
void zhseqr_( char* job, char* compz, int* n, int* ilo,
                    int* ihi, double _Complex* h, int* ldh,
                    double _Complex* w, double _Complex* z,
                    int* ldz, double _Complex* work,
                    int* lwork, int *info );
void shsein_( char* job, char* eigsrc, char* initv,
                    int* select, int* n, const float* h,
                    int* ldh, float* wr, const float* wi, float* vl,
                    int* ldvl, float* vr, int* ldvr,
                    int* mm, int* m, float* work,
                    int* ifaill, int* ifailr, int *info );
void dhsein_( char* job, char* eigsrc, char* initv,
                    int* select, int* n, const double* h,
                    int* ldh, double* wr, const double* wi, double* vl,
                    int* ldvl, double* vr, int* ldvr,
                    int* mm, int* m, double* work,
                    int* ifaill, int* ifailr, int *info );
void chsein_( char* job, char* eigsrc, char* initv,
                    const int* select, int* n,
                    const float _Complex* h, int* ldh,
                    float _Complex* w, float _Complex* vl,
                    int* ldvl, float _Complex* vr,
                    int* ldvr, int* mm, int* m,
                    float _Complex* work, float* rwork,
                    int* ifaill, int* ifailr, int *info );
void zhsein_( char* job, char* eigsrc, char* initv,
                    const int* select, int* n,
                    const double _Complex* h, int* ldh,
                    double _Complex* w, double _Complex* vl,
                    int* ldvl, double _Complex* vr,
                    int* ldvr, int* mm, int* m,
                    double _Complex* work, double* rwork,
                    int* ifaill, int* ifailr, int *info );
void strevc_( char* side, char* howmny, int* select,
                    int* n, const float* t, int* ldt, float* vl,
                    int* ldvl, float* vr, int* ldvr,
                    int* mm, int* m, float* work,
                    int *info );
void dtrevc_( char* side, char* howmny, int* select,
                    int* n, const double* t, int* ldt, double* vl,
                    int* ldvl, double* vr, int* ldvr,
                    int* mm, int* m, double* work,
                    int *info );
void ctrevc_( char* side, char* howmny, const int* select,
                    int* n, float _Complex* t, int* ldt,
                    float _Complex* vl, int* ldvl,
                    float _Complex* vr, int* ldvr, int* mm,
                    int* m, float _Complex* work, float* rwork,
                    int *info );
void ztrevc_( char* side, char* howmny, const int* select,
                    int* n, double _Complex* t, int* ldt,
                    double _Complex* vl, int* ldvl,
                    double _Complex* vr, int* ldvr, int* mm,
                    int* m, double _Complex* work, double* rwork,
                    int *info );
void strsna_( char* job, char* howmny, const int* select,
                    int* n, const float* t, int* ldt,
                    const float* vl, int* ldvl, const float* vr,
                    int* ldvr, float* s, float* sep, int* mm,
                    int* m, float* work, int* ldwork,
                    int* iwork, int *info );
void dtrsna_( char* job, char* howmny, const int* select,
                    int* n, const double* t, int* ldt,
                    const double* vl, int* ldvl, const double* vr,
                    int* ldvr, double* s, double* sep, int* mm,
                    int* m, double* work, int* ldwork,
                    int* iwork, int *info );
void ctrsna_( char* job, char* howmny, const int* select,
                    int* n, const float _Complex* t,
                    int* ldt, const float _Complex* vl,
                    int* ldvl, const float _Complex* vr,
                    int* ldvr, float* s, float* sep, int* mm,
                    int* m, float _Complex* work,
                    int* ldwork, float* rwork, int *info );
void ztrsna_( char* job, char* howmny, const int* select,
                    int* n, const double _Complex* t,
                    int* ldt, const double _Complex* vl,
                    int* ldvl, const double _Complex* vr,
                    int* ldvr, double* s, double* sep, int* mm,
                    int* m, double _Complex* work,
                    int* ldwork, double* rwork, int *info );
void strexc_( char* compq, int* n, float* t, int* ldt,
                    float* q, int* ldq, int* ifst,
                    int* ilst, float* work, int *info );
void dtrexc_( char* compq, int* n, double* t, int* ldt,
                    double* q, int* ldq, int* ifst,
                    int* ilst, double* work, int *info );
void ctrexc_( char* compq, int* n, float _Complex* t,
                    int* ldt, float _Complex* q, int* ldq,
                    int* ifst, int* ilst, int *info );
void ztrexc_( char* compq, int* n, double _Complex* t,
                    int* ldt, double _Complex* q, int* ldq,
                    int* ifst, int* ilst, int *info );
void strsen_( char* job, char* compq, const int* select,
                    int* n, float* t, int* ldt, float* q,
                    int* ldq, float* wr, float* wi, int* m,
                    float* s, float* sep, float* work, int* lwork,
                    int* iwork, int* liwork, int *info );
void dtrsen_( char* job, char* compq, const int* select,
                    int* n, double* t, int* ldt, double* q,
                    int* ldq, double* wr, double* wi, int* m,
                    double* s, double* sep, double* work, int* lwork,
                    int* iwork, int* liwork, int *info );
void ctrsen_( char* job, char* compq, const int* select,
                    int* n, float _Complex* t, int* ldt,
                    float _Complex* q, int* ldq,
                    float _Complex* w, int* m, float* s,
                    float* sep, float _Complex* work, int* lwork,
                    int *info );
void ztrsen_( char* job, char* compq, const int* select,
                    int* n, double _Complex* t, int* ldt,
                    double _Complex* q, int* ldq,
                    double _Complex* w, int* m, double* s,
                    double* sep, double _Complex* work, int* lwork,
                    int *info );
void strsyl_( char* trana, char* tranb, int* isgn, int* m,
                    int* n, const float* a, int* lda,
                    const float* b, int* ldb, float* c, int* ldc,
                    float* scale, int *info );
void dtrsyl_( char* trana, char* tranb, int* isgn, int* m,
                    int* n, const double* a, int* lda,
                    const double* b, int* ldb, double* c,
                    int* ldc, double* scale, int *info );
void ctrsyl_( char* trana, char* tranb, int* isgn, int* m,
                    int* n, const float _Complex* a,
                    int* lda, const float _Complex* b,
                    int* ldb, float _Complex* c, int* ldc,
                    float* scale, int *info );
void ztrsyl_( char* trana, char* tranb, int* isgn, int* m,
                    int* n, const double _Complex* a,
                    int* lda, const double _Complex* b,
                    int* ldb, double _Complex* c, int* ldc,
                    double* scale, int *info );
void sgghrd_( char* compq, char* compz, int* n, int* ilo,
                    int* ihi, float* a, int* lda, float* b,
                    int* ldb, float* q, int* ldq, float* z,
                    int* ldz, int *info );
void dgghrd_( char* compq, char* compz, int* n, int* ilo,
                    int* ihi, double* a, int* lda, double* b,
                    int* ldb, double* q, int* ldq, double* z,
                    int* ldz, int *info );
void cgghrd_( char* compq, char* compz, int* n, int* ilo,
                    int* ihi, float _Complex* a, int* lda,
                    float _Complex* b, int* ldb,
                    float _Complex* q, int* ldq,
                    float _Complex* z, int* ldz,
                    int *info );
void zgghrd_( char* compq, char* compz, int* n, int* ilo,
                    int* ihi, double _Complex* a, int* lda,
                    double _Complex* b, int* ldb,
                    double _Complex* q, int* ldq,
                    double _Complex* z, int* ldz,
                    int *info );
void sggbal_( char* job, int* n, float* a, int* lda,
                    float* b, int* ldb, int* ilo, int* ihi,
                    float* lscale, float* rscale, float* work,
                    int *info );
void dggbal_( char* job, int* n, double* a, int* lda,
                    double* b, int* ldb, int* ilo,
                    int* ihi, double* lscale, double* rscale,
                    double* work, int *info );
void cggbal_( char* job, int* n, float _Complex* a,
                    int* lda, float _Complex* b, int* ldb,
                    int* ilo, int* ihi, float* lscale,
                    float* rscale, float* work, int *info );
void zggbal_( char* job, int* n, double _Complex* a,
                    int* lda, double _Complex* b, int* ldb,
                    int* ilo, int* ihi, double* lscale,
                    double* rscale, double* work, int *info );
void sggbak_( char* job, char* side, int* n, int* ilo,
                    int* ihi, const float* lscale, const float* rscale,
                    int* m, float* v, int* ldv,
                    int *info );
void dggbak_( char* job, char* side, int* n, int* ilo,
                    int* ihi, const double* lscale, const double* rscale,
                    int* m, double* v, int* ldv,
                    int *info );
void cggbak_( char* job, char* side, int* n, int* ilo,
                    int* ihi, const float* lscale, const float* rscale,
                    int* m, float _Complex* v, int* ldv,
                    int *info );
void zggbak_( char* job, char* side, int* n, int* ilo,
                    int* ihi, const double* lscale, const double* rscale,
                    int* m, double _Complex* v, int* ldv,
                    int *info );
void shgeqz_( char* job, char* compq, char* compz, int* n,
                    int* ilo, int* ihi, float* h, int* ldh,
                    float* t, int* ldt, float* alphar, float* alphai,
                    float* beta, float* q, int* ldq, float* z,
                    int* ldz, float* work, int* lwork,
                    int *info );
void dhgeqz_( char* job, char* compq, char* compz, int* n,
                    int* ilo, int* ihi, double* h,
                    int* ldh, double* t, int* ldt, double* alphar,
                    double* alphai, double* beta, double* q, int* ldq,
                    double* z, int* ldz, double* work, int* lwork,
                    int *info );
void chgeqz_( char* job, char* compq, char* compz, int* n,
                    int* ilo, int* ihi, float _Complex* h,
                    int* ldh, float _Complex* t, int* ldt,
                    float _Complex* alpha, float _Complex* beta,
                    float _Complex* q, int* ldq,
                    float _Complex* z, int* ldz,
                    float _Complex* work, int* lwork, float* rwork,
                    int *info );
void zhgeqz_( char* job, char* compq, char* compz, int* n,
                    int* ilo, int* ihi, double _Complex* h,
                    int* ldh, double _Complex* t, int* ldt,
                    double _Complex* alpha, double _Complex* beta,
                    double _Complex* q, int* ldq,
                    double _Complex* z, int* ldz,
                    double _Complex* work, int* lwork,
                    double* rwork, int *info );
void stgevc_( char* side, char* howmny, const int* select,
                    int* n, const float* s, int* lds,
                    const float* p, int* ldp, float* vl,
                    int* ldvl, float* vr, int* ldvr,
                    int* mm, int* m, float* work,
                    int *info );
void dtgevc_( char* side, char* howmny, const int* select,
                    int* n, const double* s, int* lds,
                    const double* p, int* ldp, double* vl,
                    int* ldvl, double* vr, int* ldvr,
                    int* mm, int* m, double* work,
                    int *info );
void ctgevc_( char* side, char* howmny, const int* select,
                    int* n, const float _Complex* s,
                    int* lds, const float _Complex* p,
                    int* ldp, float _Complex* vl, int* ldvl,
                    float _Complex* vr, int* ldvr, int* mm,
                    int* m, float _Complex* work, float* rwork,
                    int *info );
void ztgevc_( char* side, char* howmny, const int* select,
                    int* n, const double _Complex* s,
                    int* lds, const double _Complex* p,
                    int* ldp, double _Complex* vl,
                    int* ldvl, double _Complex* vr,
                    int* ldvr, int* mm, int* m,
                    double _Complex* work, double* rwork,
                    int *info );
void stgexc_( int* wantq, int* wantz, int* n,
                    float* a, int* lda, float* b, int* ldb,
                    float* q, int* ldq, float* z, int* ldz,
                    int* ifst, int* ilst, float* work,
                    int* lwork, int *info );
void dtgexc_( int* wantq, int* wantz, int* n,
                    double* a, int* lda, double* b, int* ldb,
                    double* q, int* ldq, double* z, int* ldz,
                    int* ifst, int* ilst, double* work,
                    int* lwork, int *info );
void ctgexc_( int* wantq, int* wantz, int* n,
                    float _Complex* a, int* lda,
                    float _Complex* b, int* ldb,
                    float _Complex* q, int* ldq,
                    float _Complex* z, int* ldz, int* ifst,
                    int* ilst, int *info );
void ztgexc_( int* wantq, int* wantz, int* n,
                    double _Complex* a, int* lda,
                    double _Complex* b, int* ldb,
                    double _Complex* q, int* ldq,
                    double _Complex* z, int* ldz, int* ifst,
                    int* ilst, int *info );
void stgsen_( int* ijob, int* wantq,
                    int* wantz, const int* select,
                    int* n, float* a, int* lda, float* b,
                    int* ldb, float* alphar, float* alphai, float* beta,
                    float* q, int* ldq, float* z, int* ldz,
                    int* m, float* pl, float* pr, float* dif,
                    float* work, int* lwork, int* iwork,
                    int* liwork, int *info );
void dtgsen_( int* ijob, int* wantq,
                    int* wantz, const int* select,
                    int* n, double* a, int* lda, double* b,
                    int* ldb, double* alphar, double* alphai,
                    double* beta, double* q, int* ldq, double* z,
                    int* ldz, int* m, double* pl, double* pr,
                    double* dif, double* work, int* lwork,
                    int* iwork, int* liwork, int *info );
void ctgsen_( int* ijob, int* wantq,
                    int* wantz, const int* select,
                    int* n, float _Complex* a, int* lda,
                    float _Complex* b, int* ldb,
                    float _Complex* alpha, float _Complex* beta,
                    float _Complex* q, int* ldq,
                    float _Complex* z, int* ldz, int* m,
                    float* pl, float* pr, float* dif,
                    float _Complex* work, int* lwork,
                    int* iwork, int* liwork, int *info );
void ztgsen_( int* ijob, int* wantq,
                    int* wantz, const int* select,
                    int* n, double _Complex* a, int* lda,
                    double _Complex* b, int* ldb,
                    double _Complex* alpha, double _Complex* beta,
                    double _Complex* q, int* ldq,
                    double _Complex* z, int* ldz, int* m,
                    double* pl, double* pr, double* dif,
                    double _Complex* work, int* lwork,
                    int* iwork, int* liwork, int *info );
void stgsyl_( char* trans, int* ijob, int* m, int* n,
                    const float* a, int* lda, const float* b,
                    int* ldb, float* c, int* ldc, const float* d,
                    int* ldd, const float* e, int* lde, float* f,
                    int* ldf, float* scale, float* dif, float* work,
                    int* lwork, int* iwork, int *info );
void dtgsyl_( char* trans, int* ijob, int* m, int* n,
                    const double* a, int* lda, const double* b,
                    int* ldb, double* c, int* ldc,
                    const double* d, int* ldd, const double* e,
                    int* lde, double* f, int* ldf, double* scale,
                    double* dif, double* work, int* lwork,
                    int* iwork, int *info );
void ctgsyl_( char* trans, int* ijob, int* m, int* n,
                    const float _Complex* a, int* lda,
                    const float _Complex* b, int* ldb,
                    float _Complex* c, int* ldc,
                    const float _Complex* d, int* ldd,
                    const float _Complex* e, int* lde,
                    float _Complex* f, int* ldf, float* scale,
                    float* dif, float _Complex* work, int* lwork,
                    int* iwork, int *info );
void ztgsyl_( char* trans, int* ijob, int* m, int* n,
                    const double _Complex* a, int* lda,
                    const double _Complex* b, int* ldb,
                    double _Complex* c, int* ldc,
                    const double _Complex* d, int* ldd,
                    const double _Complex* e, int* lde,
                    double _Complex* f, int* ldf, double* scale,
                    double* dif, double _Complex* work, int* lwork,
                    int* iwork, int *info );
void stgsna_( char* job, char* howmny, const int* select,
                    int* n, const float* a, int* lda,
                    const float* b, int* ldb, const float* vl,
                    int* ldvl, const float* vr, int* ldvr,
                    float* s, float* dif, int* mm, int* m,
                    float* work, int* lwork, int* iwork,
                    int *info );
void dtgsna_( char* job, char* howmny, const int* select,
                    int* n, const double* a, int* lda,
                    const double* b, int* ldb, const double* vl,
                    int* ldvl, const double* vr, int* ldvr,
                    double* s, double* dif, int* mm, int* m,
                    double* work, int* lwork, int* iwork,
                    int *info );
void ctgsna_( char* job, char* howmny, const int* select,
                    int* n, const float _Complex* a,
                    int* lda, const float _Complex* b,
                    int* ldb, const float _Complex* vl,
                    int* ldvl, const float _Complex* vr,
                    int* ldvr, float* s, float* dif, int* mm,
                    int* m, float _Complex* work,
                    int* lwork, int* iwork, int *info );
void ztgsna_( char* job, char* howmny, const int* select,
                    int* n, const double _Complex* a,
                    int* lda, const double _Complex* b,
                    int* ldb, const double _Complex* vl,
                    int* ldvl, const double _Complex* vr,
                    int* ldvr, double* s, double* dif, int* mm,
                    int* m, double _Complex* work,
                    int* lwork, int* iwork, int *info );
void sggsvp_( char* jobu, char* jobv, char* jobq, int* m,
                    int* p, int* n, float* a, int* lda,
                    float* b, int* ldb, float* tola, float* tolb,
                    int* k, int* l, float* u, int* ldu,
                    float* v, int* ldv, float* q, int* ldq,
                    int* iwork, float* tau, float* work,
                    int *info );
void dggsvp_( char* jobu, char* jobv, char* jobq, int* m,
                    int* p, int* n, double* a, int* lda,
                    double* b, int* ldb, double* tola, double* tolb,
                    int* k, int* l, double* u, int* ldu,
                    double* v, int* ldv, double* q, int* ldq,
                    int* iwork, double* tau, double* work,
                    int *info );
void cggsvp_( char* jobu, char* jobv, char* jobq, int* m,
                    int* p, int* n, float _Complex* a,
                    int* lda, float _Complex* b, int* ldb,
                    float* tola, float* tolb, int* k, int* l,
                    float _Complex* u, int* ldu,
                    float _Complex* v, int* ldv,
                    float _Complex* q, int* ldq, int* iwork,
                    float* rwork, float _Complex* tau,
                    float _Complex* work, int *info );
void zggsvp_( char* jobu, char* jobv, char* jobq, int* m,
                    int* p, int* n, double _Complex* a,
                    int* lda, double _Complex* b, int* ldb,
                    double* tola, double* tolb, int* k, int* l,
                    double _Complex* u, int* ldu,
                    double _Complex* v, int* ldv,
                    double _Complex* q, int* ldq,
                    int* iwork, double* rwork,
                    double _Complex* tau, double _Complex* work,
                    int *info );
void stgsja_( char* jobu, char* jobv, char* jobq, int* m,
                    int* p, int* n, int* k, int* l,
                    float* a, int* lda, float* b, int* ldb,
                    float* tola, float* tolb, float* alpha, float* beta,
                    float* u, int* ldu, float* v, int* ldv,
                    float* q, int* ldq, float* work, int* ncycle,
                    int *info );
void dtgsja_( char* jobu, char* jobv, char* jobq, int* m,
                    int* p, int* n, int* k, int* l,
                    double* a, int* lda, double* b, int* ldb,
                    double* tola, double* tolb, double* alpha, double* beta,
                    double* u, int* ldu, double* v, int* ldv,
                    double* q, int* ldq, double* work,
                    int* ncycle, int *info );
void ctgsja_( char* jobu, char* jobv, char* jobq, int* m,
                    int* p, int* n, int* k, int* l,
                    float _Complex* a, int* lda,
                    float _Complex* b, int* ldb, float* tola,
                    float* tolb, float* alpha, float* beta,
                    float _Complex* u, int* ldu,
                    float _Complex* v, int* ldv,
                    float _Complex* q, int* ldq,
                    float _Complex* work, int* ncycle,
                    int *info );
void ztgsja_( char* jobu, char* jobv, char* jobq, int* m,
                    int* p, int* n, int* k, int* l,
                    double _Complex* a, int* lda,
                    double _Complex* b, int* ldb, double* tola,
                    double* tolb, double* alpha, double* beta,
                    double _Complex* u, int* ldu,
                    double _Complex* v, int* ldv,
                    double _Complex* q, int* ldq,
                    double _Complex* work, int* ncycle,
                    int *info );
void sgels_( char* trans, int* m, int* n, int* nrhs,
                   float* a, int* lda, float* b, int* ldb,
                   float* work, int* lwork, int *info );
void dgels_( char* trans, int* m, int* n, int* nrhs,
                   double* a, int* lda, double* b, int* ldb,
                   double* work, int* lwork, int *info );
void cgels_( char* trans, int* m, int* n, int* nrhs,
                   float _Complex* a, int* lda,
                   float _Complex* b, int* ldb,
                   float _Complex* work, int* lwork,
                   int *info );
void zgels_( char* trans, int* m, int* n, int* nrhs,
                   double _Complex* a, int* lda,
                   double _Complex* b, int* ldb,
                   double _Complex* work, int* lwork,
                   int *info );
void sgelsy_( int* m, int* n, int* nrhs, float* a,
                    int* lda, float* b, int* ldb,
                    int* jpvt, float* rcond, int* rank,
                    float* work, int* lwork, int *info );
void dgelsy_( int* m, int* n, int* nrhs, double* a,
                    int* lda, double* b, int* ldb,
                    int* jpvt, double* rcond, int* rank,
                    double* work, int* lwork, int *info );
void cgelsy_( int* m, int* n, int* nrhs,
                    float _Complex* a, int* lda,
                    float _Complex* b, int* ldb, int* jpvt,
                    float* rcond, int* rank, float _Complex* work,
                    int* lwork, float* rwork, int *info );
void zgelsy_( int* m, int* n, int* nrhs,
                    double _Complex* a, int* lda,
                    double _Complex* b, int* ldb, int* jpvt,
                    double* rcond, int* rank,
                    double _Complex* work, int* lwork,
                    double* rwork, int *info );
void sgelss_( int* m, int* n, int* nrhs, float* a,
                    int* lda, float* b, int* ldb, float* s,
                    float* rcond, int* rank, float* work,
                    int* lwork, int *info );
void dgelss_( int* m, int* n, int* nrhs, double* a,
                    int* lda, double* b, int* ldb, double* s,
                    double* rcond, int* rank, double* work,
                    int* lwork, int *info );
void cgelss_( int* m, int* n, int* nrhs,
                    float _Complex* a, int* lda,
                    float _Complex* b, int* ldb, float* s,
                    float* rcond, int* rank, float _Complex* work,
                    int* lwork, float* rwork, int *info );
void zgelss_( int* m, int* n, int* nrhs,
                    double _Complex* a, int* lda,
                    double _Complex* b, int* ldb, double* s,
                    double* rcond, int* rank,
                    double _Complex* work, int* lwork,
                    double* rwork, int *info );
void sgelsd_( int* m, int* n, int* nrhs, float* a,
                    int* lda, float* b, int* ldb, float* s,
                    float* rcond, int* rank, float* work,
                    int* lwork, int* iwork, int *info );
void dgelsd_( int* m, int* n, int* nrhs, double* a,
                    int* lda, double* b, int* ldb, double* s,
                    double* rcond, int* rank, double* work,
                    int* lwork, int* iwork, int *info );
void cgelsd_( int* m, int* n, int* nrhs,
                    float _Complex* a, int* lda,
                    float _Complex* b, int* ldb, float* s,
                    float* rcond, int* rank, float _Complex* work,
                    int* lwork, float* rwork, int* iwork,
                    int *info );
void zgelsd_( int* m, int* n, int* nrhs,
                    double _Complex* a, int* lda,
                    double _Complex* b, int* ldb, double* s,
                    double* rcond, int* rank,
                    double _Complex* work, int* lwork,
                    double* rwork, int* iwork, int *info );
void sgglse_( int* m, int* n, int* p, float* a,
                    int* lda, float* b, int* ldb, float* c,
                    float* d, float* x, float* work, int* lwork,
                    int *info );
void dgglse_( int* m, int* n, int* p, double* a,
                    int* lda, double* b, int* ldb, double* c,
                    double* d, double* x, double* work, int* lwork,
                    int *info );
void cgglse_( int* m, int* n, int* p,
                    float _Complex* a, int* lda,
                    float _Complex* b, int* ldb,
                    float _Complex* c, float _Complex* d,
                    float _Complex* x, float _Complex* work,
                    int* lwork, int *info );
void zgglse_( int* m, int* n, int* p,
                    double _Complex* a, int* lda,
                    double _Complex* b, int* ldb,
                    double _Complex* c, double _Complex* d,
                    double _Complex* x, double _Complex* work,
                    int* lwork, int *info );
void sggglm_( int* n, int* m, int* p, float* a,
                    int* lda, float* b, int* ldb, float* d,
                    float* x, float* y, float* work, int* lwork,
                    int *info );
void dggglm_( int* n, int* m, int* p, double* a,
                    int* lda, double* b, int* ldb, double* d,
                    double* x, double* y, double* work, int* lwork,
                    int *info );
void cggglm_( int* n, int* m, int* p,
                    float _Complex* a, int* lda,
                    float _Complex* b, int* ldb,
                    float _Complex* d, float _Complex* x,
                    float _Complex* y, float _Complex* work,
                    int* lwork, int *info );
void zggglm_( int* n, int* m, int* p,
                    double _Complex* a, int* lda,
                    double _Complex* b, int* ldb,
                    double _Complex* d, double _Complex* x,
                    double _Complex* y, double _Complex* work,
                    int* lwork, int *info );
void ssyev_( char* jobz, char* uplo, int* n, float* a,
                   int* lda, float* w, float* work, int* lwork,
                   int *info );
void dsyev_( char* jobz, char* uplo, int* n, double* a,
                   int* lda, double* w, double* work, int* lwork,
                   int *info );
void cheev_( char* jobz, char* uplo, int* n,
                   float _Complex* a, int* lda, float* w,
                   float _Complex* work, int* lwork, float* rwork,
                   int *info );
void zheev_( char* jobz, char* uplo, int* n,
                   double _Complex* a, int* lda, double* w,
                   double _Complex* work, int* lwork,
                   double* rwork, int *info );
void ssyevd_( char* jobz, char* uplo, int* n, float* a,
                    int* lda, float* w, float* work, int* lwork,
                    int* iwork, int* liwork, int *info );
void dsyevd_( char* jobz, char* uplo, int* n, double* a,
                    int* lda, double* w, double* work, int* lwork,
                    int* iwork, int* liwork, int *info );
void cheevd_( char* jobz, char* uplo, int* n,
                    float _Complex* a, int* lda, float* w,
                    float _Complex* work, int* lwork, float* rwork,
                    int* lrwork, int* iwork, int* liwork,
                    int *info );
void zheevd_( char* jobz, char* uplo, int* n,
                    double _Complex* a, int* lda, double* w,
                    double _Complex* work, int* lwork,
                    double* rwork, int* lrwork, int* iwork,
                    int* liwork, int *info );
void ssyevx_( char* jobz, char* range, char* uplo, int* n,
                    float* a, int* lda, float* vl, float* vu,
                    int* il, int* iu, float* abstol,
                    int* m, float* w, float* z, int* ldz,
                    float* work, int* lwork, int* iwork,
                    int* ifail, int *info );
void dsyevx_( char* jobz, char* range, char* uplo, int* n,
                    double* a, int* lda, double* vl, double* vu,
                    int* il, int* iu, double* abstol,
                    int* m, double* w, double* z, int* ldz,
                    double* work, int* lwork, int* iwork,
                    int* ifail, int *info );
void cheevx_( char* jobz, char* range, char* uplo, int* n,
                    float _Complex* a, int* lda, float* vl,
                    float* vu, int* il, int* iu, float* abstol,
                    int* m, float* w, float _Complex* z,
                    int* ldz, float _Complex* work,
                    int* lwork, float* rwork, int* iwork,
                    int* ifail, int *info );
void zheevx_( char* jobz, char* range, char* uplo, int* n,
                    double _Complex* a, int* lda, double* vl,
                    double* vu, int* il, int* iu, double* abstol,
                    int* m, double* w, double _Complex* z,
                    int* ldz, double _Complex* work,
                    int* lwork, double* rwork, int* iwork,
                    int* ifail, int *info );
void ssyevr_( char* jobz, char* range, char* uplo, int* n,
                    float* a, int* lda, float* vl, float* vu,
                    int* il, int* iu, float* abstol,
                    int* m, float* w, float* z, int* ldz,
                    int* isuppz, float* work, int* lwork,
                    int* iwork, int* liwork, int *info );
void dsyevr_( char* jobz, char* range, char* uplo, int* n,
                    double* a, int* lda, double* vl, double* vu,
                    int* il, int* iu, double* abstol,
                    int* m, double* w, double* z, int* ldz,
                    int* isuppz, double* work, int* lwork,
                    int* iwork, int* liwork, int *info );
void cheevr_( char* jobz, char* range, char* uplo, int* n,
                    float _Complex* a, int* lda, float* vl,
                    float* vu, int* il, int* iu, float* abstol,
                    int* m, float* w, float _Complex* z,
                    int* ldz, int* isuppz,
                    float _Complex* work, int* lwork, float* rwork,
                    int* lrwork, int* iwork, int* liwork,
                    int *info );
void zheevr_( char* jobz, char* range, char* uplo, int* n,
                    double _Complex* a, int* lda, double* vl,
                    double* vu, int* il, int* iu, double* abstol,
                    int* m, double* w, double _Complex* z,
                    int* ldz, int* isuppz,
                    double _Complex* work, int* lwork,
                    double* rwork, int* lrwork, int* iwork,
                    int* liwork, int *info );
void sspev_( char* jobz, char* uplo, int* n, float* ap, float* w,
                   float* z, int* ldz, float* work, int *info );
void dspev_( char* jobz, char* uplo, int* n, double* ap, double* w,
                   double* z, int* ldz, double* work, int *info );
void chpev_( char* jobz, char* uplo, int* n,
                   float _Complex* ap, float* w, float _Complex* z,
                   int* ldz, float _Complex* work, float* rwork,
                   int *info );
void zhpev_( char* jobz, char* uplo, int* n,
                   double _Complex* ap, double* w,
                   double _Complex* z, int* ldz,
                   double _Complex* work, double* rwork,
                   int *info );
void sspevd_( char* jobz, char* uplo, int* n, float* ap, float* w,
                    float* z, int* ldz, float* work, int* lwork,
                    int* iwork, int* liwork, int *info );
void dspevd_( char* jobz, char* uplo, int* n, double* ap,
                    double* w, double* z, int* ldz, double* work,
                    int* lwork, int* iwork, int* liwork,
                    int *info );
void chpevd_( char* jobz, char* uplo, int* n,
                    float _Complex* ap, float* w, float _Complex* z,
                    int* ldz, float _Complex* work,
                    int* lwork, float* rwork, int* lrwork,
                    int* iwork, int* liwork, int *info );
void zhpevd_( char* jobz, char* uplo, int* n,
                    double _Complex* ap, double* w,
                    double _Complex* z, int* ldz,
                    double _Complex* work, int* lwork,
                    double* rwork, int* lrwork, int* iwork,
                    int* liwork, int *info );
void sspevx_( char* jobz, char* range, char* uplo, int* n,
                    float* ap, float* vl, float* vu, int* il,
                    int* iu, float* abstol, int* m, float* w,
                    float* z, int* ldz, float* work, int* iwork,
                    int* ifail, int *info );
void dspevx_( char* jobz, char* range, char* uplo, int* n,
                    double* ap, double* vl, double* vu, int* il,
                    int* iu, double* abstol, int* m, double* w,
                    double* z, int* ldz, double* work, int* iwork,
                    int* ifail, int *info );
void chpevx_( char* jobz, char* range, char* uplo, int* n,
                    float _Complex* ap, float* vl, float* vu,
                    int* il, int* iu, float* abstol,
                    int* m, float* w, float _Complex* z,
                    int* ldz, float _Complex* work, float* rwork,
                    int* iwork, int* ifail, int *info );
void zhpevx_( char* jobz, char* range, char* uplo, int* n,
                    double _Complex* ap, double* vl, double* vu,
                    int* il, int* iu, double* abstol,
                    int* m, double* w, double _Complex* z,
                    int* ldz, double _Complex* work, double* rwork,
                    int* iwork, int* ifail, int *info );
void ssbev_( char* jobz, char* uplo, int* n, int* kd,
                   float* ab, int* ldab, float* w, float* z,
                   int* ldz, float* work, int *info );
void dsbev_( char* jobz, char* uplo, int* n, int* kd,
                   double* ab, int* ldab, double* w, double* z,
                   int* ldz, double* work, int *info );
void chbev_( char* jobz, char* uplo, int* n, int* kd,
                   float _Complex* ab, int* ldab, float* w,
                   float _Complex* z, int* ldz,
                   float _Complex* work, float* rwork, int *info );
void zhbev_( char* jobz, char* uplo, int* n, int* kd,
                   double _Complex* ab, int* ldab, double* w,
                   double _Complex* z, int* ldz,
                   double _Complex* work, double* rwork,
                   int *info );
void ssbevd_( char* jobz, char* uplo, int* n, int* kd,
                    float* ab, int* ldab, float* w, float* z,
                    int* ldz, float* work, int* lwork,
                    int* iwork, int* liwork, int *info );
void dsbevd_( char* jobz, char* uplo, int* n, int* kd,
                    double* ab, int* ldab, double* w, double* z,
                    int* ldz, double* work, int* lwork,
                    int* iwork, int* liwork, int *info );
void chbevd_( char* jobz, char* uplo, int* n, int* kd,
                    float _Complex* ab, int* ldab, float* w,
                    float _Complex* z, int* ldz,
                    float _Complex* work, int* lwork, float* rwork,
                    int* lrwork, int* iwork, int* liwork,
                    int *info );
void zhbevd_( char* jobz, char* uplo, int* n, int* kd,
                    double _Complex* ab, int* ldab, double* w,
                    double _Complex* z, int* ldz,
                    double _Complex* work, int* lwork,
                    double* rwork, int* lrwork, int* iwork,
                    int* liwork, int *info );
void ssbevx_( char* jobz, char* range, char* uplo, int* n,
                    int* kd, float* ab, int* ldab, float* q,
                    int* ldq, float* vl, float* vu, int* il,
                    int* iu, float* abstol, int* m, float* w,
                    float* z, int* ldz, float* work, int* iwork,
                    int* ifail, int *info );
void dsbevx_( char* jobz, char* range, char* uplo, int* n,
                    int* kd, double* ab, int* ldab, double* q,
                    int* ldq, double* vl, double* vu, int* il,
                    int* iu, double* abstol, int* m, double* w,
                    double* z, int* ldz, double* work, int* iwork,
                    int* ifail, int *info );
void chbevx_( char* jobz, char* range, char* uplo, int* n,
                    int* kd, float _Complex* ab, int* ldab,
                    float _Complex* q, int* ldq, float* vl,
                    float* vu, int* il, int* iu, float* abstol,
                    int* m, float* w, float _Complex* z,
                    int* ldz, float _Complex* work, float* rwork,
                    int* iwork, int* ifail, int *info );
void zhbevx_( char* jobz, char* range, char* uplo, int* n,
                    int* kd, double _Complex* ab, int* ldab,
                    double _Complex* q, int* ldq, double* vl,
                    double* vu, int* il, int* iu, double* abstol,
                    int* m, double* w, double _Complex* z,
                    int* ldz, double _Complex* work, double* rwork,
                    int* iwork, int* ifail, int *info );
void sstev_( char* jobz, int* n, float* d, float* e, float* z,
                   int* ldz, float* work, int *info );
void dstev_( char* jobz, int* n, double* d, double* e, double* z,
                   int* ldz, double* work, int *info );
void sstevd_( char* jobz, int* n, float* d, float* e, float* z,
                    int* ldz, float* work, int* lwork,
                    int* iwork, int* liwork, int *info );
void dstevd_( char* jobz, int* n, double* d, double* e, double* z,
                    int* ldz, double* work, int* lwork,
                    int* iwork, int* liwork, int *info );
void sstevx_( char* jobz, char* range, int* n, float* d, float* e,
                    float* vl, float* vu, int* il, int* iu,
                    float* abstol, int* m, float* w, float* z,
                    int* ldz, float* work, int* iwork,
                    int* ifail, int *info );
void dstevx_( char* jobz, char* range, int* n, double* d,
                    double* e, double* vl, double* vu, int* il,
                    int* iu, double* abstol, int* m, double* w,
                    double* z, int* ldz, double* work, int* iwork,
                    int* ifail, int *info );
void sstevr_( char* jobz, char* range, int* n, float* d, float* e,
                    float* vl, float* vu, int* il, int* iu,
                    float* abstol, int* m, float* w, float* z,
                    int* ldz, int* isuppz, float* work,
                    int* lwork, int* iwork, int* liwork,
                    int *info );
void dstevr_( char* jobz, char* range, int* n, double* d,
                    double* e, double* vl, double* vu, int* il,
                    int* iu, double* abstol, int* m, double* w,
                    double* z, int* ldz, int* isuppz,
                    double* work, int* lwork, int* iwork,
                    int* liwork, int *info );
void sgees_( char* jobvs, char* sort, LAPACK_S_SELECT2 select,
                   int* n, float* a, int* lda, int* sdim,
                   float* wr, float* wi, float* vs, int* ldvs,
                   float* work, int* lwork, int* bwork,
                   int *info );
void dgees_( char* jobvs, char* sort, LAPACK_D_SELECT2 select,
                   int* n, double* a, int* lda, int* sdim,
                   double* wr, double* wi, double* vs, int* ldvs,
                   double* work, int* lwork, int* bwork,
                   int *info );
void cgees_( char* jobvs, char* sort, LAPACK_C_SELECT1 select,
                   int* n, float _Complex* a, int* lda,
                   int* sdim, float _Complex* w,
                   float _Complex* vs, int* ldvs,
                   float _Complex* work, int* lwork, float* rwork,
                   int* bwork, int *info );
void zgees_( char* jobvs, char* sort, LAPACK_Z_SELECT1 select,
                   int* n, double _Complex* a, int* lda,
                   int* sdim, double _Complex* w,
                   double _Complex* vs, int* ldvs,
                   double _Complex* work, int* lwork,
                   double* rwork, int* bwork, int *info );
void sgeesx_( char* jobvs, char* sort, LAPACK_S_SELECT2 select,
                    char* sense, int* n, float* a, int* lda,
                    int* sdim, float* wr, float* wi, float* vs,
                    int* ldvs, float* rconde, float* rcondv, float* work,
                    int* lwork, int* iwork, int* liwork,
                    int* bwork, int *info );
void dgeesx_( char* jobvs, char* sort, LAPACK_D_SELECT2 select,
                    char* sense, int* n, double* a, int* lda,
                    int* sdim, double* wr, double* wi, double* vs,
                    int* ldvs, double* rconde, double* rcondv,
                    double* work, int* lwork, int* iwork,
                    int* liwork, int* bwork,
                    int *info );
void cgeesx_( char* jobvs, char* sort, LAPACK_C_SELECT1 select,
                    char* sense, int* n, float _Complex* a,
                    int* lda, int* sdim, float _Complex* w,
                    float _Complex* vs, int* ldvs, float* rconde,
                    float* rcondv, float _Complex* work,
                    int* lwork, float* rwork, int* bwork,
                    int *info );
void zgeesx_( char* jobvs, char* sort, LAPACK_Z_SELECT1 select,
                    char* sense, int* n, double _Complex* a,
                    int* lda, int* sdim, double _Complex* w,
                    double _Complex* vs, int* ldvs, double* rconde,
                    double* rcondv, double _Complex* work,
                    int* lwork, double* rwork, int* bwork,
                    int *info );
void sgeev_( char* jobvl, char* jobvr, int* n, float* a,
                   int* lda, float* wr, float* wi, float* vl,
                   int* ldvl, float* vr, int* ldvr, float* work,
                   int* lwork, int *info );
void dgeev_( char* jobvl, char* jobvr, int* n, double* a,
                   int* lda, double* wr, double* wi, double* vl,
                   int* ldvl, double* vr, int* ldvr, double* work,
                   int* lwork, int *info );
void cgeev_( char* jobvl, char* jobvr, int* n,
                   float _Complex* a, int* lda,
                   float _Complex* w, float _Complex* vl,
                   int* ldvl, float _Complex* vr, int* ldvr,
                   float _Complex* work, int* lwork, float* rwork,
                   int *info );
void zgeev_( char* jobvl, char* jobvr, int* n,
                   double _Complex* a, int* lda,
                   double _Complex* w, double _Complex* vl,
                   int* ldvl, double _Complex* vr,
                   int* ldvr, double _Complex* work,
                   int* lwork, double* rwork, int *info );
void sgeevx_( char* balanc, char* jobvl, char* jobvr, char* sense,
                    int* n, float* a, int* lda, float* wr,
                    float* wi, float* vl, int* ldvl, float* vr,
                    int* ldvr, int* ilo, int* ihi,
                    float* scale, float* abnrm, float* rconde, float* rcondv,
                    float* work, int* lwork, int* iwork,
                    int *info );
void dgeevx_( char* balanc, char* jobvl, char* jobvr, char* sense,
                    int* n, double* a, int* lda, double* wr,
                    double* wi, double* vl, int* ldvl, double* vr,
                    int* ldvr, int* ilo, int* ihi,
                    double* scale, double* abnrm, double* rconde,
                    double* rcondv, double* work, int* lwork,
                    int* iwork, int *info );
void cgeevx_( char* balanc, char* jobvl, char* jobvr, char* sense,
                    int* n, float _Complex* a, int* lda,
                    float _Complex* w, float _Complex* vl,
                    int* ldvl, float _Complex* vr,
                    int* ldvr, int* ilo, int* ihi,
                    float* scale, float* abnrm, float* rconde, float* rcondv,
                    float _Complex* work, int* lwork, float* rwork,
                    int *info );
void zgeevx_( char* balanc, char* jobvl, char* jobvr, char* sense,
                    int* n, double _Complex* a, int* lda,
                    double _Complex* w, double _Complex* vl,
                    int* ldvl, double _Complex* vr,
                    int* ldvr, int* ilo, int* ihi,
                    double* scale, double* abnrm, double* rconde,
                    double* rcondv, double _Complex* work,
                    int* lwork, double* rwork, int *info );
void sgesvd_( char* jobu, char* jobvt, int* m, int* n,
                    float* a, int* lda, float* s, float* u,
                    int* ldu, float* vt, int* ldvt, float* work,
                    int* lwork, int *info );
void dgesvd_( char* jobu, char* jobvt, int* m, int* n,
                    double* a, int* lda, double* s, double* u,
                    int* ldu, double* vt, int* ldvt, double* work,
                    int* lwork, int *info );
void cgesvd_( char* jobu, char* jobvt, int* m, int* n,
                    float _Complex* a, int* lda, float* s,
                    float _Complex* u, int* ldu,
                    float _Complex* vt, int* ldvt,
                    float _Complex* work, int* lwork, float* rwork,
                    int *info );
void zgesvd_( char* jobu, char* jobvt, int* m, int* n,
                    double _Complex* a, int* lda, double* s,
                    double _Complex* u, int* ldu,
                    double _Complex* vt, int* ldvt,
                    double _Complex* work, int* lwork,
                    double* rwork, int *info );
void sgesdd_( char* jobz, int* m, int* n, float* a,
                    int* lda, float* s, float* u, int* ldu,
                    float* vt, int* ldvt, float* work, int* lwork,
                    int* iwork, int *info );
void dgesdd_( char* jobz, int* m, int* n, double* a,
                    int* lda, double* s, double* u, int* ldu,
                    double* vt, int* ldvt, double* work,
                    int* lwork, int* iwork, int *info );
void cgesdd_( char* jobz, int* m, int* n,
                    float _Complex* a, int* lda, float* s,
                    float _Complex* u, int* ldu,
                    float _Complex* vt, int* ldvt,
                    float _Complex* work, int* lwork, float* rwork,
                    int* iwork, int *info );
void zgesdd_( char* jobz, int* m, int* n,
                    double _Complex* a, int* lda, double* s,
                    double _Complex* u, int* ldu,
                    double _Complex* vt, int* ldvt,
                    double _Complex* work, int* lwork,
                    double* rwork, int* iwork, int *info );
void dgejsv_( char* joba, char* jobu, char* jobv, char* jobr, char* jobt,
                    char* jobp, int* m, int* n, double* a,
                    int* lda, double* sva, double* u, int* ldu,
                    double* v, int* ldv, double* work, int* lwork,
                    int* iwork, int *info );
void sgejsv_( char* joba, char* jobu, char* jobv, char* jobr, char* jobt,
                    char* jobp, int* m, int* n, float* a,
                    int* lda, float* sva, float* u, int* ldu,
                    float* v, int* ldv, float* work, int* lwork,
                    int* iwork, int *info );
void dgesvj_( char* joba, char* jobu, char* jobv, int* m,
                    int* n, double* a, int* lda, double* sva,
                    int* mv, double* v, int* ldv, double* work,
                    int* lwork, int *info );
void sgesvj_( char* joba, char* jobu, char* jobv, int* m,
                    int* n, float* a, int* lda, float* sva,
                    int* mv, float* v, int* ldv, float* work,
                    int* lwork, int *info );
void sggsvd_( char* jobu, char* jobv, char* jobq, int* m,
                    int* n, int* p, int* k, int* l,
                    float* a, int* lda, float* b, int* ldb,
                    float* alpha, float* beta, float* u, int* ldu,
                    float* v, int* ldv, float* q, int* ldq,
                    float* work, int* iwork, int *info );
void dggsvd_( char* jobu, char* jobv, char* jobq, int* m,
                    int* n, int* p, int* k, int* l,
                    double* a, int* lda, double* b, int* ldb,
                    double* alpha, double* beta, double* u, int* ldu,
                    double* v, int* ldv, double* q, int* ldq,
                    double* work, int* iwork, int *info );
void cggsvd_( char* jobu, char* jobv, char* jobq, int* m,
                    int* n, int* p, int* k, int* l,
                    float _Complex* a, int* lda,
                    float _Complex* b, int* ldb, float* alpha,
                    float* beta, float _Complex* u, int* ldu,
                    float _Complex* v, int* ldv,
                    float _Complex* q, int* ldq,
                    float _Complex* work, float* rwork, int* iwork,
                    int *info );
void zggsvd_( char* jobu, char* jobv, char* jobq, int* m,
                    int* n, int* p, int* k, int* l,
                    double _Complex* a, int* lda,
                    double _Complex* b, int* ldb, double* alpha,
                    double* beta, double _Complex* u, int* ldu,
                    double _Complex* v, int* ldv,
                    double _Complex* q, int* ldq,
                    double _Complex* work, double* rwork,
                    int* iwork, int *info );
void ssygv_( int* itype, char* jobz, char* uplo, int* n,
                   float* a, int* lda, float* b, int* ldb,
                   float* w, float* work, int* lwork, int *info );
void dsygv_( int* itype, char* jobz, char* uplo, int* n,
                   double* a, int* lda, double* b, int* ldb,
                   double* w, double* work, int* lwork,
                   int *info );
void chegv_( int* itype, char* jobz, char* uplo, int* n,
                   float _Complex* a, int* lda,
                   float _Complex* b, int* ldb, float* w,
                   float _Complex* work, int* lwork, float* rwork,
                   int *info );
void zhegv_( int* itype, char* jobz, char* uplo, int* n,
                   double _Complex* a, int* lda,
                   double _Complex* b, int* ldb, double* w,
                   double _Complex* work, int* lwork,
                   double* rwork, int *info );
void ssygvd_( int* itype, char* jobz, char* uplo, int* n,
                    float* a, int* lda, float* b, int* ldb,
                    float* w, float* work, int* lwork, int* iwork,
                    int* liwork, int *info );
void dsygvd_( int* itype, char* jobz, char* uplo, int* n,
                    double* a, int* lda, double* b, int* ldb,
                    double* w, double* work, int* lwork,
                    int* iwork, int* liwork, int *info );
void chegvd_( int* itype, char* jobz, char* uplo, int* n,
                    float _Complex* a, int* lda,
                    float _Complex* b, int* ldb, float* w,
                    float _Complex* work, int* lwork, float* rwork,
                    int* lrwork, int* iwork, int* liwork,
                    int *info );
void zhegvd_( int* itype, char* jobz, char* uplo, int* n,
                    double _Complex* a, int* lda,
                    double _Complex* b, int* ldb, double* w,
                    double _Complex* work, int* lwork,
                    double* rwork, int* lrwork, int* iwork,
                    int* liwork, int *info );
void ssygvx_( int* itype, char* jobz, char* range, char* uplo,
                    int* n, float* a, int* lda, float* b,
                    int* ldb, float* vl, float* vu, int* il,
                    int* iu, float* abstol, int* m, float* w,
                    float* z, int* ldz, float* work, int* lwork,
                    int* iwork, int* ifail, int *info );
void dsygvx_( int* itype, char* jobz, char* range, char* uplo,
                    int* n, double* a, int* lda, double* b,
                    int* ldb, double* vl, double* vu, int* il,
                    int* iu, double* abstol, int* m, double* w,
                    double* z, int* ldz, double* work, int* lwork,
                    int* iwork, int* ifail, int *info );
void chegvx_( int* itype, char* jobz, char* range, char* uplo,
                    int* n, float _Complex* a, int* lda,
                    float _Complex* b, int* ldb, float* vl,
                    float* vu, int* il, int* iu, float* abstol,
                    int* m, float* w, float _Complex* z,
                    int* ldz, float _Complex* work,
                    int* lwork, float* rwork, int* iwork,
                    int* ifail, int *info );
void zhegvx_( int* itype, char* jobz, char* range, char* uplo,
                    int* n, double _Complex* a, int* lda,
                    double _Complex* b, int* ldb, double* vl,
                    double* vu, int* il, int* iu, double* abstol,
                    int* m, double* w, double _Complex* z,
                    int* ldz, double _Complex* work,
                    int* lwork, double* rwork, int* iwork,
                    int* ifail, int *info );
void sspgv_( int* itype, char* jobz, char* uplo, int* n,
                   float* ap, float* bp, float* w, float* z, int* ldz,
                   float* work, int *info );
void dspgv_( int* itype, char* jobz, char* uplo, int* n,
                   double* ap, double* bp, double* w, double* z,
                   int* ldz, double* work, int *info );
void chpgv_( int* itype, char* jobz, char* uplo, int* n,
                   float _Complex* ap, float _Complex* bp, float* w,
                   float _Complex* z, int* ldz,
                   float _Complex* work, float* rwork, int *info );
void zhpgv_( int* itype, char* jobz, char* uplo, int* n,
                   double _Complex* ap, double _Complex* bp,
                   double* w, double _Complex* z, int* ldz,
                   double _Complex* work, double* rwork,
                   int *info );
void sspgvd_( int* itype, char* jobz, char* uplo, int* n,
                    float* ap, float* bp, float* w, float* z, int* ldz,
                    float* work, int* lwork, int* iwork,
                    int* liwork, int *info );
void dspgvd_( int* itype, char* jobz, char* uplo, int* n,
                    double* ap, double* bp, double* w, double* z,
                    int* ldz, double* work, int* lwork,
                    int* iwork, int* liwork, int *info );
void chpgvd_( int* itype, char* jobz, char* uplo, int* n,
                    float _Complex* ap, float _Complex* bp,
                    float* w, float _Complex* z, int* ldz,
                    float _Complex* work, int* lwork, float* rwork,
                    int* lrwork, int* iwork, int* liwork,
                    int *info );
void zhpgvd_( int* itype, char* jobz, char* uplo, int* n,
                    double _Complex* ap, double _Complex* bp,
                    double* w, double _Complex* z, int* ldz,
                    double _Complex* work, int* lwork,
                    double* rwork, int* lrwork, int* iwork,
                    int* liwork, int *info );
void sspgvx_( int* itype, char* jobz, char* range, char* uplo,
                    int* n, float* ap, float* bp, float* vl, float* vu,
                    int* il, int* iu, float* abstol,
                    int* m, float* w, float* z, int* ldz,
                    float* work, int* iwork, int* ifail,
                    int *info );
void dspgvx_( int* itype, char* jobz, char* range, char* uplo,
                    int* n, double* ap, double* bp, double* vl,
                    double* vu, int* il, int* iu, double* abstol,
                    int* m, double* w, double* z, int* ldz,
                    double* work, int* iwork, int* ifail,
                    int *info );
void chpgvx_( int* itype, char* jobz, char* range, char* uplo,
                    int* n, float _Complex* ap,
                    float _Complex* bp, float* vl, float* vu,
                    int* il, int* iu, float* abstol,
                    int* m, float* w, float _Complex* z,
                    int* ldz, float _Complex* work, float* rwork,
                    int* iwork, int* ifail, int *info );
void zhpgvx_( int* itype, char* jobz, char* range, char* uplo,
                    int* n, double _Complex* ap,
                    double _Complex* bp, double* vl, double* vu,
                    int* il, int* iu, double* abstol,
                    int* m, double* w, double _Complex* z,
                    int* ldz, double _Complex* work, double* rwork,
                    int* iwork, int* ifail, int *info );
void ssbgv_( char* jobz, char* uplo, int* n, int* ka,
                   int* kb, float* ab, int* ldab, float* bb,
                   int* ldbb, float* w, float* z, int* ldz,
                   float* work, int *info );
void dsbgv_( char* jobz, char* uplo, int* n, int* ka,
                   int* kb, double* ab, int* ldab, double* bb,
                   int* ldbb, double* w, double* z, int* ldz,
                   double* work, int *info );
void chbgv_( char* jobz, char* uplo, int* n, int* ka,
                   int* kb, float _Complex* ab, int* ldab,
                   float _Complex* bb, int* ldbb, float* w,
                   float _Complex* z, int* ldz,
                   float _Complex* work, float* rwork, int *info );
void zhbgv_( char* jobz, char* uplo, int* n, int* ka,
                   int* kb, double _Complex* ab, int* ldab,
                   double _Complex* bb, int* ldbb, double* w,
                   double _Complex* z, int* ldz,
                   double _Complex* work, double* rwork,
                   int *info );
void ssbgvd_( char* jobz, char* uplo, int* n, int* ka,
                    int* kb, float* ab, int* ldab, float* bb,
                    int* ldbb, float* w, float* z, int* ldz,
                    float* work, int* lwork, int* iwork,
                    int* liwork, int *info );
void dsbgvd_( char* jobz, char* uplo, int* n, int* ka,
                    int* kb, double* ab, int* ldab, double* bb,
                    int* ldbb, double* w, double* z, int* ldz,
                    double* work, int* lwork, int* iwork,
                    int* liwork, int *info );
void chbgvd_( char* jobz, char* uplo, int* n, int* ka,
                    int* kb, float _Complex* ab, int* ldab,
                    float _Complex* bb, int* ldbb, float* w,
                    float _Complex* z, int* ldz,
                    float _Complex* work, int* lwork, float* rwork,
                    int* lrwork, int* iwork, int* liwork,
                    int *info );
void zhbgvd_( char* jobz, char* uplo, int* n, int* ka,
                    int* kb, double _Complex* ab, int* ldab,
                    double _Complex* bb, int* ldbb, double* w,
                    double _Complex* z, int* ldz,
                    double _Complex* work, int* lwork,
                    double* rwork, int* lrwork, int* iwork,
                    int* liwork, int *info );
void ssbgvx_( char* jobz, char* range, char* uplo, int* n,
                    int* ka, int* kb, float* ab, int* ldab,
                    float* bb, int* ldbb, float* q, int* ldq,
                    float* vl, float* vu, int* il, int* iu,
                    float* abstol, int* m, float* w, float* z,
                    int* ldz, float* work, int* iwork,
                    int* ifail, int *info );
void dsbgvx_( char* jobz, char* range, char* uplo, int* n,
                    int* ka, int* kb, double* ab,
                    int* ldab, double* bb, int* ldbb, double* q,
                    int* ldq, double* vl, double* vu, int* il,
                    int* iu, double* abstol, int* m, double* w,
                    double* z, int* ldz, double* work, int* iwork,
                    int* ifail, int *info );
void chbgvx_( char* jobz, char* range, char* uplo, int* n,
                    int* ka, int* kb, float _Complex* ab,
                    int* ldab, float _Complex* bb,
                    int* ldbb, float _Complex* q, int* ldq,
                    float* vl, float* vu, int* il, int* iu,
                    float* abstol, int* m, float* w,
                    float _Complex* z, int* ldz,
                    float _Complex* work, float* rwork, int* iwork,
                    int* ifail, int *info );
void zhbgvx_( char* jobz, char* range, char* uplo, int* n,
                    int* ka, int* kb, double _Complex* ab,
                    int* ldab, double _Complex* bb,
                    int* ldbb, double _Complex* q, int* ldq,
                    double* vl, double* vu, int* il, int* iu,
                    double* abstol, int* m, double* w,
                    double _Complex* z, int* ldz,
                    double _Complex* work, double* rwork,
                    int* iwork, int* ifail, int *info );
void sgges_( char* jobvsl, char* jobvsr, char* sort,
                   LAPACK_S_SELECT3 selctg, int* n, float* a,
                   int* lda, float* b, int* ldb, int* sdim,
                   float* alphar, float* alphai, float* beta, float* vsl,
                   int* ldvsl, float* vsr, int* ldvsr,
                   float* work, int* lwork, int* bwork,
                   int *info );
void dgges_( char* jobvsl, char* jobvsr, char* sort,
                   LAPACK_D_SELECT3 selctg, int* n, double* a,
                   int* lda, double* b, int* ldb,
                   int* sdim, double* alphar, double* alphai,
                   double* beta, double* vsl, int* ldvsl, double* vsr,
                   int* ldvsr, double* work, int* lwork,
                   int* bwork, int *info );
void cgges_( char* jobvsl, char* jobvsr, char* sort,
                   LAPACK_C_SELECT2 selctg, int* n,
                   float _Complex* a, int* lda,
                   float _Complex* b, int* ldb, int* sdim,
                   float _Complex* alpha, float _Complex* beta,
                   float _Complex* vsl, int* ldvsl,
                   float _Complex* vsr, int* ldvsr,
                   float _Complex* work, int* lwork, float* rwork,
                   int* bwork, int *info );
void zgges_( char* jobvsl, char* jobvsr, char* sort,
                   LAPACK_Z_SELECT2 selctg, int* n,
                   double _Complex* a, int* lda,
                   double _Complex* b, int* ldb, int* sdim,
                   double _Complex* alpha, double _Complex* beta,
                   double _Complex* vsl, int* ldvsl,
                   double _Complex* vsr, int* ldvsr,
                   double _Complex* work, int* lwork,
                   double* rwork, int* bwork, int *info );
void sggesx_( char* jobvsl, char* jobvsr, char* sort,
                    LAPACK_S_SELECT3 selctg, char* sense, int* n,
                    float* a, int* lda, float* b, int* ldb,
                    int* sdim, float* alphar, float* alphai, float* beta,
                    float* vsl, int* ldvsl, float* vsr,
                    int* ldvsr, float* rconde, float* rcondv,
                    float* work, int* lwork, int* iwork,
                    int* liwork, int* bwork,
                    int *info );
void dggesx_( char* jobvsl, char* jobvsr, char* sort,
                    LAPACK_D_SELECT3 selctg, char* sense, int* n,
                    double* a, int* lda, double* b, int* ldb,
                    int* sdim, double* alphar, double* alphai,
                    double* beta, double* vsl, int* ldvsl, double* vsr,
                    int* ldvsr, double* rconde, double* rcondv,
                    double* work, int* lwork, int* iwork,
                    int* liwork, int* bwork,
                    int *info );
void cggesx_( char* jobvsl, char* jobvsr, char* sort,
                    LAPACK_C_SELECT2 selctg, char* sense, int* n,
                    float _Complex* a, int* lda,
                    float _Complex* b, int* ldb, int* sdim,
                    float _Complex* alpha, float _Complex* beta,
                    float _Complex* vsl, int* ldvsl,
                    float _Complex* vsr, int* ldvsr, float* rconde,
                    float* rcondv, float _Complex* work,
                    int* lwork, float* rwork, int* iwork,
                    int* liwork, int* bwork,
                    int *info );
void zggesx_( char* jobvsl, char* jobvsr, char* sort,
                    LAPACK_Z_SELECT2 selctg, char* sense, int* n,
                    double _Complex* a, int* lda,
                    double _Complex* b, int* ldb, int* sdim,
                    double _Complex* alpha, double _Complex* beta,
                    double _Complex* vsl, int* ldvsl,
                    double _Complex* vsr, int* ldvsr,
                    double* rconde, double* rcondv, double _Complex* work,
                    int* lwork, double* rwork, int* iwork,
                    int* liwork, int* bwork,
                    int *info );
void sggev_( char* jobvl, char* jobvr, int* n, float* a,
                   int* lda, float* b, int* ldb, float* alphar,
                   float* alphai, float* beta, float* vl, int* ldvl,
                   float* vr, int* ldvr, float* work, int* lwork,
                   int *info );
void dggev_( char* jobvl, char* jobvr, int* n, double* a,
                   int* lda, double* b, int* ldb, double* alphar,
                   double* alphai, double* beta, double* vl, int* ldvl,
                   double* vr, int* ldvr, double* work,
                   int* lwork, int *info );
void cggev_( char* jobvl, char* jobvr, int* n,
                   float _Complex* a, int* lda,
                   float _Complex* b, int* ldb,
                   float _Complex* alpha, float _Complex* beta,
                   float _Complex* vl, int* ldvl,
                   float _Complex* vr, int* ldvr,
                   float _Complex* work, int* lwork, float* rwork,
                   int *info );
void zggev_( char* jobvl, char* jobvr, int* n,
                   double _Complex* a, int* lda,
                   double _Complex* b, int* ldb,
                   double _Complex* alpha, double _Complex* beta,
                   double _Complex* vl, int* ldvl,
                   double _Complex* vr, int* ldvr,
                   double _Complex* work, int* lwork,
                   double* rwork, int *info );
void sggevx_( char* balanc, char* jobvl, char* jobvr, char* sense,
                    int* n, float* a, int* lda, float* b,
                    int* ldb, float* alphar, float* alphai, float* beta,
                    float* vl, int* ldvl, float* vr, int* ldvr,
                    int* ilo, int* ihi, float* lscale,
                    float* rscale, float* abnrm, float* bbnrm, float* rconde,
                    float* rcondv, float* work, int* lwork,
                    int* iwork, int* bwork,
                    int *info );
void dggevx_( char* balanc, char* jobvl, char* jobvr, char* sense,
                    int* n, double* a, int* lda, double* b,
                    int* ldb, double* alphar, double* alphai,
                    double* beta, double* vl, int* ldvl, double* vr,
                    int* ldvr, int* ilo, int* ihi,
                    double* lscale, double* rscale, double* abnrm,
                    double* bbnrm, double* rconde, double* rcondv, double* work,
                    int* lwork, int* iwork, int* bwork,
                    int *info );
void cggevx_( char* balanc, char* jobvl, char* jobvr, char* sense,
                    int* n, float _Complex* a, int* lda,
                    float _Complex* b, int* ldb,
                    float _Complex* alpha, float _Complex* beta,
                    float _Complex* vl, int* ldvl,
                    float _Complex* vr, int* ldvr, int* ilo,
                    int* ihi, float* lscale, float* rscale, float* abnrm,
                    float* bbnrm, float* rconde, float* rcondv,
                    float _Complex* work, int* lwork, float* rwork,
                    int* iwork, int* bwork,
                    int *info );
void zggevx_( char* balanc, char* jobvl, char* jobvr, char* sense,
                    int* n, double _Complex* a, int* lda,
                    double _Complex* b, int* ldb,
                    double _Complex* alpha, double _Complex* beta,
                    double _Complex* vl, int* ldvl,
                    double _Complex* vr, int* ldvr,
                    int* ilo, int* ihi, double* lscale,
                    double* rscale, double* abnrm, double* bbnrm,
                    double* rconde, double* rcondv, double _Complex* work,
                    int* lwork, double* rwork, int* iwork,
                    int* bwork, int *info );
void dsfrk_( char* transr, char* uplo, char* trans, int* n,
                   int* k, double* alpha, const double* a,
                   int* lda, double* beta, double* c );
void ssfrk_( char* transr, char* uplo, char* trans, int* n,
                   int* k, float* alpha, const float* a, int* lda,
                   float* beta, float* c );
void zhfrk_( char* transr, char* uplo, char* trans, int* n,
                   int* k, double* alpha, const double _Complex* a,
                   int* lda, double* beta, double _Complex* c );
void chfrk_( char* transr, char* uplo, char* trans, int* n,
                   int* k, float* alpha, const float _Complex* a,
                   int* lda, float* beta, float _Complex* c );
void dtfsm_( char* transr, char* side, char* uplo, char* trans,
                   char* diag, int* m, int* n, double* alpha,
                   const double* a, double* b, int* ldb );
void stfsm_( char* transr, char* side, char* uplo, char* trans,
                   char* diag, int* m, int* n, float* alpha,
                   const float* a, float* b, int* ldb );
void ztfsm_( char* transr, char* side, char* uplo, char* trans,
                   char* diag, int* m, int* n,
                   double _Complex* alpha, const double _Complex* a,
                   double _Complex* b, int* ldb );
void ctfsm_( char* transr, char* side, char* uplo, char* trans,
                   char* diag, int* m, int* n,
                   float _Complex* alpha, const float _Complex* a,
                   float _Complex* b, int* ldb );
void dtfttp_( char* transr, char* uplo, int* n, const double* arf,
                    double* ap, int *info );
void stfttp_( char* transr, char* uplo, int* n, const float* arf,
                    float* ap, int *info );
void ztfttp_( char* transr, char* uplo, int* n,
                    const double _Complex* arf, double _Complex* ap,
                    int *info );
void ctfttp_( char* transr, char* uplo, int* n,
                    const float _Complex* arf, float _Complex* ap,
                    int *info );
void dtfttr_( char* transr, char* uplo, int* n, const double* arf,
                    double* a, int* lda, int *info );
void stfttr_( char* transr, char* uplo, int* n, const float* arf,
                    float* a, int* lda, int *info );
void ztfttr_( char* transr, char* uplo, int* n,
                    const double _Complex* arf, double _Complex* a,
                    int* lda, int *info );
void ctfttr_( char* transr, char* uplo, int* n,
                    const float _Complex* arf, float _Complex* a,
                    int* lda, int *info );
void dtpttf_( char* transr, char* uplo, int* n, const double* ap,
                    double* arf, int *info );
void stpttf_( char* transr, char* uplo, int* n, const float* ap,
                    float* arf, int *info );
void ztpttf_( char* transr, char* uplo, int* n,
                    const double _Complex* ap, double _Complex* arf,
                    int *info );
void ctpttf_( char* transr, char* uplo, int* n,
                    const float _Complex* ap, float _Complex* arf,
                    int *info );
void dtpttr_( char* uplo, int* n, const double* ap, double* a,
                    int* lda, int *info );
void stpttr_( char* uplo, int* n, const float* ap, float* a,
                    int* lda, int *info );
void ztpttr_( char* uplo, int* n, const double _Complex* ap,
                    double _Complex* a, int* lda,
                    int *info );
void ctpttr_( char* uplo, int* n, const float _Complex* ap,
                    float _Complex* a, int* lda,
                    int *info );
void dtrttf_( char* transr, char* uplo, int* n, const double* a,
                    int* lda, double* arf, int *info );
void strttf_( char* transr, char* uplo, int* n, const float* a,
                    int* lda, float* arf, int *info );
void ztrttf_( char* transr, char* uplo, int* n,
                    const double _Complex* a, int* lda,
                    double _Complex* arf, int *info );
void ctrttf_( char* transr, char* uplo, int* n,
                    const float _Complex* a, int* lda,
                    float _Complex* arf, int *info );
void dtrttp_( char* uplo, int* n, const double* a, int* lda,
                    double* ap, int *info );
void strttp_( char* uplo, int* n, const float* a, int* lda,
                    float* ap, int *info );
void ztrttp_( char* uplo, int* n, const double _Complex* a,
                    int* lda, double _Complex* ap,
                    int *info );
void ctrttp_( char* uplo, int* n, const float _Complex* a,
                    int* lda, float _Complex* ap,
                    int *info );
void sgeqrfp_( int* m, int* n, float* a, int* lda,
                     float* tau, float* work, int* lwork,
                     int *info );
void dgeqrfp_( int* m, int* n, double* a, int* lda,
                     double* tau, double* work, int* lwork,
                     int *info );
void cgeqrfp_( int* m, int* n, float _Complex* a,
                     int* lda, float _Complex* tau,
                     float _Complex* work, int* lwork,
                     int *info );
void zgeqrfp_( int* m, int* n, double _Complex* a,
                     int* lda, double _Complex* tau,
                     double _Complex* work, int* lwork,
                     int *info );
void clacgv_( int* n, float _Complex* x, int* incx );
void zlacgv_( int* n, double _Complex* x, int* incx );
void slarnv_( int* idist, int* iseed, int* n,
                    float* x );
void dlarnv_( int* idist, int* iseed, int* n,
                    double* x );
void clarnv_( int* idist, int* iseed, int* n,
                    float _Complex* x );
void zlarnv_( int* idist, int* iseed, int* n,
                    double _Complex* x );
void sgeqr2_( int* m, int* n, float* a, int* lda,
                    float* tau, float* work, int *info );
void dgeqr2_( int* m, int* n, double* a, int* lda,
                    double* tau, double* work, int *info );
void cgeqr2_( int* m, int* n, float _Complex* a,
                    int* lda, float _Complex* tau,
                    float _Complex* work, int *info );
void zgeqr2_( int* m, int* n, double _Complex* a,
                    int* lda, double _Complex* tau,
                    double _Complex* work, int *info );
void slacn2_( int* n, float* v, float* x, int* isgn,
                    float* est, int* kase, int* isave );
void dlacn2_( int* n, double* v, double* x, int* isgn,
                    double* est, int* kase, int* isave );
void clacn2_( int* n, float _Complex* v,
                    float _Complex* x, float* est,
                    int* kase, int* isave );
void zlacn2_( int* n, double _Complex* v,
                    double _Complex* x, double* est,
                    int* kase, int* isave );
void slacpy_( char* uplo, int* m, int* n, const float* a,
                    int* lda, float* b, int* ldb );
void dlacpy_( char* uplo, int* m, int* n, const double* a,
                    int* lda, double* b, int* ldb );
void clacpy_( char* uplo, int* m, int* n,
                    const float _Complex* a, int* lda,
                    float _Complex* b, int* ldb );
void zlacpy_( char* uplo, int* m, int* n,
                    const double _Complex* a, int* lda,
                    double _Complex* b, int* ldb );

void clacp2_( char* uplo, int* m, int* n, const float* a,
                    int* lda, float _Complex* b, int* ldb );
void zlacp2_( char* uplo, int* m, int* n, const double* a,
                    int* lda, double _Complex* b,
                    int* ldb );

void sgetf2_( int* m, int* n, float* a, int* lda,
                    int* ipiv, int *info );
void dgetf2_( int* m, int* n, double* a, int* lda,
                    int* ipiv, int *info );
void cgetf2_( int* m, int* n, float _Complex* a,
                    int* lda, int* ipiv, int *info );
void zgetf2_( int* m, int* n, double _Complex* a,
                    int* lda, int* ipiv, int *info );
void slaswp_( int* n, float* a, int* lda, int* k1,
                    int* k2, const int* ipiv, int* incx );
void dlaswp_( int* n, double* a, int* lda, int* k1,
                    int* k2, const int* ipiv, int* incx );
void claswp_( int* n, float _Complex* a, int* lda,
                    int* k1, int* k2, const int* ipiv,
                    int* incx );
void zlaswp_( int* n, double _Complex* a, int* lda,
                    int* k1, int* k2, const int* ipiv,
                    int* incx );
float slange_( char* norm, int* m, int* n, const float* a,
                    int* lda, float* work );
double dlange_( char* norm, int* m, int* n, const double* a,
                    int* lda, double* work );
float clange_( char* norm, int* m, int* n,
                    const float _Complex* a, int* lda, float* work );
double zlange_( char* norm, int* m, int* n,
                    const double _Complex* a, int* lda, double* work );
float clanhe_( char* norm, char* uplo, int* n,
                    const float _Complex* a, int* lda, float* work );
double zlanhe_( char* norm, char* uplo, int* n,
                    const double _Complex* a, int* lda, double* work );
float slansy_( char* norm, char* uplo, int* n, const float* a,
                    int* lda, float* work );
double dlansy_( char* norm, char* uplo, int* n, const double* a,
                    int* lda, double* work );
float clansy_( char* norm, char* uplo, int* n,
                    const float _Complex* a, int* lda, float* work );
double zlansy_( char* norm, char* uplo, int* n,
                    const double _Complex* a, int* lda, double* work );
float slantr_( char* norm, char* uplo, char* diag, int* m,
                    int* n, const float* a, int* lda, float* work );
double dlantr_( char* norm, char* uplo, char* diag, int* m,
                    int* n, const double* a, int* lda, double* work );
float clantr_( char* norm, char* uplo, char* diag, int* m,
                    int* n, const float _Complex* a, int* lda,
                    float* work );
double zlantr_( char* norm, char* uplo, char* diag, int* m,
                    int* n, const double _Complex* a, int* lda,
                    double* work );
float slamch_( char* cmach );
double dlamch_( char* cmach );
void sgelq2_( int* m, int* n, float* a, int* lda,
                    float* tau, float* work, int *info );
void dgelq2_( int* m, int* n, double* a, int* lda,
                    double* tau, double* work, int *info );
void cgelq2_( int* m, int* n, float _Complex* a,
                    int* lda, float _Complex* tau,
                    float _Complex* work, int *info );
void zgelq2_( int* m, int* n, double _Complex* a,
                    int* lda, double _Complex* tau,
                    double _Complex* work, int *info );
void slarfb_( char* side, char* trans, char* direct, char* storev,
                    int* m, int* n, int* k, const float* v,
                    int* ldv, const float* t, int* ldt, float* c,
                    int* ldc, float* work, int* ldwork );
void dlarfb_( char* side, char* trans, char* direct, char* storev,
                    int* m, int* n, int* k,
                    const double* v, int* ldv, const double* t,
                    int* ldt, double* c, int* ldc, double* work,
                    int* ldwork );
void clarfb_( char* side, char* trans, char* direct, char* storev,
                    int* m, int* n, int* k,
                    const float _Complex* v, int* ldv,
                    const float _Complex* t, int* ldt,
                    float _Complex* c, int* ldc,
                    float _Complex* work, int* ldwork );
void zlarfb_( char* side, char* trans, char* direct, char* storev,
                    int* m, int* n, int* k,
                    const double _Complex* v, int* ldv,
                    const double _Complex* t, int* ldt,
                    double _Complex* c, int* ldc,
                    double _Complex* work, int* ldwork );
void slarfg_( int* n, float* alpha, float* x, int* incx,
                    float* tau );
void dlarfg_( int* n, double* alpha, double* x, int* incx,
                    double* tau );
void clarfg_( int* n, float _Complex* alpha,
                    float _Complex* x, int* incx,
                    float _Complex* tau );
void zlarfg_( int* n, double _Complex* alpha,
                    double _Complex* x, int* incx,
                    double _Complex* tau );
void slarft_( char* direct, char* storev, int* n, int* k,
                    const float* v, int* ldv, const float* tau, float* t,
                    int* ldt );
void dlarft_( char* direct, char* storev, int* n, int* k,
                    const double* v, int* ldv, const double* tau,
                    double* t, int* ldt );
void clarft_( char* direct, char* storev, int* n, int* k,
                    const float _Complex* v, int* ldv,
                    const float _Complex* tau, float _Complex* t,
                    int* ldt );
void zlarft_( char* direct, char* storev, int* n, int* k,
                    const double _Complex* v, int* ldv,
                    const double _Complex* tau, double _Complex* t,
                    int* ldt );
void slarfx_( char* side, int* m, int* n, const float* v,
                    float* tau, float* c, int* ldc, float* work );
void dlarfx_( char* side, int* m, int* n, const double* v,
                    double* tau, double* c, int* ldc, double* work );
void clarfx_( char* side, int* m, int* n,
                    const float _Complex* v, float _Complex* tau,
                    float _Complex* c, int* ldc,
                    float _Complex* work );
void zlarfx_( char* side, int* m, int* n,
                    const double _Complex* v, double _Complex* tau,
                    double _Complex* c, int* ldc,
                    double _Complex* work );
void slatms_( int* m, int* n, char* dist, int* iseed,
                    char* sym, float* d, int* mode, float* cond,
                    float* dmax, int* kl, int* ku, char* pack,
                    float* a, int* lda, float* work, int *info );
void dlatms_( int* m, int* n, char* dist, int* iseed,
                    char* sym, double* d, int* mode, double* cond,
                    double* dmax, int* kl, int* ku, char* pack,
                    double* a, int* lda, double* work,
                    int *info );
void clatms_( int* m, int* n, char* dist, int* iseed,
                    char* sym, float* d, int* mode, float* cond,
                    float* dmax, int* kl, int* ku, char* pack,
                    float _Complex* a, int* lda,
                    float _Complex* work, int *info );
void zlatms_( int* m, int* n, char* dist, int* iseed,
                    char* sym, double* d, int* mode, double* cond,
                    double* dmax, int* kl, int* ku, char* pack,
                    double _Complex* a, int* lda,
                    double _Complex* work, int *info );
void slag2d_( int* m, int* n, const float* sa,
                    int* ldsa, double* a, int* lda,
                    int *info );
void dlag2s_( int* m, int* n, const double* a,
                    int* lda, float* sa, int* ldsa,
                    int *info );
void clag2z_( int* m, int* n,
                    const float _Complex* sa, int* ldsa,
                    double _Complex* a, int* lda,
                    int *info );
void zlag2c_( int* m, int* n,
                    const double _Complex* a, int* lda,
                    float _Complex* sa, int* ldsa,
                    int *info );
void slauum_( char* uplo, int* n, float* a, int* lda,
                    int *info );
void dlauum_( char* uplo, int* n, double* a, int* lda,
                    int *info );
void clauum_( char* uplo, int* n, float _Complex* a,
                    int* lda, int *info );
void zlauum_( char* uplo, int* n, double _Complex* a,
                    int* lda, int *info );
void slagge_( int* m, int* n, int* kl,
                    int* ku, const float* d, float* a, int* lda,
                    int* iseed, float* work, int *info );
void dlagge_( int* m, int* n, int* kl,
                    int* ku, const double* d, double* a, int* lda,
                    int* iseed, double* work, int *info );
void clagge_( int* m, int* n, int* kl,
                    int* ku, const float* d, float _Complex* a,
                    int* lda, int* iseed,
                    float _Complex* work, int *info );
void zlagge_( int* m, int* n, int* kl,
                    int* ku, const double* d, double _Complex* a,
                    int* lda, int* iseed,
                    double _Complex* work, int *info );
void slaset_( char* uplo, int* m, int* n, float* alpha,
                    float* beta, float* a, int* lda );
void dlaset_( char* uplo, int* m, int* n, double* alpha,
                    double* beta, double* a, int* lda );
void claset_( char* uplo, int* m, int* n,
                    float _Complex* alpha, float _Complex* beta,
                    float _Complex* a, int* lda );
void zlaset_( char* uplo, int* m, int* n,
                    double _Complex* alpha, double _Complex* beta,
                    double _Complex* a, int* lda );
void slasrt_( char* id, int* n, float* d, int *info );
void dlasrt_( char* id, int* n, double* d, int *info );
void claghe_( int* n, int* k, const float* d,
                    float _Complex* a, int* lda, int* iseed,
                    float _Complex* work, int *info );
void zlaghe_( int* n, int* k, const double* d,
                    double _Complex* a, int* lda,
                    int* iseed, double _Complex* work,
                    int *info );
void slagsy_( int* n, int* k, const float* d, float* a,
                    int* lda, int* iseed, float* work,
                    int *info );
void dlagsy_( int* n, int* k, const double* d, double* a,
                    int* lda, int* iseed, double* work,
                    int *info );
void clagsy_( int* n, int* k, const float* d,
                    float _Complex* a, int* lda, int* iseed,
                    float _Complex* work, int *info );
void zlagsy_( int* n, int* k, const double* d,
                    double _Complex* a, int* lda,
                    int* iseed, double _Complex* work,
                    int *info );
void slapmr_( int* forwrd, int* m, int* n,
                    float* x, int* ldx, int* k );
void dlapmr_( int* forwrd, int* m, int* n,
                    double* x, int* ldx, int* k );
void clapmr_( int* forwrd, int* m, int* n,
                    float _Complex* x, int* ldx, int* k );
void zlapmr_( int* forwrd, int* m, int* n,
                    double _Complex* x, int* ldx, int* k );
float slapy2_( float* x, float* y );
double dlapy2_( double* x, double* y );
float slapy3_( float* x, float* y, float* z );
double dlapy3_( double* x, double* y, double* z );
void slartgp_( float* f, float* g, float* cs, float* sn, float* r );
void dlartgp_( double* f, double* g, double* cs, double* sn, double* r );
void slartgs_( float* x, float* y, float* sigma, float* cs, float* sn );
void dlartgs_( double* x, double* y, double* sigma, double* cs,
                     double* sn );

void cbbcsd_( char* jobu1, char* jobu2,
                    char* jobv1t, char* jobv2t, char* trans,
                    int* m, int* p, int* q,
                    float* theta, float* phi,
                    float _Complex* u1, int* ldu1,
                    float _Complex* u2, int* ldu2,
                    float _Complex* v1t, int* ldv1t,
                    float _Complex* v2t, int* ldv2t,
                    float* b11d, float* b11e, float* b12d,
                    float* b12e, float* b21d, float* b21e,
                    float* b22d, float* b22e, float* rwork,
                    int* lrwork , int *info );
void cheswapr_( char* uplo, int* n,
                      float _Complex* a, int* i1,
                      int* i2 );
void chetri2_( char* uplo, int* n,
                     float _Complex* a, int* lda,
                     const int* ipiv,
                     float _Complex* work, int* lwork , int *info );
void chetri2x_( char* uplo, int* n,
                      float _Complex* a, int* lda,
                      const int* ipiv,
                      float _Complex* work, int* nb , int *info );
void chetrs2_( char* uplo, int* n,
                     int* nrhs, const float _Complex* a,
                     int* lda, const int* ipiv,
                     float _Complex* b, int* ldb,
                     float _Complex* work , int *info );
void csyconv_( char* uplo, char* way,
                     int* n, float _Complex* a,
                     int* lda, const int* ipiv,
                     float _Complex* work , int *info );
void csyswapr_( char* uplo, int* n,
                      float _Complex* a, int* i1,
                      int* i2 );
void csytri2_( char* uplo, int* n,
                     float _Complex* a, int* lda,
                     const int* ipiv,
                     float _Complex* work, int* lwork , int *info );
void csytri2x_( char* uplo, int* n,
                      float _Complex* a, int* lda,
                      const int* ipiv,
                      float _Complex* work, int* nb , int *info );
void csytrs2_( char* uplo, int* n,
                     int* nrhs, const float _Complex* a,
                     int* lda, const int* ipiv,
                     float _Complex* b, int* ldb,
                     float _Complex* work , int *info );
void cunbdb_( char* trans, char* signs,
                    int* m, int* p, int* q,
                    float _Complex* x11, int* ldx11,
                    float _Complex* x12, int* ldx12,
                    float _Complex* x21, int* ldx21,
                    float _Complex* x22, int* ldx22,
                    float* theta, float* phi,
                    float _Complex* taup1,
                    float _Complex* taup2,
                    float _Complex* tauq1,
                    float _Complex* tauq2,
                    float _Complex* work, int* lwork , int *info );
void cuncsd_( char* jobu1, char* jobu2,
                    char* jobv1t, char* jobv2t, char* trans,
                    char* signs, int* m, int* p,
                    int* q, float _Complex* x11,
                    int* ldx11, float _Complex* x12,
                    int* ldx12, float _Complex* x21,
                    int* ldx21, float _Complex* x22,
                    int* ldx22, float* theta,
                    float _Complex* u1, int* ldu1,
                    float _Complex* u2, int* ldu2,
                    float _Complex* v1t, int* ldv1t,
                    float _Complex* v2t, int* ldv2t,
                    float _Complex* work, int* lwork,
                    float* rwork, int* lrwork,
                    int* iwork , int *info );
void dbbcsd_( char* jobu1, char* jobu2,
                    char* jobv1t, char* jobv2t, char* trans,
                    int* m, int* p, int* q,
                    double* theta, double* phi, double* u1,
                    int* ldu1, double* u2, int* ldu2,
                    double* v1t, int* ldv1t, double* v2t,
                    int* ldv2t, double* b11d, double* b11e,
                    double* b12d, double* b12e, double* b21d,
                    double* b21e, double* b22d, double* b22e,
                    double* work, int* lwork , int *info );
void dorbdb_( char* trans, char* signs,
                    int* m, int* p, int* q,
                    double* x11, int* ldx11, double* x12,
                    int* ldx12, double* x21, int* ldx21,
                    double* x22, int* ldx22, double* theta,
                    double* phi, double* taup1, double* taup2,
                    double* tauq1, double* tauq2, double* work,
                    int* lwork , int *info );
void dorcsd_( char* jobu1, char* jobu2,
                    char* jobv1t, char* jobv2t, char* trans,
                    char* signs, int* m, int* p,
                    int* q, double* x11, int* ldx11,
                    double* x12, int* ldx12, double* x21,
                    int* ldx21, double* x22, int* ldx22,
                    double* theta, double* u1, int* ldu1,
                    double* u2, int* ldu2, double* v1t,
                    int* ldv1t, double* v2t, int* ldv2t,
                    double* work, int* lwork,
                    int* iwork , int *info );
void dsyconv_( char* uplo, char* way,
                     int* n, double* a, int* lda,
                     const int* ipiv, double* work , int *info );
void dsyswapr_( char* uplo, int* n,
                      double* a, int* i1, int* i2 );
void dsytri2_( char* uplo, int* n,
                     double* a, int* lda,
                     const int* ipiv,
                     double _Complex* work, int* lwork , int *info );
void dsytri2x_( char* uplo, int* n,
                      double* a, int* lda,
                      const int* ipiv, double* work,
                      int* nb , int *info );
void dsytrs2_( char* uplo, int* n,
                     int* nrhs, const double* a,
                     int* lda, const int* ipiv,
                     double* b, int* ldb, double* work , int *info );
void sbbcsd_( char* jobu1, char* jobu2,
                    char* jobv1t, char* jobv2t, char* trans,
                    int* m, int* p, int* q,
                    float* theta, float* phi, float* u1,
                    int* ldu1, float* u2, int* ldu2,
                    float* v1t, int* ldv1t, float* v2t,
                    int* ldv2t, float* b11d, float* b11e,
                    float* b12d, float* b12e, float* b21d,
                    float* b21e, float* b22d, float* b22e,
                    float* work, int* lwork , int *info );
void sorbdb_( char* trans, char* signs,
                    int* m, int* p, int* q,
                    float* x11, int* ldx11, float* x12,
                    int* ldx12, float* x21, int* ldx21,
                    float* x22, int* ldx22, float* theta,
                    float* phi, float* taup1, float* taup2,
                    float* tauq1, float* tauq2, float* work,
                    int* lwork , int *info );
void sorcsd_( char* jobu1, char* jobu2,
                    char* jobv1t, char* jobv2t, char* trans,
                    char* signs, int* m, int* p,
                    int* q, float* x11, int* ldx11,
                    float* x12, int* ldx12, float* x21,
                    int* ldx21, float* x22, int* ldx22,
                    float* theta, float* u1, int* ldu1,
                    float* u2, int* ldu2, float* v1t,
                    int* ldv1t, float* v2t, int* ldv2t,
                    float* work, int* lwork,
                    int* iwork , int *info );
void ssyconv_( char* uplo, char* way,
                     int* n, float* a, int* lda,
                     const int* ipiv, float* work , int *info );
void ssyswapr_( char* uplo, int* n,
                      float* a, int* i1, int* i2 );
void ssytri2_( char* uplo, int* n,
                     float* a, int* lda,
                     const int* ipiv,
                     float _Complex* work, int* lwork , int *info );
void ssytri2x_( char* uplo, int* n,
                      float* a, int* lda,
                      const int* ipiv, float* work,
                      int* nb , int *info );
void ssytrs2_( char* uplo, int* n,
                     int* nrhs, const float* a,
                     int* lda, const int* ipiv,
                     float* b, int* ldb, float* work , int *info );
void zbbcsd_( char* jobu1, char* jobu2,
                    char* jobv1t, char* jobv2t, char* trans,
                    int* m, int* p, int* q,
                    double* theta, double* phi,
                    double _Complex* u1, int* ldu1,
                    double _Complex* u2, int* ldu2,
                    double _Complex* v1t, int* ldv1t,
                    double _Complex* v2t, int* ldv2t,
                    double* b11d, double* b11e, double* b12d,
                    double* b12e, double* b21d, double* b21e,
                    double* b22d, double* b22e, double* rwork,
                    int* lrwork , int *info );
void zheswapr_( char* uplo, int* n,
                      double _Complex* a, int* i1,
                      int* i2 );
void zhetri2_( char* uplo, int* n,
                     double _Complex* a, int* lda,
                     const int* ipiv,
                     double _Complex* work, int* lwork , int *info );
void zhetri2x_( char* uplo, int* n,
                      double _Complex* a, int* lda,
                      const int* ipiv,
                      double _Complex* work, int* nb , int *info );
void zhetrs2_( char* uplo, int* n,
                     int* nrhs,
                     const double _Complex* a, int* lda,
                     const int* ipiv,
                     double _Complex* b, int* ldb,
                     double _Complex* work , int *info );
void zsyconv_( char* uplo, char* way,
                     int* n, double _Complex* a,
                     int* lda, const int* ipiv,
                     double _Complex* work , int *info );
void zsyswapr_( char* uplo, int* n,
                      double _Complex* a, int* i1,
                      int* i2 );
void zsytri2_( char* uplo, int* n,
                     double _Complex* a, int* lda,
                     const int* ipiv,
                     double _Complex* work, int* lwork , int *info );
void zsytri2x_( char* uplo, int* n,
                      double _Complex* a, int* lda,
                      const int* ipiv,
                      double _Complex* work, int* nb , int *info );
void zsytrs2_( char* uplo, int* n,
                     int* nrhs,
                     const double _Complex* a, int* lda,
                     const int* ipiv,
                     double _Complex* b, int* ldb,
                     double _Complex* work , int *info );
void zunbdb_( char* trans, char* signs,
                    int* m, int* p, int* q,
                    double _Complex* x11, int* ldx11,
                    double _Complex* x12, int* ldx12,
                    double _Complex* x21, int* ldx21,
                    double _Complex* x22, int* ldx22,
                    double* theta, double* phi,
                    double _Complex* taup1,
                    double _Complex* taup2,
                    double _Complex* tauq1,
                    double _Complex* tauq2,
                    double _Complex* work, int* lwork , int *info );
void zuncsd_( char* jobu1, char* jobu2,
                    char* jobv1t, char* jobv2t, char* trans,
                    char* signs, int* m, int* p,
                    int* q, double _Complex* x11,
                    int* ldx11, double _Complex* x12,
                    int* ldx12, double _Complex* x21,
                    int* ldx21, double _Complex* x22,
                    int* ldx22, double* theta,
                    double _Complex* u1, int* ldu1,
                    double _Complex* u2, int* ldu2,
                    double _Complex* v1t, int* ldv1t,
                    double _Complex* v2t, int* ldv2t,
                    double _Complex* work, int* lwork,
                    double* rwork, int* lrwork,
                    int* iwork , int *info );

void sgemqrt_( char* side, char* trans, int* m, int* n,
                     int* k, int* nb, const float* v,
                     int* ldv, const float* t, int* ldt, float* c,
                     int* ldc, float* work, int *info );
void dgemqrt_( char* side, char* trans, int* m, int* n,
                     int* k, int* nb, const double* v,
                     int* ldv, const double* t, int* ldt,
                     double* c, int* ldc, double* work,
                     int *info );
void cgemqrt_( char* side, char* trans, int* m, int* n,
                     int* k, int* nb,
                     const float _Complex* v, int* ldv,
                     const float _Complex* t, int* ldt,
                     float _Complex* c, int* ldc,
                     float _Complex* work, int *info );
void zgemqrt_( char* side, char* trans, int* m, int* n,
                     int* k, int* nb,
                     const double _Complex* v, int* ldv,
                     const double _Complex* t, int* ldt,
                     double _Complex* c, int* ldc,
                     double _Complex* work, int *info );
void sgeqrt_( int* m, int* n, int* nb, float* a,
                    int* lda, float* t, int* ldt, float* work,
                    int *info );
void dgeqrt_( int* m, int* n, int* nb, double* a,
                    int* lda, double* t, int* ldt, double* work,
                    int *info );
void cgeqrt_( int* m, int* n, int* nb,
                    float _Complex* a, int* lda,
                    float _Complex* t, int* ldt,
                    float _Complex* work, int *info );
void zgeqrt_( int* m, int* n, int* nb,
                    double _Complex* a, int* lda,
                    double _Complex* t, int* ldt,
                    double _Complex* work, int *info );
void sgeqrt2_( int* m, int* n, float* a, int* lda,
                     float* t, int* ldt, int *info );
void dgeqrt2_( int* m, int* n, double* a, int* lda,
                     double* t, int* ldt, int *info );
void cgeqrt2_( int* m, int* n, float _Complex* a,
                     int* lda, float _Complex* t, int* ldt,
                     int *info );
void zgeqrt2_( int* m, int* n, double _Complex* a,
                     int* lda, double _Complex* t, int* ldt,
                     int *info );
void sgeqrt3_( int* m, int* n, float* a, int* lda,
                     float* t, int* ldt, int *info );
void dgeqrt3_( int* m, int* n, double* a, int* lda,
                     double* t, int* ldt, int *info );
void cgeqrt3_( int* m, int* n, float _Complex* a,
                     int* lda, float _Complex* t, int* ldt,
                     int *info );
void zgeqrt3_( int* m, int* n, double _Complex* a,
                     int* lda, double _Complex* t, int* ldt,
                     int *info );
void stpmqrt_( char* side, char* trans, int* m, int* n,
                     int* k, int* l, int* nb,
                     const float* v, int* ldv, const float* t,
                     int* ldt, float* a, int* lda, float* b,
                     int* ldb, float* work, int *info );
void dtpmqrt_( char* side, char* trans, int* m, int* n,
                     int* k, int* l, int* nb,
                     const double* v, int* ldv, const double* t,
                     int* ldt, double* a, int* lda, double* b,
                     int* ldb, double* work, int *info );
void ctpmqrt_( char* side, char* trans, int* m, int* n,
                     int* k, int* l, int* nb,
                     const float _Complex* v, int* ldv,
                     const float _Complex* t, int* ldt,
                     float _Complex* a, int* lda,
                     float _Complex* b, int* ldb,
                     float _Complex* work, int *info );
void ztpmqrt_( char* side, char* trans, int* m, int* n,
                     int* k, int* l, int* nb,
                     const double _Complex* v, int* ldv,
                     const double _Complex* t, int* ldt,
                     double _Complex* a, int* lda,
                     double _Complex* b, int* ldb,
                     double _Complex* work, int *info );
void dtpqrt_( int* m, int* n, int* l, int* nb,
                    double* a, int* lda, double* b, int* ldb,
                    double* t, int* ldt, double* work,
                    int *info );
void ctpqrt_( int* m, int* n, int* l, int* nb,
                    float _Complex* a, int* lda,
                    float _Complex* b, int* ldb,
                    float _Complex* t, int* ldt,
                    float _Complex* work, int *info );
void ztpqrt_( int* m, int* n, int* l, int* nb,
                    double _Complex* a, int* lda,
                    double _Complex* b, int* ldb,
                    double _Complex* t, int* ldt,
                    double _Complex* work, int *info );
void stpqrt2_( int* m, int* n, int* l,
                     float* a, int* lda,
                     float* b, int* ldb,
                     float* t, int* ldt,
                     int *info );
void dtpqrt2_( int* m, int* n, int* l,
                     double* a, int* lda,
                     double* b, int* ldb,
                     double* t, int* ldt,
                     int *info );
void ctpqrt2_( int* m, int* n, int* l,
                     float _Complex* a, int* lda,
                     float _Complex* b, int* ldb,
                     float _Complex* t, int* ldt,
                     int *info );
void ztpqrt2_( int* m, int* n, int* l,
                     double _Complex* a, int* lda,
                     double _Complex* b, int* ldb,
                     double _Complex* t, int* ldt,
                     int *info );
void stprfb_( char* side, char* trans, char* direct, char* storev,
                    int* m, int* n, int* k, int* l,
                    const float* v, int* ldv, const float* t,
                    int* ldt, float* a, int* lda, float* b,
                    int* ldb, const float* work,
                    int* ldwork );
void dtprfb_( char* side, char* trans, char* direct, char* storev,
                    int* m, int* n, int* k, int* l,
                    const double* v, int* ldv, const double* t,
                    int* ldt, double* a, int* lda, double* b,
                    int* ldb, const double* work,
                    int* ldwork );
void ctprfb_( char* side, char* trans, char* direct, char* storev,
                    int* m, int* n, int* k, int* l,
                    const float _Complex* v, int* ldv,
                    const float _Complex* t, int* ldt,
                    float _Complex* a, int* lda,
                    float _Complex* b, int* ldb,
                    const float* work, int* ldwork );
void ztprfb_( char* side, char* trans, char* direct, char* storev,
                    int* m, int* n, int* k, int* l,
                    const double _Complex* v, int* ldv,
                    const double _Complex* t, int* ldt,
                    double _Complex* a, int* lda,
                    double _Complex* b, int* ldb,
                    const double* work, int* ldwork );

void ssysv_rook_( char* uplo, int* n, int* nrhs, float* a,
                        int* lda, int* ipiv, float* b,
                        int* ldb, float* work, int* lwork,
                        int *info );
void dsysv_rook_( char* uplo, int* n, int* nrhs, double* a,
                        int* lda, int* ipiv, double* b,
                        int* ldb, double* work, int* lwork,
                        int *info );
void csysv_rook_( char* uplo, int* n, int* nrhs,
                        float _Complex* a, int* lda,
                        int* ipiv, float _Complex* b,
                        int* ldb, float _Complex* work,
                        int* lwork, int *info );
void zsysv_rook_( char* uplo, int* n, int* nrhs,
                        double _Complex* a, int* lda,
                        int* ipiv, double _Complex* b,
                        int* ldb, double _Complex* work,
                        int* lwork, int *info );
void csyr_( char* uplo, int* n, float _Complex* alpha,
                      const float _Complex* x, int* incx,
                      float _Complex* a, int* lda );
void zsyr_( char* uplo, int* n, double _Complex* alpha,
                      const double _Complex* x, int* incx,
                      double _Complex* a, int* lda );
void ilaver_( const int* vers_major, const int* vers_minor,
                     const int* vers_patch );
# 28 "/home/ymlusr/local/var/yml/dr/binaries/sousEspace.c" 2






int main_sousEspace(int argc, char **argv)
{

  {
    extern XMP_vector *_XMP_ADDR_c;
    type_import((void *)(_XMP_ADDR_c),argv[1],vector_MPI_Type,vector_import,"6;1,1;1,1;[i]:(*,i)");
  }

{
  extern double gettimeofday_sec(), _xmp_etime_body;
  double _xmp_t0;
  MPI_Barrier(((MPI_Comm) ((void *) &(ompi_mpi_comm_world))));
  _xmp_t0 = gettimeofday_sec();



int n=6; int m=3;
 double M[m][m];

double H[m][m];
  double delta1[m][m];
 double BmCm[m][m];

double *b=malloc(m*sizeof(double));
double *M_l=malloc(m*m*sizeof(double));
int *ind1=malloc(m*sizeof(int));


double *wr=malloc(m*sizeof(double));
 double *wi=malloc(m*sizeof(double));
double *vr=malloc(m*m*sizeof(double));
double *wr1=malloc(m*sizeof(double));
 double *wi1=malloc(m*sizeof(double));
double *vr1=malloc(m*m*sizeof(double));
double sum=0.0;
 double aide,max =0.0;
  int PMAX,p;




for (int i=0; i<m;i++){
for (int j=0; j<m;j++){
M[i][j]=c[j+i];
}}

# 79 "/home/ymlusr/local/var/yml/dr/binaries/sousEspace.c"
#pragma xmp task on _XMP_default_nodes(1,1)
# 79 "/home/ymlusr/local/var/yml/dr/binaries/sousEspace.c"

{printf("mat M:\n");
for (int i=0; i<m; i++){
printf("\n");
for (int j=0; j<m; j++){
printf(" %f \t", M[i][j]);
}}
printf("\n");
}

for (int i=0; i<m;i++){
b[i]=-c[i+m];
}





for(int i=0;i<m;i++){
for(int j=0;j<m;j++){
M_l[j*m+i]=M[i][j];
}}
# 110 "/home/ymlusr/local/var/yml/dr/binaries/sousEspace.c"
int lda=m; int info=0; int NRHS=1;

int *tab=calloc(m*m,sizeof(int));


 dgetrf_(&m,&m,M_l,&lda,tab,&info);



 char trans='N'; int ldb=m;

 dgetrs_(&trans,&m,&NRHS,M_l,&lda,tab,b,&ldb,&info);
 free(tab);

# 123 "/home/ymlusr/local/var/yml/dr/binaries/sousEspace.c"
#pragma xmp task on _XMP_default_nodes(1,1)
# 123 "/home/ymlusr/local/var/yml/dr/binaries/sousEspace.c"

{printf("\nsolution:\n");
for (int i=0; i<m; i++) printf(" %f \t", b[i]);
printf("\n");
}



# 130 "/home/ymlusr/local/var/yml/dr/binaries/sousEspace.c"
#pragma xmp task on _XMP_default_nodes(1,1)
# 130 "/home/ymlusr/local/var/yml/dr/binaries/sousEspace.c"

{
for (int i=0; i<m;i++){
for (int j=0; j<m;j++){
H[i][j]=0.0;
if(i==j+1) H[i][j]=1;
}}
for (int j=0; j<m;j++) H[0][j]=-b[m-j-1];


printf("mat H:\n");

for (int i=0; i<m;i++){ printf("\n");
for (int j=0; j<m;j++){
 printf(" %f \t", H[i][j]);}}
printf("\n");

for(int i=0;i<m;i++){
for(int j=0;j<m;j++){
M_l[j*m+i]=H[i][j];
}}
printf("\nmat H_l:\n");

for (int i=0; i<m*m;i++){
 printf(" %f \t", M_l[i]);}
}


# 157 "/home/ymlusr/local/var/yml/dr/binaries/sousEspace.c"
#pragma xmp task on _XMP_default_nodes(1,1)
# 157 "/home/ymlusr/local/var/yml/dr/binaries/sousEspace.c"

{
char balanc= 'B';
 char jobvl = 'N';
 char jobvr = 'V';
 char sense = 'V';
 int ldvl = m;
 int ldb;
 ldb=m;
 double* vl = calloc(ldvl*m,sizeof(double));
 int ldvr = m;
 int ilo=0, ihi=0;
 double* scale = calloc(m,sizeof(double));
 double abnrm=0.;
 double* rconde = calloc(m,sizeof(double));
 double* rcondv = calloc(m,sizeof(double));
 int *iwork = calloc(2*m-2,sizeof(int));
 double wkopt=0.;
 int lwork = -1;
 int info; dgeevx_(&balanc,&jobvl,&jobvr,&sense,&m,M_l,&ldb,wr,wi,vl,&ldvl,vr,&ldvr,&ilo,&ihi,scale,&abnrm,rconde,rcondv,&wkopt,&lwork,iwork,&info);
 lwork = (int)wkopt;
 double* work = calloc(lwork,sizeof(double)); dgeevx_(&balanc,&jobvl,&jobvr,&sense,&m,M_l,&ldb,wr,wi,vl,&ldvl,vr,&ldvr,&ilo,&ihi,scale,&abnrm,rconde,rcondv,work,&lwork,iwork,&info);
 if( info > 0 ) {
  printf( "Erreur: Valeurs et vecteurs propres non calculés.\n" );
  exit( 1 );
 }
 free(vl);free(scale);free(rconde);free(rcondv);free(iwork);free(work);
}



# 187 "/home/ymlusr/local/var/yml/dr/binaries/sousEspace.c"
#pragma xmp task on _XMP_default_nodes(1,1)
# 187 "/home/ymlusr/local/var/yml/dr/binaries/sousEspace.c"

{
for (int i=0; i<m;i++){
for (int j=0; j<m;j++){
delta1[i][j]=c[j+i+1];
}}
printf("mat delta:\n");
for (int i=0; i<m; i++){
printf("\n");
for (int j=0; j<m; j++){
printf(" %f \t", delta1[i][j]);
}}
printf("\n");


for(int i=0;i<m;i++){
for(int j=0;j<m;j++){
M_l[j*m+i]=M[i][j];
}}
printf("\nmat Bm:\n");

for (int i=0; i<m*m;i++){
 printf(" %f \t", M_l[i]);}

int lda1;
lda1=m;
 int lwork1=m; int info1;
double *work1=malloc(m*sizeof(double));
int *ipiv1=malloc(m*sizeof(int));
   dgetrf_(&m,&m,M_l,&lda1,ipiv1,&info1);

dgetri_(&m, M_l,&lda1,ipiv1,work1,&lwork1,&info1);

free(work1); free(ipiv1);
printf("\nmat M_l inv:\n");

for (int i=0; i<m*m;i++){
 printf(" %f \t", M_l[i]);}

for(int j=0;j<m;j++){
  for(int k=0;k<m;k++){
   M[k][j]=M_l[j*m+k];}}


printf("mat delta:\n");
for (int i=0; i<m; i++){
printf("\n");
for (int j=0; j<m; j++){
printf(" %f \t", delta1[i][j]);
}}
printf("\n");

for (int i=0; i<m;i++){
for(int j=0;j<m;j++){
BmCm[i][j]=0;
for(int k=0;k<m;k++){
BmCm[i][j]=BmCm[i][j]+M[i][k]*delta1[k][j];
}}}

printf("mat BMCM:\n");
for (int i=0; i<m; i++){
printf("\n");
for (int j=0; j<m; j++){
printf(" %f \t", BmCm[i][j]);
}}
printf("\n");

for(int i=0;i<m;i++){
for(int j=0;j<m;j++){
M_l[j*m+i]=BmCm[i][j];
}}

char balanc= 'B';
 char jobvl = 'N';
 char jobvr = 'V';
 char sense = 'V';
 int ldvl = m;
 int ldb;
 ldb=m;
 double* vl = calloc(ldvl*m,sizeof(double));
 int ldvr = m;
 int ilo=0, ihi=0;
 double* scale = calloc(m,sizeof(double));
 double abnrm=0.;
 double* rconde = calloc(m,sizeof(double));
 double* rcondv = calloc(m,sizeof(double));
 int *iwork = calloc(2*m-2,sizeof(int));
 double wkopt=0.;
 int lwork = -1;
 int info; dgeevx_(&balanc,&jobvl,&jobvr,&sense,&m,M_l,&ldb,wr1,wi1,vl,&ldvl,vr1,&ldvr,&ilo,&ihi,scale,&abnrm,rconde,rcondv,&wkopt,&lwork,iwork,&info);
 lwork = (int)wkopt;
 double* work = calloc(lwork,sizeof(double)); dgeevx_(&balanc,&jobvl,&jobvr,&sense,&m,M_l,&ldb,wr1,wi1,vl,&ldvl,vr1,&ldvr,&ilo,&ihi,scale,&abnrm,rconde,rcondv,work,&lwork,iwork,&info);
 if( info > 0 ) {
  printf( "Erreur: Valeurs et vecteurs propres non calculés.\n" );
  exit( 1 );
 }
 free(vl);free(scale);free(rconde);free(rcondv);free(iwork);free(work);



for (int i=0; i<m-1;i++){

    PMAX=i;
    for (int j=i+1;j<m;j++)
      if (fabs(wr[j])>fabs(wr[PMAX])) PMAX=j;

    aide=wr[i];
    wr[i]=wr[PMAX];
    wr[PMAX]=aide;
  }

for (int j=0; j<m; j++) res[0][j]= wr[j];

max =0.0;
for (int i=0; i<m;i++) ind1[i]=i;
for (int i=0; i<m-1;i++){

    PMAX=i;
    for (int j=i+1;j<m;j++)
      if (fabs(wr1[j])>fabs(wr1[PMAX])) PMAX=j;

    aide=wr1[i];
    wr1[i]=wr1[PMAX];
    wr1[PMAX]=aide;
 p = ind1[i];
    ind1[i]=ind1[PMAX];
    ind1[PMAX]=p;
  }

for (int j=0;j<m;j++){
for (int i=1;i<m+1;i++){
res[i][j]=vr1[ind1[j]*m+i-1];
}}
}

printf("\nind \n");
for (int i=0; i<m;i++){
 printf(" %d \t", ind1[i]);
}
printf("\n wr1 \n");
for (int i=0; i<m;i++){
 printf(" %f \t", wr1[i]);
}
printf("\n res \n");
for (int i=0; i<m+1;i++){
printf("\n");
for (int j=0; j<m;j++){
 printf(" %f \t", res[i][j]);
}}

free(wr); free(wi); free(vr);
free(wr1); free(wi1); free(vr1);


free(b); free(M_l); free(ind1);



  MPI_Barrier(((MPI_Comm) ((void *) &(ompi_mpi_comm_world))));
  _xmp_etime_body = gettimeofday_sec()-_xmp_t0;
}

  {
{
    extern XMP_Matrix * _XMP_ADDR_res;
    type_export((void *)(_XMP_ADDR_res),argv[2],Matrix_MPI_Type,Matrix_export,"4,6;1,1;1,1;[*][j]:(j,*)");
}
  }

  return 0;
}
# 1 "Footer section"
