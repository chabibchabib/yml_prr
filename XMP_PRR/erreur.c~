//AHMED CHABIB -M2 CHPS, UVSQ-MAISON DE LA SIMULATION
/* Ce programme est une implémentation XMP de l'étape de la projection de l'algorithme de PRR
 On suppose qu'on a une grille 1 D de processeurs, Il faut que la taille n soit divisible par 
le nombre de processeurs appelé  dans l'étape de l'éxécution. Les résultats sont vérifiés par 
Octave */



#include <stdio.h>
#include<stdlib.h>
#include <time.h>
#include<math.h>
int  n =6; int m=3; int r=2;
#pragma xmp nodes p(1,*)
#pragma xmp template t(0:n-1,0:n-1)
#pragma xmp distribute t(block,block) onto p

int main(int argc, char ** argv){
double sum=0; 
	// Matrice 
 double A[n][n];
#pragma xmp align A[i][j] with t(j,i)
double Id[n][n];
#pragma xmp align Id[i][j] with t(j,i)
double M[n][n];
#pragma xmp align M[i][j] with t(j,i)
	// vecteurs divisés sur les processeurs 
double vec[n][m]; 
#pragma xmp align vec[i][*] with t(*,i)

double tmp1[n];
#pragma xmp align tmp1[i] with t(*,i)
	// vecteurs connus par tous les processeurs 
double tmp2[n];
#pragma xmp align tmp2[j] with t(j,*)
double res[m+1][m];
#pragma xmp align res[*][j] with t(j,*)

double erreur[m];
	//INITIALIATION A
  #pragma xmp loop (i,j) on t(j,i)
  for (int i=0;i<n;i++){
    for(int j=0;j<n;j++){
	A[i][j]=1;
	if(i==j) A[i][j]=1;
	else if (j==i+1) A[i][j]=2;
	else if (j==i-1) A[i][j]=-2;
    	}
  }
	//INITIALIATION Id
  #pragma xmp loop (i,j) on t(j,i)
  for (int i=0;i<n;i++){
    for(int j=0;j<n;j++){
	Id[i][j]=0;
	if(i==j) Id[i][j]=1;

    	}
  }
	// Initialisation de res
#pragma xmp loop (j) on t(j,i)
    for(int j=0;j<m;j++){
  for (int i=0;i<=m;i++){
	res[i][j]=i+j;
}}
#pragma xmp loop (i,j) on t(j,i)

  for (int i=0;i<n;i++){
    for(int j=0;j<m;j++){
	vec[i][j]=i+j;
}}
	
		// Calcul
for (int k=0; k<m;k++)
{
#pragma xmp gmove
tmp2[:]=vec[:][k];
#pragma xmp loop (i,j) on t(j,i) 
for(int i=0;i<n;i++){
for(int j=0;j<n;j++){
M[i][j]=A[i][j]-res[0][k]*Id[i][j];
}}
#pragma xmp loop (i,j) on t(j,i) reduction(+:sum)
for(int i=0;i<n;i++){
for(int j=0;j<n;j++){
sum=sum+M[i][j]*tmp2[j];

}
tmp1[i]=sum;
sum=0.0;
}
sum=0.0;
#pragma xmp loop (i) on t(*,i) reduction(+:sum)
for (int i=0;i<n;i++){
sum=sum+tmp1[i]*tmp1[i];
}


erreur[k]=sqrt(sum);
sum=0.0;
}// end k 
 //afffichage
/*#pragma xmp task on p(1,1)  
{
for(int i=0;i<m;i++) printf("%f\t",erreur[i]);
printf("\n");
} // end task */

double norme_A=0.0;
#pragma xmp loop (i,j) on t(j,i) reduction(+:norme_A)
for (int i=0;i<n;i++){
for (int j=0;j<n;j++){
norme_A=norme_A+A[i][j]*A[i][j];
}}
norme_A=sqrt(norme_A);
for (int i=0;i<m;i++){
erreur[i]=erreur[i]/norme_A;
}
 //afffichage
#pragma xmp task on p(1,1)  
{
for(int i=0;i<m;i++) printf("%f\t",erreur[i]);
//printf("\n norme: %f\n",norme_A);
printf("\n");
} // end task 
int PMAX; double aide;
	 for (int i=0; i<m-1;i++){
    // Recherche du max à droite de module[i]
    PMAX=i;
    for (int j=i+1;j<m;j++)
      if (fabs(erreur[j])>fabs(erreur[PMAX])) PMAX=j;
    // Echange de module[i] avec le max
    aide=erreur[i];
    erreur[i]=erreur[PMAX];
    erreur[PMAX]=aide;
  }
 //afffichage
#pragma xmp task on p(1,1)  
{
for(int i=0;i<m;i++) printf("%f\t",erreur[i]);
//printf("\n norme: %f\n",norme_A);
printf("\n");
}
aide=0;
for (int i=0; i<r;i++) aide+=erreur[i];
#pragma xmp task on p(1,1)  
{
printf("\n ERR: %f\n",aide);

}
}// fin main


